<!-- Exported using version "7_0_314_5992" on Tuesday, July 12, 2016 7:29:22 AM -->
<content>
    <tanium_package>
        <name>Custom Tagging - Add Tags</name>
        <display_name>Custom Tagging - Add Tags</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 add-tags.vbs &quot;$1&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;validationExpressions&quot;:[{&quot;expression&quot;:&quot;\\S&quot;,&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;label&quot;:&quot;Add tags (space-delimited)&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:&quot;e.g. PCI DMZ Decomm&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter tags space-delimited.&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>add-tags.vbs</file_name>
                <hash>55aa6c54d82282ad2d41390e49f7b9939c582e14fa5cfca1b7b7fb9264261182</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;custom_tagging_-_add_tags&#x2F;add-tags.vbs</source>
                <download_seconds>0</download_seconds>
                <size>1972</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Custom Tagging - Add Tags (Non-Windows)</name>
        <display_name>Custom Tagging - Add Tags (Non-Windows)</display_name>
        <command_line>&#x2F;bin&#x2F;bash CustomTagAdd.sh &quot;$1&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;validationExpressions&quot;:[{&quot;expression&quot;:&quot;\\S&quot;,&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;label&quot;:&quot;Add tags (space-delimited)&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:&quot;e.g. PCI DMZ Decomm&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter tags, space delimited.&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>CustomTagAdd.sh</file_name>
                <hash>bcc889e0a631f7f0922b027fc618f0d93c6a1649812bd15dd167840e78ef58c0</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;custom_tagging_-_add_tags_[non-windows]&#x2F;CustomTagAdd.sh</source>
                <download_seconds>0</download_seconds>
                <size>1375</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute Application Management Tools</name>
        <display_name>Distribute Application Management Tools</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:900 copy-to-tanium-dir.vbs &quot;Tools&quot;</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>copy-to-tanium-dir.vbs</file_name>
                <hash>0826660c0260846212cecd65f1f0d68408c85fd0a01f02a5746107bc70d53080</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_application_management_tools&#x2F;copy-to-tanium-dir.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3523</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>startservice.vbs</file_name>
                <hash>958d6fb3ffe9eb72517111461332ce47c2653029089ed8539a2eef38fb2d7ff0</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_application_management_tools&#x2F;startservice.vbs</source>
                <download_seconds>0</download_seconds>
                <size>1256</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>stopservice.vbs</file_name>
                <hash>eeaa709a81d8be2b517c777920e017adbafb19aa594a8839193bc12be2c3914a</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_application_management_tools&#x2F;stopservice.vbs</source>
                <download_seconds>0</download_seconds>
                <size>1256</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>taskkill.vbs</file_name>
                <hash>b6d4f68603550c7a4fb9d02546176366cba8704ae85e0adccae8a9d80939ef32</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_application_management_tools&#x2F;taskkill.vbs</source>
                <download_seconds>0</download_seconds>
                <size>1261</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute Hardware Tools</name>
        <display_name>Distribute Hardware Tools</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 copy-to-tanium-dir.vbs &quot;Tools\Hardware&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>copy-to-tanium-dir.vbs</file_name>
                <hash>eb38a12b8d317393dcf45dbefb90e007fac82ae97555fda0cd5d27105f286904</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_hardware_tools&#x2F;copy-to-tanium-dir.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3528</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>usb.ids</file_name>
                <hash>7aa98afbf713ef04631e9ba7add6d7e403aa1a28dc1753e31999bda973d680bf</hash>
                <source>http:&#x2F;&#x2F;www.linux-usb.org&#x2F;usb.ids</source>
                <download_seconds>2592000</download_seconds>
                <size>561590</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute Tanium Standard Utilities</name>
        <display_name>Distribute Tanium Standard Utilities</display_name>
        <command_line>cmd &#x2F;c cscript install-standard-utils.vbs &quot;Tools\StdUtils&quot;</command_line>
        <command_line_timeout>2700</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>7za.exe</file_name>
                <hash>c136b1467d669a725478a6110ebaaab3cb88a3d389dfa688e06173c066b76fcf</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;7za.exe</source>
                <download_seconds>0</download_seconds>
                <size>587776</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>bundle.cfg</file_name>
                <hash>b92a46df8956b242ef972014c0ccb7204ef5ccd8cbfb1545c49c31eaa99fd8e6</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;bundle.cfg</source>
                <download_seconds>0</download_seconds>
                <size>66</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>copy-to-tanium-dir-predist.vbs</file_name>
                <hash>a1385dc7ca7b2cd575c0a1317667670a6b5c5c32fa9d11a60b5a0398003a9209</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;copy-to-tanium-dir-predist.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3631</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>grep-2.5.4-bin.zip</file_name>
                <hash>3fd98201561b5af3f54a7dacc4f88068f5b5edf19ccdfc981c3c9fc60ff73519</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;grep-2.5.4-bin.zip</source>
                <download_seconds>0</download_seconds>
                <size>451824</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>grep-2.5.4-dep.zip</file_name>
                <hash>2150e12da6631899842c28881a75889794d67b2bbc108341a26052f9bcb27584</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;grep-2.5.4-dep.zip</source>
                <download_seconds>0</download_seconds>
                <size>898241</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>hashdeep.zip</file_name>
                <hash>fab3a5089b152f2d4be7efed549c17c4e4d78c6fcbe368b591a68da9147535c5</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;hashdeep.zip</source>
                <download_seconds>0</download_seconds>
                <size>632082</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>install-standard-utils.vbs</file_name>
                <hash>5083fc4b76634c83b2dac2ef7583b78e67dacc45e76d0c5c473264dd30f48622</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;install-standard-utils.vbs</source>
                <download_seconds>0</download_seconds>
                <size>11895</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>runas-allusers-wrapper.vbs</file_name>
                <hash>95d14ba3dcd9cdc77c39bfac562017765e78c501a08ff735727e21291b6f884e</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;runas-allusers-wrapper.vbs</source>
                <download_seconds>0</download_seconds>
                <size>26536</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>runasuser.exe</file_name>
                <hash>5f93a7d04f1a26c30e08acd4f4d2067227e2be6d03f0ccc7dd4b9a7a43321a6f</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;runasuser.exe</source>
                <download_seconds>0</download_seconds>
                <size>160256</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>runasuser64.exe</file_name>
                <hash>27ea69531c36afc7ad92ad460e54cd0fec8889bb8a3d7e074f00a8c4b052916e</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;runasuser64.exe</source>
                <download_seconds>0</download_seconds>
                <size>195584</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>sqlite-shell-win32-x86-3080600.zip</file_name>
                <hash>cd286bbae0a866c5c50b023d37fcf74d1ff94ead435730ac208e839141a1f38d</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;sqlite-shell-win32-x86-3080600.zip</source>
                <download_seconds>0</download_seconds>
                <size>308117</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>unzip-and-run.vbs</file_name>
                <hash>2337859a5a4f572f81c9b6f7cbb3760ec935fb659c0659116f044dceac3f0cd2</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;unzip-and-run.vbs</source>
                <download_seconds>0</download_seconds>
                <size>4923</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>yara-2.1.0-win32.zip</file_name>
                <hash>3251de0088435eca8273bbcffc8c76f4cea329c41d7fb4b38ffba52f3a211ef2</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;yara-2.1.0-win32.zip</source>
                <download_seconds>0</download_seconds>
                <size>193591</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>yara-2.1.0-win64.zip</file_name>
                <hash>4f98c5f8f89ac8662352c4b59dddad2877e19612428e3caf1923fa2c935f4530</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;distribute_tanium_standard_utilities&#x2F;yara-2.1.0-win64.zip</source>
                <download_seconds>0</download_seconds>
                <size>209757</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Hosts File - Add Entry</name>
        <display_name>Hosts File - Add Entry</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 add-hosts.vbs $1 $2</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;validationExpressions&quot;:[{&quot;expression&quot;:&quot;\\S&quot;,&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;label&quot;:&quot;Alias&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:&quot;tanium.domain.com&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter the alias to add&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;key&quot;:&quot;$2&quot;,&quot;validationExpressions&quot;:[{&quot;expression&quot;:&quot;^((([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])\\.){3})([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])$&quot;,&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;IPv4 addresses only&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;label&quot;:&quot;IP Address&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:&quot;192.168.0.5&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter the IP Address to map to the alias&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>add-hosts.vbs</file_name>
                <hash>b533c556de40a794cc37f5a81b209c5a9fb1b14a3ce66cf0e04ea060cf5c99bf</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;hosts_file_-_add_entry&#x2F;add-hosts.vbs</source>
                <download_seconds>0</download_seconds>
                <size>1882</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Hosts File - Modify Entry</name>
        <display_name>Hosts File - Modify Entry</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 modify-hosts.vbs $1 $2</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;validationExpressions&quot;:[{&quot;expression&quot;:&quot;\\S&quot;,&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;label&quot;:&quot;Alias&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:&quot;tanium.domain.com&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter the alias to modify&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;key&quot;:&quot;$2&quot;,&quot;validationExpressions&quot;:[{&quot;expression&quot;:&quot;^((([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])\\.){3})([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])$&quot;,&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;IPv4 addresses only&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;label&quot;:&quot;IP Address&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:&quot;192.168.0.5&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter the IP Address to map to the alias&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>modify-hosts.vbs</file_name>
                <hash>f9f26a3d8856d1dd1801d97bb45afd9e29de2653454710f802f708455d3d53eb</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;hosts_file_-_modify_entry&#x2F;modify-hosts.vbs</source>
                <download_seconds>0</download_seconds>
                <size>1688</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Hosts File - Remove Entry</name>
        <display_name>Hosts File - Remove Entry</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 remove-hosts.vbs $1</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;validationExpressions&quot;:[{&quot;expression&quot;:&quot;\\S&quot;,&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;label&quot;:&quot;Alias&quot;,&quot;maxChars&quot;:255,&quot;promptText&quot;:&quot;e.g. tanium.domain.com&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter the alias to remove&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>remove-hosts.vbs</file_name>
                <hash>e64587244f3c40bc0a58d8820d6f8b900a957c0fd6268b465229225b1407387a</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;hosts_file_-_remove_entry&#x2F;remove-hosts.vbs</source>
                <download_seconds>0</download_seconds>
                <size>1509</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Modify Tanium Client Setting</name>
        <display_name>Modify Tanium Client Setting</display_name>
        <command_line>cmd &#x2F;c cscript.exe set-client-settings-parameterized.vbs &quot;&#x2F;RegType:$1&quot; &quot;&#x2F;SettingName:$2&quot; &quot;&#x2F;SettingValue:$3&quot;</command_line>
        <command_line_timeout>120</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;label&quot;:&quot;RegType&quot;,&quot;key&quot;:&quot;$1&quot;,&quot;values&quot;:[&quot;REG_DWORD&quot;,&quot;REG_SZ&quot;],&quot;value&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Required: Select one registry value type&quot;,&quot;promptText&quot;:&quot;Choose a registry value type&quot;,&quot;requireSelection&quot;:true,&quot;defaultValue&quot;:&quot;&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;},{&quot;label&quot;:&quot;ValueName&quot;,&quot;key&quot;:&quot;$2&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:64,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Only alpha characters allowed&quot;,&quot;expression&quot;:&quot;.\\S*&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;value&quot;:&quot;Client Setting Name goes here&quot;,&quot;helpString&quot;:&quot;Required: Enter the client setting name. Be sure to include underscores &#x27;_&#x27; where needed. Spaces are generally not supported.&quot;,&quot;promptText&quot;:&quot;Client Setting Name&quot;,&quot;defaultValue&quot;:&quot;Client Setting Name goes here&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;label&quot;:&quot;ValueData&quot;,&quot;key&quot;:&quot;$3&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:256,&quot;validationExpressions&quot;:[],&quot;value&quot;:&quot;Client Setting Data goes here&quot;,&quot;helpString&quot;:&quot;Required: Enter the client setting data. Enter word &#x27;remove&#x27; to delete the setting.&quot;,&quot;promptText&quot;:&quot;Client Setting Data&quot;,&quot;defaultValue&quot;:&quot;Client Setting Data goes here&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-client-settings-parameterized.vbs</file_name>
                <hash>ebcd4de1e0978e92e48a7d29b769b282a732b0579ee640dc3de07d8dd467ced6</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;modify_tanium_client_setting&#x2F;set-client-settings-parameterized.vbs</source>
                <download_seconds>0</download_seconds>
                <size>5197</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Reboot Windows Machine</name>
        <display_name>Reboot Windows Machine</display_name>
        <command_line>cmd &#x2F;c start &#x2F;B cscript &#x2F;&#x2F;T:3600 tanium-reboot.vbs &#x2F;RebootOnlyIfNecessary:$1 &#x2F;RandomWaitTimeInSeconds:$2</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;values&quot;:[&quot;yes&quot;,&quot;no&quot;],&quot;key&quot;:&quot;$1&quot;,&quot;label&quot;:&quot;Reboot Only If Windows Requires It&quot;,&quot;helpString&quot;:null,&quot;promptText&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;requireSelection&quot;:true,&quot;value&quot;:&quot;&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;},{&quot;maximum&quot;:3600,&quot;key&quot;:&quot;$2&quot;,&quot;stepSize&quot;:5,&quot;label&quot;:&quot;Random Reboot Delay (seconds)&quot;,&quot;helpString&quot;:null,&quot;snapInterval&quot;:5,&quot;defaultValue&quot;:&quot;30&quot;,&quot;minimum&quot;:0,&quot;value&quot;:&quot;30&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>tanium-reboot.vbs</file_name>
                <hash>42fdea517e978739292756719506afa4e2c3255db46263e67539e23555f455f7</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;reboot_windows_machine&#x2F;tanium-reboot.vbs</source>
                <download_seconds>0</download_seconds>
                <size>23568</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Registry - Create Key</name>
        <display_name>Registry - Create Key</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 create-key.vbs &quot;$1&quot; &quot;$2&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;values&quot;:[&quot;32&quot;,&quot;64&quot;,&quot;Both&quot;],&quot;helpString&quot;:&quot;For target devices running a 64-bit OS, indicate whether keys related to Application Data should be written to the 32 bit, 64 bit or both views of the registry&quot;,&quot;promptText&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;requireSelection&quot;:true,&quot;label&quot;:&quot;Architecture&quot;,&quot;key&quot;:&quot;$1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;},{&quot;validationExpressions&quot;:[{&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;helpString&quot;:&quot;Enter the fully qualified registry key name to add&quot;,&quot;promptText&quot;:&quot;HKLM\\Software\\Tanium\\Tanium Client&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;maxChars&quot;:1048576,&quot;restrict&quot;:null,&quot;label&quot;:&quot;Registry Key Name&quot;,&quot;key&quot;:&quot;$2&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>create-key.vbs</file_name>
                <hash>c0f90b616dae9ea50c077984178672c8af11bfc719c52870bb002fd588a20734</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;registry_-_create_key&#x2F;create-key.vbs</source>
                <download_seconds>0</download_seconds>
                <size>12529</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Registry - Delete Key</name>
        <display_name>Registry - Delete Key</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 delete-key.vbs &quot;$1&quot; &quot;$2&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;values&quot;:[&quot;32&quot;,&quot;64&quot;,&quot;Both&quot;],&quot;helpString&quot;:&quot;For target devices running a 64-bit OS, indicate whether keys related to Application Data for deletion are located in the 32 bit, 64 bit or both views of the registry&quot;,&quot;promptText&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;requireSelection&quot;:true,&quot;label&quot;:&quot;OS Architecture&quot;,&quot;key&quot;:&quot;$1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;},{&quot;validationExpressions&quot;:[{&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;helpString&quot;:&quot;Enter the fully qualified registry key name to delete&quot;,&quot;promptText&quot;:&quot;HKLM\\Software\\Tanium\\Tanium Client&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;maxChars&quot;:1048576,&quot;restrict&quot;:null,&quot;label&quot;:&quot;Registry Key Name&quot;,&quot;key&quot;:&quot;$2&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>delete-key.vbs</file_name>
                <hash>5e62291fbdbb444b15206942cd587e03db7dcf29dad05fcbb3fa8a7a8fb17458</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;registry_-_delete_key&#x2F;delete-key.vbs</source>
                <download_seconds>0</download_seconds>
                <size>12513</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Registry - Delete Value</name>
        <display_name>Registry - Delete Value</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 delete-value.vbs &quot;$1&quot; &quot;$2&quot; &quot;$3&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;values&quot;:[&quot;32&quot;,&quot;64&quot;,&quot;Both&quot;],&quot;helpString&quot;:&quot;For target devices running a 64-bit OS, indicate whether values associated with keys related to Application Data should be deleted from the 32 bit, 64 bit or both views of the registry&quot;,&quot;promptText&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;requireSelection&quot;:true,&quot;label&quot;:&quot;OS Architecture&quot;,&quot;key&quot;:&quot;$1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;},{&quot;validationExpressions&quot;:[{&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;helpString&quot;:&quot;Enter the fully qualified registry key name containing the value to delete&quot;,&quot;heightInLines&quot;:5,&quot;promptText&quot;:&quot;HKLM\\Software\\Tanium\\Tanium Client&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;maxChars&quot;:10485760,&quot;restrict&quot;:null,&quot;label&quot;:&quot;Registry Key Name&quot;,&quot;key&quot;:&quot;$2&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextAreaParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextAreaParameter&quot;},{&quot;validationExpressions&quot;:[{&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;helpString&quot;:&quot;Enter the name of the specific value to delete from the registry key identified above.&quot;,&quot;promptText&quot;:&quot;Version&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;maxChars&quot;:255,&quot;restrict&quot;:null,&quot;label&quot;:&quot;Registry Value Name&quot;,&quot;key&quot;:&quot;$3&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>delete-value.vbs</file_name>
                <hash>cc7cd67d2b673238e2ce1b9a82b6875ed258631ca8d8dbaf6cab8c0c80785488</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;registry_-_delete_value&#x2F;delete-value.vbs</source>
                <download_seconds>0</download_seconds>
                <size>12616</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Registry - Set Value</name>
        <display_name>Registry - Set Value</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 set-value.vbs &quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot; &quot;$5&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;values&quot;:[&quot;32&quot;,&quot;64&quot;,&quot;Both&quot;],&quot;helpString&quot;:&quot;For target devices running a 64-bit OS, indicate whether values associated with keys related to Application Data should be written to the 32 bit, 64 bit or both views of the registry&quot;,&quot;promptText&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;requireSelection&quot;:true,&quot;label&quot;:&quot;OS Architecture&quot;,&quot;key&quot;:&quot;$1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;},{&quot;validationExpressions&quot;:[{&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;helpString&quot;:&quot;Enter the fully qualified path of the Registry Key&quot;,&quot;promptText&quot;:&quot;HKLM\\Software\\Tanium\\Tanium Client&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;maxChars&quot;:1048576,&quot;restrict&quot;:null,&quot;label&quot;:&quot;Registry Key Name&quot;,&quot;key&quot;:&quot;$2&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;validationExpressions&quot;:[{&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;helpString&quot;:&quot;Enter the Value Name associated with the Registry Key above to add or update&quot;,&quot;promptText&quot;:&quot;Version&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;maxChars&quot;:255,&quot;restrict&quot;:null,&quot;label&quot;:&quot;Value Name&quot;,&quot;key&quot;:&quot;$3&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;validationExpressions&quot;:[],&quot;helpString&quot;:&quot;Enter the data to associate with the registry value&quot;,&quot;heightInLines&quot;:5,&quot;promptText&quot;:&quot;4.0.314.7020&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;maxChars&quot;:1048576,&quot;restrict&quot;:null,&quot;label&quot;:&quot;Value Data&quot;,&quot;key&quot;:&quot;$4&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextAreaParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextAreaParameter&quot;},{&quot;values&quot;:[&quot;REG_SZ&quot;,&quot;REG_EXPAND_SZ&quot;,&quot;REG_BINARY&quot;,&quot;REG_DWORD&quot;,&quot;REG_QWORD&quot;,&quot;REG_MULTI_SZ&quot;],&quot;helpString&quot;:&quot;Select a Valid Registry Data Value Type&quot;,&quot;promptText&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;requireSelection&quot;:true,&quot;label&quot;:&quot;Value Type&quot;,&quot;key&quot;:&quot;$5&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;}],&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-value.vbs</file_name>
                <hash>47ffb624381b01ecb253a01a022ab308e953f2d928f0cfbd12b3a7b5198a773b</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;registry_-_set_value&#x2F;set-value.vbs</source>
                <download_seconds>0</download_seconds>
                <size>15133</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Linux Tanium Client Logging Level</name>
        <display_name>Set Linux Tanium Client Logging Level</display_name>
        <command_line>&#x2F;bin&#x2F;sh set-log-level-parameterized.sh $1</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;maximum&quot;:99,&quot;key&quot;:&quot;$1&quot;,&quot;stepSize&quot;:1,&quot;label&quot;:&quot;Log Level (0-99)&quot;,&quot;helpString&quot;:&quot;Enter a logging level, 0=no logging, 99=verbose logging&quot;,&quot;snapInterval&quot;:1,&quot;defaultValue&quot;:&quot;1&quot;,&quot;minimum&quot;:0,&quot;value&quot;:&quot;1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-log-level-parameterized.sh</file_name>
                <hash>26b0a2c37983e3743e94976dc6fe43c87a4e9640c5417f237bb0fe904312e7e6</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_linux_tanium_client_logging_level&#x2F;set-log-level-parameterized.sh</source>
                <download_seconds>0</download_seconds>
                <size>280</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Mac Tanium Client Logging Level</name>
        <display_name>Set Mac Tanium Client Logging Level</display_name>
        <command_line>&#x2F;bin&#x2F;sh set-log-level-parameterized.sh $1</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;maximum&quot;:99,&quot;key&quot;:&quot;$1&quot;,&quot;stepSize&quot;:1,&quot;label&quot;:&quot;Log Level (0-99)&quot;,&quot;helpString&quot;:&quot;Enter a logging level, 0=no logging, 99=verbose logging&quot;,&quot;snapInterval&quot;:1,&quot;defaultValue&quot;:&quot;1&quot;,&quot;minimum&quot;:0,&quot;value&quot;:&quot;1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-log-level-parameterized.sh</file_name>
                <hash>26b0a2c37983e3743e94976dc6fe43c87a4e9640c5417f237bb0fe904312e7e6</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_mac_tanium_client_logging_level&#x2F;set-log-level-parameterized.sh</source>
                <download_seconds>0</download_seconds>
                <size>280</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Power Plan - Balanced</name>
        <display_name>Set Power Plan - Balanced</display_name>
        <command_line>cmd &#x2F;c powercfg.exe -S SCHEME_BALANCED</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Power Plan - High Performance</name>
        <display_name>Set Power Plan - High Performance</display_name>
        <command_line>cmd &#x2F;c powercfg.exe -S SCHEME_MIN</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Power Plan - Power Saver</name>
        <display_name>Set Power Plan - Power Saver</display_name>
        <command_line>cmd &#x2F;c powercfg.exe -S SCHEME_MAX</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Tanium PowerShell ExecutionPolicy</name>
        <display_name>Set Tanium PowerShell ExecutionPolicy</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 set-powershell-executionpolicy.vbs</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>set-powershell-executionpolicy.vbs</file_name>
                <hash>5a2ab156d469f047a8fca230cf0eeef57aae8fd540781b72485ce6dd54f7fcc3</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_tanium_powershell_executionpolicy&#x2F;set-powershell-executionpolicy.vbs</source>
                <download_seconds>0</download_seconds>
                <size>561</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Tanium Sensor Randomization</name>
        <display_name>Set Tanium Sensor Randomization</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 set-value.vbs &quot;32&quot; &quot;HKLM\Software\Tanium\Tanium Client&quot; &quot;RandomSensorDelayInSeconds&quot; &quot;$1&quot; &quot;REG_DWORD&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;label&quot;:&quot;Sensor Randomization&quot;,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;promptText&quot;:&quot;Enter Sensor Randomization in seconds&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter number of seconds to randomly delay sensor executuion. Enter 0 (zero) to disable sensor randomization&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-value.vbs</file_name>
                <hash>d9b8a9f313d530d0e2b51170e78d14d29f8af0dfd728ad4b865a0231539c61a8</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_tanium_sensor_randomization&#x2F;set-value.vbs</source>
                <download_seconds>0</download_seconds>
                <size>13194</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Tanium Server Name</name>
        <display_name>Set Tanium Server Name</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 set-value.vbs &quot;32&quot; &quot;HKLM\Software\Tanium\Tanium Client&quot; &quot;ServerName&quot; &quot;$1&quot; &quot;REG_SZ&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;label&quot;:&quot;Server Name&quot;,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;promptText&quot;:&quot;Enter Server Name&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter a Server Name here as FQDN, hostname or IP Address&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-value.vbs</file_name>
                <hash>6a8ff8b4da5606b3b327cf5c01852474ee4a1747107f2f1c402029e3e0b2eb8f</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_tanium_server_name&#x2F;set-value.vbs</source>
                <download_seconds>0</download_seconds>
                <size>12945</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Tanium Server Name List</name>
        <display_name>Set Tanium Server Name List</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 set-value.vbs &quot;32&quot; &quot;HKLM\Software\Tanium\Tanium Client&quot; &quot;ServerNameList&quot; &quot;$1&quot; &quot;REG_SZ&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;label&quot;:&quot;Server Name List&quot;,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;promptText&quot;:&quot;Enter Server Name List&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter a space-delimited server name list. Server names can be FQDN, hostname or IP address.&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-value.vbs</file_name>
                <hash>d9b8a9f313d530d0e2b51170e78d14d29f8af0dfd728ad4b865a0231539c61a8</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_tanium_server_name_list&#x2F;set-value.vbs</source>
                <download_seconds>0</download_seconds>
                <size>13194</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Tanium Server Name List [Non-Windows]</name>
        <display_name>Set Tanium Server Name List [Non-Windows]</display_name>
        <command_line>&#x2F;bin&#x2F;sh set-values.sh $1</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;label&quot;:&quot;Server Name List&quot;,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;promptText&quot;:&quot;Enter Server Name List&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter a space-delimited server name list. Server names can be FQDN, hostname or IP address.&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-values.sh</file_name>
                <hash>147be43a81e29c1ce67f94d9d1148911c03107ef1b5c0513f5de9f83726ea883</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_tanium_server_name_list_[non-windows]&#x2F;set-values.sh</source>
                <download_seconds>0</download_seconds>
                <size>1317</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data>
            <meta_data_item>
                <name>TANIUMCONTENT_description.en</name>
                <value>This packages set the Tanium Server Name List value for the client.&lt;br&#x2F;&gt;</value>
                <admin_flag>0</admin_flag>
            </meta_data_item>
        </meta_data>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Tanium Server Name [Non-Windows]</name>
        <display_name>Set Tanium Server Name [Non-Windows]</display_name>
        <command_line>&#x2F;bin&#x2F;sh set-value.sh $1</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;key&quot;:&quot;$1&quot;,&quot;label&quot;:&quot;Server Name&quot;,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;promptText&quot;:&quot;Enter Server Name&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;Enter a Server Name here as FQDN, hostname or IP Address&quot;,&quot;value&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files>
            <package_file>
                <file_name>set-value.sh</file_name>
                <hash>b3979fd86e7ee2373b471c9baa74d845a67ad05e940a5dcd9665e6436d4d9f3e</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;set_tanium_server_name_[non-windows]&#x2F;set-value.sh</source>
                <download_seconds>0</download_seconds>
                <size>1323</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data>
            <meta_data_item>
                <name>TANIUMCONTENT_description.en</name>
                <value>This packages set the Tanium Server Name value for the client.&lt;br&#x2F;&gt;</value>
                <admin_flag>0</admin_flag>
            </meta_data_item>
        </meta_data>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Set Windows Tanium Client Logging Level</name>
        <display_name>Set Windows Tanium Client Logging Level</display_name>
        <command_line>cmd &#x2F;c reg add &quot;HKLM\Software\Tanium\Tanium Client&quot; &#x2F;v LogVerbosityLevel &#x2F;t REG_DWORD &#x2F;d $1 &#x2F;f</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;maximum&quot;:99,&quot;key&quot;:&quot;$1&quot;,&quot;stepSize&quot;:1,&quot;label&quot;:&quot;Log Level (0-99)&quot;,&quot;helpString&quot;:&quot;Enter a logging level, 0=no logging, 99=verbose logging&quot;,&quot;snapInterval&quot;:1,&quot;defaultValue&quot;:&quot;1&quot;,&quot;minimum&quot;:0,&quot;value&quot;:&quot;1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Tanium Client - Set Action Lock Off</name>
        <display_name>Tanium Client - Set Action Lock Off</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:1200 set-action-lock.vbs &#x2F;SetActionLockFlag:Off</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>1</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>set-action-lock.vbs</file_name>
                <hash>21c9ded1e427c9a610a0cc9b4058e16da193254165df4204a754fbd842d26357</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;tanium_client_-_set_action_lock_off&#x2F;set-action-lock.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3157</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Tanium Client - Set Action Lock On</name>
        <display_name>Tanium Client - Set Action Lock On</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:1200 set-action-lock.vbs &#x2F;SetActionLockFlag:On</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>1</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>set-action-lock.vbs</file_name>
                <hash>21c9ded1e427c9a610a0cc9b4058e16da193254165df4204a754fbd842d26357</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;tanium_client_-_set_action_lock_on&#x2F;set-action-lock.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3157</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>USB Write Protect - Set to Off</name>
        <display_name>USB Write Protect - Set to Off</display_name>
        <command_line>cmd &#x2F;c cscript.exe &#x2F;&#x2F;T:300 Set-USB-Write-Protected.vbs &quot;off&quot;</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>Set-USB-Write-Protected.vbs</file_name>
                <hash>d4673c10262cae8e41c833c92c52de3e6c2f9096575608248e8788fba04be172</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;usb_write_protect_-_set_to_off&#x2F;Set-USB-Write-Protected.vbs</source>
                <download_seconds>0</download_seconds>
                <size>2007</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>USB Write Protect - Set to On</name>
        <display_name>USB Write Protect - Set to On</display_name>
        <command_line>cmd &#x2F;c cscript.exe &#x2F;&#x2F;T:300 Set-USB-Write-Protected.vbs &quot;on&quot;</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>Set-USB-Write-Protected.vbs</file_name>
                <hash>d4673c10262cae8e41c833c92c52de3e6c2f9096575608248e8788fba04be172</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;usb_write_protect_-_set_to_on&#x2F;Set-USB-Write-Protected.vbs</source>
                <download_seconds>0</download_seconds>
                <size>2007</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Delete Logout Hook</name>
        <display_name>Delete Logout Hook</display_name>
        <command_line>&#x2F;bin&#x2F;bash deleteLogoutHook.sh</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>deleteLogoutHook.sh</file_name>
                <hash>5b907f42618e4dde79adca5c0b881b0572c742a412338c185222bce20b4ac1e2</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;delete_logout_hook&#x2F;deleteLogoutHook.sh</source>
                <download_seconds>0</download_seconds>
                <size>62</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute IR Tools (Linux)</name>
        <display_name>Distribute IR Tools (Linux)</display_name>
        <command_line>&#x2F;bin&#x2F;bash distribute-tools.sh &quot;..&#x2F;..&#x2F;Tools&#x2F;IR&quot; STRICT</command_line>
        <command_line_timeout>120</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>distribute-tools.sh</file_name>
                <hash>fca438e4486d2398055e17bfb1d791bc05f7b0c146cc3c22e6b879fdf5fd364d</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_ir_tools_[linux]&#x2F;distribute-tools.sh</source>
                <download_seconds>0</download_seconds>
                <size>1720</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>yara</file_name>
                <hash>ef4aa19c7d452c24c33a6939fd80aba307555db003b3688c2bea167220f3c699</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_ir_tools_[linux]&#x2F;yara</source>
                <download_seconds>0</download_seconds>
                <size>305759</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>yara64</file_name>
                <hash>8dcf87da45d9f649b0a43fbe9dfa1cb8a96b35eb4baf660946aeb3a3ae71f975</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_ir_tools_[linux]&#x2F;yara64</source>
                <download_seconds>0</download_seconds>
                <size>317619</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute IR Tools (Mac)</name>
        <display_name>Distribute IR Tools (Mac)</display_name>
        <command_line>&#x2F;bin&#x2F;bash distribute-tools.sh &quot;..&#x2F;..&#x2F;Tools&#x2F;IR&quot; STRICT</command_line>
        <command_line_timeout>120</command_line_timeout>
        <download_seconds>0</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>distribute-tools.sh</file_name>
                <hash>fca438e4486d2398055e17bfb1d791bc05f7b0c146cc3c22e6b879fdf5fd364d</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_ir_tools_[mac]&#x2F;distribute-tools.sh</source>
                <download_seconds>0</download_seconds>
                <size>1720</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute Incident Response Tools</name>
        <display_name>Distribute Incident Response Tools</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 install-incident-response-tools.vbs &quot;Tools\IR&quot;</command_line>
        <command_line_timeout>2700</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>7za.exe</file_name>
                <hash>7224bb4f4726e5d91b399982d89bb3353ec219c2a8edf837e214f517e5510238</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;7za.exe</source>
                <download_seconds>0</download_seconds>
                <size>651776</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>Autoruns.zip</file_name>
                <hash>cd906e9e95c4019e490eb5c6c5fb120aa65ef6703c1e9972c010c1e44f6cbde7</hash>
                <source>https:&#x2F;&#x2F;download.sysinternals.com&#x2F;files&#x2F;Autoruns.zip</source>
                <download_seconds>0</download_seconds>
                <size>1302909</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>create-alternate-data-streams-report.vbs</file_name>
                <hash>76bdc33d3cb48a414d29d16d557e3bb60a9c22c56677359861022cb4599656c7</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;create-alternate-data-streams-report.vbs</source>
                <download_seconds>0</download_seconds>
                <size>13157</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>grep-2.5.4-bin.zip</file_name>
                <hash>3fd98201561b5af3f54a7dacc4f88068f5b5edf19ccdfc981c3c9fc60ff73519</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;grep-2.5.4-bin.zip</source>
                <download_seconds>0</download_seconds>
                <size>451824</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>grep-2.5.4-dep.zip</file_name>
                <hash>2150e12da6631899842c28881a75889794d67b2bbc108341a26052f9bcb27584</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;grep-2.5.4-dep.zip</source>
                <download_seconds>0</download_seconds>
                <size>898241</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>Handle.zip</file_name>
                <hash>c3fd53b8cc363e466bcc5fc853a4a3c60ffd0230e322923a33a915feb0464214</hash>
                <source>https:&#x2F;&#x2F;download.sysinternals.com&#x2F;files&#x2F;Handle.zip</source>
                <download_seconds>0</download_seconds>
                <size>316667</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>install-incident-response-tools.vbs</file_name>
                <hash>9598f81cf560a3c5637f5ffd7bb93673b7f70d0953ae594dc83aac4cfed3d120</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;install-incident-response-tools.vbs</source>
                <download_seconds>0</download_seconds>
                <size>10137</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>ListDlls.zip</file_name>
                <hash>b9772e115cf9112790c172d3c7041a429ae95a6d1ac6f5f773c1ce3040581ab5</hash>
                <source>https:&#x2F;&#x2F;download.sysinternals.com&#x2F;files&#x2F;ListDlls.zip</source>
                <download_seconds>0</download_seconds>
                <size>315040</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>ListDlls2.zip</file_name>
                <hash>6b61201071d50acf701af70d3e53447bc089a0745c4ea512a9fe5c29d1e4cb25</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;exchange&#x2F;listdlls2&#x2F;ListDlls2.zip</source>
                <download_seconds>0</download_seconds>
                <size>29661</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>mftrcrd.exe</file_name>
                <hash>8fdae311ad59dfbabec9d1823d24f3e26ade3213303f2aaaad037597574d07c0</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;mftrcrd.exe</source>
                <download_seconds>0</download_seconds>
                <size>587729</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>powerforensics.zip</file_name>
                <hash>4bfe4a185e30d02e36c484fecb109d8f9dc0802bc5a4502fae8d73400b06837f</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;powerforensics.zip</source>
                <download_seconds>0</download_seconds>
                <size>1122746</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>remove-old-id-files.vbs</file_name>
                <hash>913794056fa8706ee7623e59bb168b67c473306cd0609d70d3f739a988c0ecc8</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;remove-old-id-files.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3125</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>running-procs-yara-match.vbs</file_name>
                <hash>04eb0cb16266ad6f690a8c863d85eed93a9d550c823532051e0f0f6dfb5a2c7e</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;running-procs-yara-match.vbs</source>
                <download_seconds>0</download_seconds>
                <size>20953</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>search-for-files.vbs</file_name>
                <hash>45f7e793a3aa7c3788146e8aae2d345afe20704d36894cba9feb8f27974ffa78</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;search-for-files.vbs</source>
                <download_seconds>0</download_seconds>
                <size>13406</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>search-for-hex-pattern.vbs</file_name>
                <hash>fedf183d320c2d107edbbf3866ed74497dc4ba2c7c9330f02c8faa9f780a7c71</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;search-for-hex-pattern.vbs</source>
                <download_seconds>0</download_seconds>
                <size>10394</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>search-for-recently-created-files.vbs</file_name>
                <hash>07d09e27c5941a072e9f325107352fb94172505b2d36b7ab106a78d481a3c2fb</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;search-for-recently-created-files.vbs</source>
                <download_seconds>0</download_seconds>
                <size>13903</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>search-for-recently-modified-files.vbs</file_name>
                <hash>c83a929737a0542654499125e425c65dd06a1a72e5a22648be8274f8ba8f81f3</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;search-for-recently-modified-files.vbs</source>
                <download_seconds>0</download_seconds>
                <size>13905</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>search-for-string-pattern.vbs</file_name>
                <hash>4d741db218ef26ebe9998e281c732adc3df07f058d5a4eecbb496995247ed05b</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;search-for-string-pattern.vbs</source>
                <download_seconds>0</download_seconds>
                <size>9333</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>shimcacheparser1.0.zip</file_name>
                <hash>d3d06bb17b1719c92aca13a2ef1757cd436c53c7375faaf5784a5e25712d4280</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;shimcacheparser1.0.zip</source>
                <download_seconds>0</download_seconds>
                <size>4070594</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>Streams.zip</file_name>
                <hash>97614bf16b54f1cc8adcaebf9f08f827b7b7d472861ec44b02d07a0fb711f6a8</hash>
                <source>https:&#x2F;&#x2F;download.sysinternals.com&#x2F;files&#x2F;Streams.zip</source>
                <download_seconds>0</download_seconds>
                <size>143873</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>TaniumExecWrapper.exe</file_name>
                <hash>4ec8259dbebf167cbf03e37e8316a3760b48e8c82adaaa310479c305142fd997</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;TaniumExecWrapper.exe</source>
                <download_seconds>0</download_seconds>
                <size>2580448</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>TaniumFileInfo.exe</file_name>
                <hash>ab8b4715b92c724642a52ee3bc009166b3d386fe18d41db73b049129755d3cb8</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;TaniumFileInfo.exe</source>
                <download_seconds>0</download_seconds>
                <size>10967640</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>yara-3.4.0-win32.zip</file_name>
                <hash>712886169b98ae75e067686369f59474e6d1cfe65e60a9cc9ff5282cb25715da</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;yara-3.4.0-win32.zip</source>
                <download_seconds>0</download_seconds>
                <size>700258</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>yara-3.4.0-win64.zip</file_name>
                <hash>f4d4ca436634eb0edd2b578b9beff177c8c461cd88c80a20f041b8927ee0fd8f</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;yara-3.4.0-win64.zip</source>
                <download_seconds>0</download_seconds>
                <size>834739</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>yararules.zip</file_name>
                <hash>0a4e9186b8c8894ad5ebe58d3d53321f3cfca652c340abde335b69f1c2a148ad</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_incident_response_tools&#x2F;yararules.zip</source>
                <download_seconds>0</download_seconds>
                <size>677</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute MD5 Exploit List</name>
        <display_name>Distribute MD5 Exploit List</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 copy-to-tanium-dir.vbs &quot;Tools\IR&quot;</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>copy-to-tanium-dir.vbs</file_name>
                <hash>eb38a12b8d317393dcf45dbefb90e007fac82ae97555fda0cd5d27105f286904</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_exploit_list&#x2F;copy-to-tanium-dir.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3528</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>exploits-md5s.dat</file_name>
                <hash>005a3cd39f819b3392cc39f99e62f7831c1011c95d971f9c23d8cbadc00642a9</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_exploit_list&#x2F;exploits-md5s.dat</source>
                <download_seconds>0</download_seconds>
                <size>56</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute MD5 Exploit List (Mac&#x2F;Linux)</name>
        <display_name>Distribute MD5 Exploit List (Mac&#x2F;Linux)</display_name>
        <command_line>&#x2F;bin&#x2F;bash CopyFilesToTanium.sh &quot;Tools&#x2F;IR&quot;</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>0</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>CopyFilesToTanium.sh</file_name>
                <hash>d52c477928f11dbf6312939d377bae414752b55a0844075555359c9a9c00d314</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_exploit_list_[mac-linux]&#x2F;CopyFilesToTanium.sh</source>
                <download_seconds>0</download_seconds>
                <size>555</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>exploits-md5s.dat</file_name>
                <hash>005a3cd39f819b3392cc39f99e62f7831c1011c95d971f9c23d8cbadc00642a9</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_exploit_list_[mac-linux]&#x2F;exploits-md5s.dat</source>
                <download_seconds>0</download_seconds>
                <size>56</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute MD5 Whitelist</name>
        <display_name>Distribute MD5 Whitelist</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 copy-to-tanium-dir.vbs &quot;Tools\IR&quot;</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>copy-to-tanium-dir.vbs</file_name>
                <hash>eb38a12b8d317393dcf45dbefb90e007fac82ae97555fda0cd5d27105f286904</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_whitelist&#x2F;copy-to-tanium-dir.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3528</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>whitelist-md5s.dat</file_name>
                <hash>c95315641bed3a6daa3cdc20165f0d743ad955ee95aca32c2ca3ba43aa0a47d4</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_whitelist&#x2F;whitelist-md5s.dat</source>
                <download_seconds>0</download_seconds>
                <size>49</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute MD5 Whitelist (Mac&#x2F;Linux)</name>
        <display_name>Distribute MD5 Whitelist (Mac&#x2F;Linux)</display_name>
        <command_line>&#x2F;bin&#x2F;bash CopyFilesToTanium.sh &quot;Tools&#x2F;IR&quot;</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>0</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>CopyFilesToTanium.sh</file_name>
                <hash>d52c477928f11dbf6312939d377bae414752b55a0844075555359c9a9c00d314</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_whitelist_[mac-linux]&#x2F;CopyFilesToTanium.sh</source>
                <download_seconds>0</download_seconds>
                <size>555</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>whitelist-md5s.dat</file_name>
                <hash>c95315641bed3a6daa3cdc20165f0d743ad955ee95aca32c2ca3ba43aa0a47d4</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_md5_whitelist_[mac-linux]&#x2F;whitelist-md5s.dat</source>
                <download_seconds>0</download_seconds>
                <size>49</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute Non-Approved Established Connections Exclude List</name>
        <display_name>Distribute Non-Approved Established Connections Exclude List</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 copy-to-tanium-dir.vbs &quot;Tools\IR&quot;</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>0</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>copy-to-tanium-dir.vbs</file_name>
                <hash>eb38a12b8d317393dcf45dbefb90e007fac82ae97555fda0cd5d27105f286904</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_non-approved_established_connections_exclude_list&#x2F;copy-to-tanium-dir.vbs</source>
                <download_seconds>0</download_seconds>
                <size>3528</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>excluded-processes.dat</file_name>
                <hash>d8ec27335dc2a48a2ca2969232e402dc80174938213d1445e6b8f01193be995a</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_non-approved_established_connections_exclude_list&#x2F;excluded-processes.dat</source>
                <download_seconds>0</download_seconds>
                <size>85</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>excluded-subnets.dat</file_name>
                <hash>e727a124b4082314dd0ca1363b018d4770fcba730bd03317f4304118dc4c98ea</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_non-approved_established_connections_exclude_list&#x2F;excluded-subnets.dat</source>
                <download_seconds>0</download_seconds>
                <size>64</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Distribute Non-Approved Established Connections Exclude List (Mac&#x2F;Linux)</name>
        <display_name>Distribute Non-Approved Established Connections Exclude List (Mac&#x2F;Linux)</display_name>
        <command_line>&#x2F;bin&#x2F;bash CopyFilesToTanium.sh &quot;Tools&#x2F;IR&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>0</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>CopyFilesToTanium.sh</file_name>
                <hash>d52c477928f11dbf6312939d377bae414752b55a0844075555359c9a9c00d314</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_non-approved_established_connections_exclude_list_[mac-linux]&#x2F;CopyFilesToTanium.sh</source>
                <download_seconds>0</download_seconds>
                <size>555</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>excluded-processes.dat</file_name>
                <hash>d8ec27335dc2a48a2ca2969232e402dc80174938213d1445e6b8f01193be995a</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_non-approved_established_connections_exclude_list_[mac-linux]&#x2F;excluded-processes.dat</source>
                <download_seconds>0</download_seconds>
                <size>85</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>excluded-subnets.dat</file_name>
                <hash>e727a124b4082314dd0ca1363b018d4770fcba730bd03317f4304118dc4c98ea</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;distribute_non-approved_established_connections_exclude_list_[mac-linux]&#x2F;excluded-subnets.dat</source>
                <download_seconds>0</download_seconds>
                <size>64</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Copy IR Results to Central Location</name>
        <display_name>Incident Response - Copy IR Results to Central Location</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript &#x2F;&#x2F;T:3600 ..\..\Tools\Copy\copy-files-to-destination.vbs &#x2F;Method:$1 &#x2F;Destination:$2 &#x2F;Username:$3 &#x2F;Password:$4 &#x2F;IncidentResponseID:$5 &#x2F;RandomWaitTimeInSeconds:$6</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;promptText&quot;:&quot;Transfer Method&quot;,&quot;key&quot;:&quot;$1&quot;,&quot;helpString&quot;:&quot;Windows Share (SMB) requires write only permissions for Domain Computers or similar&quot;,&quot;label&quot;:&quot;Method&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;requireSelection&quot;:true,&quot;value&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SMB&quot;,&quot;FTP&quot;,&quot;SFTP&quot;,&quot;SCP&quot;],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::DropDownParameter&quot;},{&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;(\\\\\\\\.+\\\\.+|.*\\..*)&quot;,&quot;helpString&quot;:&quot;\\\\server\\share or ftp.host.com or 192.168.0.2&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;promptText&quot;:&quot;&quot;,&quot;key&quot;:&quot;$2&quot;,&quot;helpString&quot;:&quot;\\\\server\\share or ftp.host.com&quot;,&quot;label&quot;:&quot;Destination&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;value&quot;:&quot;&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;validationExpressions&quot;:[],&quot;promptText&quot;:&quot;Leave Blank for Windows SMB destination&quot;,&quot;key&quot;:&quot;$3&quot;,&quot;helpString&quot;:&quot;This data is not secured, read Copy Tools documentation&quot;,&quot;label&quot;:&quot;Username&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;value&quot;:&quot;&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;validationExpressions&quot;:[],&quot;promptText&quot;:&quot;Leave Blank for Windows SMB destination&quot;,&quot;key&quot;:&quot;$4&quot;,&quot;helpString&quot;:&quot;This data is not secured, read Copy Tools documentation&quot;,&quot;label&quot;:&quot;Password&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;value&quot;:&quot;&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;validationExpressions&quot;:[],&quot;promptText&quot;:&quot;Incident Response Job ID from previous IR Action&quot;,&quot;key&quot;:&quot;$5&quot;,&quot;helpString&quot;:&quot;&quot;,&quot;label&quot;:&quot;Incident Response Job ID&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;value&quot;:&quot;&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;key&quot;:&quot;$6&quot;,&quot;stepSize&quot;:10,&quot;helpString&quot;:&quot;Wait up to X seconds, prevents traffic flood&quot;,&quot;label&quot;:&quot;Random Wait Time in Seconds&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;minimum&quot;:0,&quot;snapInterval&quot;:1,&quot;maximum&quot;:1000,&quot;value&quot;:&quot;&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::NumericParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Create Alternate Streams Report</name>
        <display_name>Incident Response - Create Alternate Streams Report</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript.exe &#x2F;&#x2F;T:3600 ..\..\Tools\IR\create-alternate-data-streams-report.vbs &quot;&#x2F;FileOrDir:$1&quot; &#x2F;Recursive:$2 &#x2F;ID:$3</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>{&quot;parameters&quot;:[{&quot;label&quot;:&quot;File or Directory on which to report&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:null,&quot;helpString&quot;:&quot;Paths with spaces must be enclosed in quotes&quot;,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;restrict&quot;:null,&quot;value&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;key&quot;:&quot;$1&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;label&quot;:&quot;Report recursively? (yes&#x2F;no)  &quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:null,&quot;helpString&quot;:&quot;Non-recursive only searches single file or directory itself (does not search within directory)&quot;,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;restrict&quot;:null,&quot;value&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;key&quot;:&quot;$2&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;},{&quot;label&quot;:&quot;IR Job ID&quot;,&quot;maxChars&quot;:0,&quot;promptText&quot;:null,&quot;helpString&quot;:null,&quot;validationExpressions&quot;:[{&quot;flags&quot;:&quot;&quot;,&quot;helpString&quot;:&quot;You must enter a value&quot;,&quot;expression&quot;:&quot;\\S&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;restrict&quot;:null,&quot;value&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;key&quot;:&quot;$3&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Remove Old Incident Response ID Files</name>
        <display_name>Incident Response - Remove Old Incident Response ID Files</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:3600 ..\..\Tools\IR\remove-old-id-files.vbs</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Running Processes with Yara Match</name>
        <display_name>Incident Response - Running Processes with Yara Match</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript.exe &#x2F;&#x2F;T:3600 ..\..\Tools\IR\running-procs-yara-match.vbs &quot;&#x2F;YaraRuleName:$1&quot; &quot;&#x2F;YaraRuleFile:$2&quot; &#x2F;JobID:$3</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>Yara Rule Name: $1 &lt;P&gt;
(enter name of rule or &quot;any&quot;) &lt;P&gt;
Yara Rule File: $2 &lt;P&gt;
IR Job ID: $3</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Search for Files</name>
        <display_name>Incident Response - Search for Files</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript.exe &#x2F;&#x2F;T:3600 ..\..\Tools\IR\search-for-files.vbs &quot;&#x2F;Pattern:$1&quot; &#x2F;ID:$2</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>Pattern (*.exe or *.doc or *file*, etc ...): $1 &lt;P&gt;
To retrieve job results, enter unique ID &lt;P&gt;
e.g. Username-08-20-2012-1522 &lt;P&gt;
Note: do not use characters &#x2F;\:?*&quot;| &lt;P&gt;
IR Job ID: $2</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Search for Hex Pattern</name>
        <display_name>Incident Response - Search for Hex Pattern</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript.exe &#x2F;&#x2F;T:3600 ..\..\Tools\IR\search-for-hex-pattern.vbs &quot;&#x2F;HexString:$1&quot; &quot;&#x2F;FileOrDir:$2&quot; &#x2F;Recursive:$3 &#x2F;ID:$4</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>Hex string can look like FF00FF00 or FF 00 FF 00 &lt;P&gt;
Do not escape or use 0x notation &lt;P&gt;
Hex String to Match: $1 &lt;P&gt;
File - Or - Directory to Match In: $2 &lt;P&gt;
Search Directory Recursively (yes&#x2F;no) $3 &lt;P&gt;
To retrieve job results, enter unique ID &lt;P&gt;
e.g. Username-08-20-2012-1522 &lt;P&gt;
Note: do not use characters &#x2F;\:?*&quot;| &lt;P&gt;
IR Job ID: $4</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Search for Recently Created Files</name>
        <display_name>Incident Response - Search for Recently Created Files</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript.exe &#x2F;&#x2F;T:3600 ..\..\Tools\IR\search-for-recently-created-files.vbs &#x2F;Interval:$1 &#x2F;Pattern:$2 &#x2F;ID:$3</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>Pattern (*.exe or *.doc or *file*, etc ...): $2 &lt;P&gt;
Interval (1 day, 25 seconds, 2 weeks, etc ...) $1 &lt;P&gt;
To retrieve job results, enter unique ID &lt;P&gt;
e.g. Username-08-20-2012-1522 &lt;P&gt;
Note: do not use characters &#x2F;\:?*&quot;| &lt;P&gt;
IR Job ID: $3</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Search for Recently Modified Files</name>
        <display_name>Incident Response - Search for Recently Modified Files</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript.exe &#x2F;&#x2F;T:3600 ..\..\Tools\IR\search-for-recently-modified-files.vbs &#x2F;Interval:$1 &quot;&#x2F;Pattern:$2&quot; &#x2F;ID:$3</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>Pattern (*.exe or *.doc or *file*, etc ...): $2 &lt;P&gt;
Interval (1 day, 25 seconds, 2 weeks, etc ...) $1 &lt;P&gt;
To retrieve job results, enter unique ID &lt;P&gt;
e.g. Username-08-20-2012-1522 &lt;P&gt;
Note: do not use characters &#x2F;\:?*&quot;| &lt;P&gt;
IR Job ID: $3</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Incident Response - Search for String Pattern</name>
        <display_name>Incident Response - Search for String Pattern</display_name>
        <command_line>cmd.exe &#x2F;C start &#x2F;B cscript.exe &#x2F;&#x2F;T:3600 ..\..\Tools\IR\search-for-string-pattern.vbs &quot;&#x2F;String:$1&quot; &quot;&#x2F;FileOrDir:$2&quot; &#x2F;Recursive:$3 &#x2F;ID:$4</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>String to Match: $1 &lt;P&gt;
File - Or - Directory to Match In: $2 &lt;P&gt;
Search Directory Recursively (yes&#x2F;no) $3 &lt;P&gt;
To retrieve job results, enter unique ID &lt;P&gt;
e.g. Username-08-20-2012-1522 &lt;P&gt;
Note: do not use characters &#x2F;\:?*&quot;| &lt;P&gt;
IR Job ID: $4</prompt_text>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>IncidentResponse-non-windows</name>
        <display_name>Incident Response - Search for&#x2F;in Files (Mac&#x2F;Linux)</display_name>
        <command_line>&#x2F;bin&#x2F;bash IR-FileSearch.sh -t &quot;$1&quot; -v &quot;$2&quot; -d &quot;$3&quot; -r &quot;$4&quot; -c &quot;$5&quot; -m &quot;$6&quot; -x &quot;$7&quot; -s &quot;$8&quot; -u &quot;$9&quot; -p &quot;$10&quot; -w &quot;$11&quot;</command_line>
        <command_line_timeout>900</command_line_timeout>
        <download_seconds>0</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text>Type of search (name, md5, sha1, string, hex): $1 &lt;P&gt;
Value to search for (e.g. *.conf, DEADBEEF): $2 &lt;P&gt;
Directory to start search in (e.g. &#x2F;etc): $3 &lt;P&gt;
Recurse into subdirectories? (yes&#x2F;no): $4 &lt;P&gt;
(Creation&#x2F;Modification within the past X days&#x2F;weeks&#x2F;hours&#x2F;minutes (e.g. &quot;4 hours&quot;, &quot;4 days&quot;); use &quot;0&quot; to ignore.)
Creation date within the past: $5 &lt;P&gt;
Modification date within the past: $6 &lt;P&gt;
Results Transfer Method (ftp, sftp, scp): $7 &lt;P&gt;
Destination (hostname or IP): $8 &lt;P&gt;
User and PW (will attempt key auth first on SCP)&lt;P&gt;
User and PW are not secured, read documentation &lt;P&gt;
Username: $9 &lt;P&gt;
Password: $10 &lt;P&gt;
Random Wait Time in Seconds: $11</prompt_text>
        <package_files>
            <package_file>
                <file_name>CopyFilesToCentralLocation.sh</file_name>
                <hash>a49d4063e7efb7c0f2c7f9b55a451df7127b40cf8636a959db729467865e556c</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;incidentresponse-non-windows&#x2F;CopyFilesToCentralLocation.sh</source>
                <download_seconds>0</download_seconds>
                <size>5012</size>
                <type>1</type>
            </package_file>
            <package_file>
                <file_name>IR-FileSearch.sh</file_name>
                <hash>8e38e6f5121262f025b039652a401823a289552995c5f94a4241a39c93368a71</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;incidentresponse-non-windows&#x2F;IR-FileSearch.sh</source>
                <download_seconds>0</download_seconds>
                <size>6358</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Install Osquery OSX</name>
        <display_name>Install Osquery OSX</display_name>
        <command_line>&#x2F;usr&#x2F;sbin&#x2F;installer -pkg osquery-latest.pkg -target &#x2F;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>osquery-latest.pkg</file_name>
                <hash>bc5ef24ccb3c4d547a33b726df02d17ef545be662959fda6e9f97b344b5c1ac1</hash>
                <source>https:&#x2F;&#x2F;osquery-packages.s3.amazonaws.com&#x2F;darwin&#x2F;osquery-latest.pkg</source>
                <download_seconds>2592000</download_seconds>
                <size>7030201</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Install Osquery RHEL 6</name>
        <display_name>Install Osquery RHEL 6</display_name>
        <command_line>&#x2F;usr&#x2F;bin&#x2F;rpm -Uvh osquery.rpm</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>osquery.rpm</file_name>
                <hash>2550d006dce8dfe9f093aab10456a62073547a9f72842604a907e3f49c61ede2</hash>
                <source>https:&#x2F;&#x2F;osquery-packages.s3.amazonaws.com&#x2F;centos6&#x2F;osquery.rpm</source>
                <download_seconds>2592000</download_seconds>
                <size>7168219</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Install Osquery RHEL 7</name>
        <display_name>Install Osquery RHEL 7</display_name>
        <command_line>&#x2F;usr&#x2F;bin&#x2F;rpm -Uvh osquery.rpm</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>osquery.rpm</file_name>
                <hash>3bfb11f42cbb50f86027529fe412a27dffe37714654a8a7e1430333d5b6f106b</hash>
                <source>https:&#x2F;&#x2F;osquery-packages.s3.amazonaws.com&#x2F;centos7&#x2F;osquery.rpm</source>
                <download_seconds>2592000</download_seconds>
                <size>6618111</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Osquery Linux Start</name>
        <display_name>Osquery Linux Start</display_name>
        <command_line>service osqueryd start</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Osquery Linux Stop</name>
        <display_name>Osquery Linux Stop</display_name>
        <command_line>service osqueryd stop</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
    </tanium_package>
    <tanium_package>
        <name>Custom Tagging - Remove Tags (Non-Windows)</name>
        <display_name>Custom Tagging - Remove Tags (Non-Windows)</display_name>
        <command_line>&#x2F;bin&#x2F;bash CustomTagRemove.sh &quot;||Custom Tags||&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>CustomTagRemove.sh</file_name>
                <hash>75c156f146e25811df51a059fece36b303788874c9c72209950ef598b59b4418</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;custom_tagging_-_remove_tags_[non-windows]&#x2F;CustomTagRemove.sh</source>
                <download_seconds>0</download_seconds>
                <size>1349</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Custom Tags</name>
                <what_hash>3004497651</what_hash>
                <category>Tags</category>
                <description>Any specified custom tags that have been set for this machine.  See the Custom Tagging Dashboard.
Example:  Development, Test-Machines</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>,</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Custom Tags
&#x27;========================================

Dim reg
Set reg=GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&quot;)
const HKLM = &amp;H80000002

Dim strRegKey
strRegKey = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Tags&quot;

If Not RegKeyExists(reg, HKLM, strRegKey) Then
	reg.createKey HKLM, strRegKey
End If

reg.enumValues HKLM, strRegKey, arrValues

If Not IsNull(arrValues) Then
	For Each strValueName In arrValues
		WScript.Echo strValueName
	Next
Else
	WScript.Echo &quot;[No Tags]&quot;
End If


Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function


Function GetTaniumRegistryPath
&#x27;GetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &quot;&quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
  	End If
End Function &#x27;GetTaniumRegistryPath</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ ! -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns/>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Kill Application - ||Running Applications_Name||</name>
        <display_name>Kill Application</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:180 ..\..\Tools\taskkill.vbs &quot;||Running Applications_Process Name||&quot;</command_line>
        <command_line_timeout>180</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Running Applications</name>
                <what_hash>1559751995</what_hash>
                <category>Applications</category>
                <description>Provides a list of applications that are running at the present time on the client machine.
Example: Google Chrome | 23.0.1271.64</description>
                <result_type>1</result_type>
                <qseconds>300</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Running Applications
&#x27;========================================

&#x27; This sensor will list the pretty names of running applications.
&#x27; it is a multiple column sensor, and a hidden column will show the
&#x27; process name.

strSep = &quot;|&quot;
&#x27; Sensor output looks like:
&#x27; Running Application | Version | Process Name

SetLocale(1033)

showDuplicates = False 
showVersion = True
recordUsageStats = True

On Error Resume Next
strComputer = &quot;.&quot;
Set objWMIService = GetObject(&quot;winmgmts:\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;)
Set colItems = objWMIService.ExecQuery(&quot;Select Caption, Name, ExecutablePath, CreationDate from Win32_Process&quot;,,48)

Dim nameDictionary, processDictionary
Set nameDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)
Set processDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)

&#x27;ADD PROCESS NAME IN LOWER CASE
&#x27;nameDictionary.Add &quot;hppusg.exe&quot;, &quot;Some HP Application&quot;
&#x27;nameDictionary.Add &quot;taniumclient.exe&quot;, &quot;TANIUM CLIENT&quot;

&#x27;array used to print output (no dictionary since we need duplicates)
Dim arrOutput()
intSize = 0
ReDim Preserve arrOutput(intSize)

strComputer = &quot;.&quot;
Const HKLM = &amp;h80000002
Set reg=GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\&quot; &amp; strComputer &amp; &quot;\root\default:StdRegProv&quot;)

regPath = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Applications&quot;
If Not RegKeyExists(reg, HKLM, regPath) Then
	reg.createKey HKLM, regPath
End If

&#x27; if recording Usage stats, then we need to record when we first started 
&#x27; recording usage stats
If recordUsageStats Then 
	reg.GetStringValue HKLM, regPath, &quot;UsageStatsStart&quot;, strUsageStatsStart
	
	If IsNull(strUsageStatsStart) Or IsEmpty(strUsageStatsStart) Then 
		reg.SetStringValue HKLM, regPath, &quot;UsageStatsStart&quot;, CStr(Now())
	End If
End If 

&#x27;SET UP INSTALLED APPLICATIONS PROCESS DICTIONARY TO FACILITATE ACCESS LATER
Dim installedProcs
Set installedProcs = CreateObject(&quot;scripting.dictionary&quot;)

installedRegPath = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Applications\Installed&quot;
If Not RegKeyExists(reg, HKLM, regPath) Then
	reg.createKey HKLM, installedRegPath
Else	
	reg.EnumKey HKLM, installedRegPath, arrAppKeys
	if not isNull(arrAppKeys) Then
		For Each appKey In arrAppKeys
			fullAppKey = installedRegPath &amp; &quot;\&quot; &amp; appKey
			reg.EnumKey HKLM, fullAppKey, arrProcKeys
			If Not IsNull(arrProcKeys) Then
				For Each procKey In arrProcKeys
					fullProcKey = fullAppKey &amp; &quot;\&quot; &amp; procKey
					reg.GetStringValue HKLM, fullProcKey, &quot;Path&quot;, strPath
					reg.GetStringValue HKLM, fullProcKey, &quot;Process&quot;, strProc
					If Right(strPath, 1) &lt;&gt; &quot;\&quot; Then
						strPath = strPath &amp; &quot;\&quot;
					End If	
					If Not installedProcs.Exists(strPath &amp; strProc) Then
						installedProcs.Add strPath &amp; strProc, fullAppKey
&#x27;						WScript.Echo &quot;added: &quot; &amp; installedProcs.Item(strPath &amp; strProc)
					End If	
				Next
			End If
		Next
	End If
End If

For Each objItem in colItems
	If InStr(LCase(objItem.ExecutablePath), &quot;windows\system32\&quot;) = 0 Then
	    Dim fso
	    Set fso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	    If fso.FileExists(objItem.ExecutablePath) Then
    		Dim strOutput, fileVersion, fileVersionOutput, fullName

	    	Set execFile = fso.GetFile(objItem.ExecutablePath)
	    	
    		fileVersion = fso.GetFileVersion(objItem.ExecutablePath)
    		fileVersionOutput = &quot;N&#x2F;A&quot;
	    	If showVersion Then
	    		If fileVersion &lt;&gt; &quot;&quot; Then
	    			fileVersionOutput = fileVersion
	    		Else
	    			fileVersionOutput = &quot;N&#x2F;A&quot;
	    		End If
			End If 
			
   			fullName = nameDictionary.Item(LCase(objItem.Name))

			If IsEmpty(fullName) Then
				fullName = GetDescription(execFile.ParentFolder.Path, objItem.Name)
			End If
						
			If fullName = &quot;&quot; Then
				fullName = objItem.Name
			End If
			&#x27; sensor output looks like:
			&#x27; Application Name | Version | Process
   			strOutput = fullName &amp; strSep &amp; fileVersionOutput &amp; strSep &amp; objItem.Caption
    		
 			If not ArrayContains(arrOutput, strOutput) Or showDuplicates Then
				arrOutput(intSize) = strOutput
				intSize = intSize + 1
				ReDim Preserve arrOutput(intSize)
			End If
			
			&#x27;Process Last Started, First Started, etc.
			creationDate = objItem.CreationDate
			strDate = WMIDateStringToDate(creationDate)
			StoreData execFile.ParentFolder.Path, objItem.Name, fullName, fileVersion, cstr(strDate), reg, HKLM, regPath, false
			
			&#x27;Look in installed processes for match, if yes then update data
			strKey = execFile.ParentFolder.Path &amp; &quot;\&quot; &amp; objItem.Name
			If installedProcs.Exists(strKey) Then
				installedAppKey = installedProcs.Item(strKey)
				
				StoreData execFile.ParentFolder.Path, objItem.Name, fullName, fileVersion, cstr(strDate), reg, HKLM, installedAppKey, True
				
				&#x27;Also add &quot;Application&quot; value to process key
				reg.GetStringValue HKLM, installedAppKey, &quot;Description&quot;, strApp
				
				reg.SetStringValue HKLM, regPath&amp;&quot;\&quot;&amp;GetKeyName(objItem.Name), &quot;Application&quot;, strApp
			End If
	    End If
	End If
Next

For Each output In arrOutput 
	WScript.Echo output
Next

Function GetKeyName(strProcess)
	words = Split(strProcess, &quot;.&quot;)
	GetKeyName = words(0)
End Function

Function StoreData(strPath, strProc, fullName, version, strDate, objReg, hive, baseRegKey, isInstalled)
	Dim regKey
	
	If isInstalled Then
		regKey = baseRegKey
	Else
		regKey = baseRegKey &amp; &quot;\&quot; &amp; GetKeyName(strProc)
	End If
	
	If Not RegKeyExists(objReg, hive, regKey) Then
		objReg.createKey hive, regKey
	End If
	

	&#x27;only update file-specific data if not installed
	If Not isInstalled Then
		publisher = GetPublisher(strPath, strProc)
		objReg.SetStringValue hive, regKey, &quot;Publisher&quot;, publisher
		objReg.SetStringValue hive, regKey, &quot;Version&quot;, version
		objReg.SetStringValue hive, regKey, &quot;Description&quot;, fullName
		objReg.SetStringValue hive, regKey, &quot;Path&quot;, strPath
		objReg.SetStringValue hive, regKey, &quot;Process&quot;, strProc
	End If
		
	&#x27;always update first&#x2F;last data	
	Dim strFirstStart, strLastStart
	&#x27;Get &quot;First Start&quot;, compare value
	objReg.GetStringValue hive, regKey, &quot;First Start&quot;, strFirstStart
	If IsNull(strFirstStart) Then
		objReg.SetStringValue hive, regKey, &quot;First Start&quot;, strDate
	Else
		&#x27;Check if first start value needs to be replaced
		diff = DateDiff(&quot;d&quot;, strFirstStart, strDate)
		If diff &lt; 0 Then
			objReg.SetStringValue hive, regKey, &quot;First Start&quot;, strDate
		End If
	End If
	
	&#x27;Get &quot;Last Start&quot;, compare value
	objReg.GetStringValue hive, regKey, &quot;Last Start&quot;, strLastStart
	If IsNull(strLastStart) Then
		objReg.SetStringValue hive, regKey, &quot;Last Start&quot;, strDate
	Else
		&#x27;Check if first start value needs to be replaced
		diff = DateDiff(&quot;d&quot;, strLastStart, strDate)
		If diff &gt; 0 Then
			objReg.SetStringValue hive, regKey, &quot;Last Start&quot;, strDate
		End If
	End If
	
	&#x27; record the number of times seen, if enabled
	If recordUsageStats Then
		
		&#x27; Assuming the usual time that this sensor runs is once every 5 minutes,
		&#x27; never record and increment usage stats more often than once every 4
		&#x27; minutes.  This stops us from recording an increment more often, in 
		&#x27; the case that someone uses the sensor in some other question
		objReg.GetStringValue hive, regKey, &quot;LastStatUpdate&quot;, strLastUpdate
		
		bRecordUpdate = False
		If IsNull(strLastUpdate) Or IsEmpty(strLastUpdate) Then 
			bRecordUpdate = True
		Else 
			intSecondsPast = DateDiff(&quot;s&quot;, CDate(strLastUpdate), Now())
			
			&#x27; allow the update if its very close to 5 minutes
			If(intSecondsPast &gt;= 270) Then 
				bRecordUpdate = True
			End If
		End If
		
		If bRecordUpdate Then 
			&#x27; key for usage stats is month-day-year
			strUsageKey = Month(Now) &amp; &quot;-&quot; &amp; Year(Now) &amp; &quot;-Usage&quot;
			objReg.GetDWORDValue hive, regKey, strUsageKey, intNumSeen
			
			If IsNull(intNumSeen) Or IsEmpty(intNumSeen) Then
				intNumSeen = 0
			End If
			
			intNumSeen = intNumSeen + 1
			
			objReg.SetDWORDValue hive, regKey, strUsageKey, intNumSeen
			objReg.SetStringValue hive, regKey, &quot;LastStatUpdate&quot;, CStr(Now())
		End If
	End If 
	
End Function


Function ArrayContains(arr, str)
	For Each obj In arr 
		If obj = str Then
			ArrayContains = True
			Exit Function
		End If
	Next
	ArrayContains = False
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 to 400
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &quot;File description&quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &quot;Description&quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetPublisher(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &quot;Company&quot;)
	GetPublisher = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function WMIDateStringToDate(dtmInstallDate)
   WMIDateStringToDate = CDate(Mid(dtmInstallDate, 5, 2) &amp; &quot;&#x2F;&quot; &amp; _
   Mid(dtmInstallDate, 7, 2) &amp; &quot;&#x2F;&quot; &amp; Left(dtmInstallDate, 4))
End Function

&#x27;date format is MM&#x2F;DD&#x2F;YYYY
function GetDaysOld(strDate)
	patternDate = CDate( strDate )
	today = CDate( Month(Now) &amp; &quot;&#x2F;&quot; &amp; Day(Now) &amp; &quot;&#x2F;&quot; &amp; Year(Now))
	GetDaysOld = DateDiff(&quot;d&quot;, patternDate, today)
End Function

Function GetTaniumRegistryPath
&#x27;GetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
    keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
    keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &quot;&quot; Then
        &#x27; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &quot;&quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
    End If
End Function &#x27;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Version</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>2</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Process Name</name>
                        <hidden_flag>1</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data>
                    <meta_data_item>
                        <name>TANIUMCONTENT_buildtools.sensors.disableMaxAgeWarning</name>
                        <value>true</value>
                        <admin_flag>0</admin_flag>
                    </meta_data_item>
                </meta_data>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Kill Process - ||Non-Approved Established Connections_Process||</name>
        <display_name>Kill Process</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:180 ..\..\Tools\taskkill.vbs &quot;||Non-Approved Established Connections_Process||&quot;</command_line>
        <command_line_timeout>180</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Non-Approved Established Connections</name>
                <what_hash>1509255291</what_hash>
                <category>Network</category>
                <description>Any established connections currently being made from a process that is not allowed or to a destination that is not allowed.  This multi-column Sensor displays the process responsible for the connection, the display name of the process (if available), and the target IP Address and port.  Processes and IP ranges can be excluded in the Sensor definition.
Example: chrome.exe | Google Chrome | 173.194.79.99:80</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Non-Approved Established Connections
&#x27;========================================

&#x27;Option Explicit

Dim showProcess, showPort

showProcess = True
alwaysShowRemotePort = False
alwaysShowLocalPort = False

Dim strcommand, results, excludeProcesses, excludeSubnets, excludeListenPorts, excludeRemotePorts, taniumDebug, excludeProcessesFilePath, excludeSubnetsFilePath
Dim strSep : strSep = &quot;|&quot;
excludeProcessesFilePath = GetTaniumDir(&quot;Tools\IR&quot;) &amp; &quot;excluded-processes.dat&quot;
excludeSubnetsFilePath = GetTaniumDir(&quot;Tools\IR&quot;) &amp; &quot;excluded-subnets.dat&quot;

&#x27; This is a multi-column sensor that looks like:
&#x27;Process|Name|Target IP

Dim objFSO : Set objFSO = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
If objFSO.FileExists(excludeProcessesFilePath) Then
	&#x27;exclude processes file exists - read from file
	excludeProcesses = LoadDATFileAsArray(excludeProcessesFilePath)
Else
	&#x27;exclude processes file doesn&#x27;t exist - specify processes below
	excludeProcesses = &quot;TaniumClient.exe,TaniumReceiver.exe,TaniumZoneServer.exe&quot;
	&#x27;excludeProcesses = &quot;chrome.exe&quot;
	&#x27;excludeProcesses = &quot;iexplore.exe&quot;
	&#x27;excludeProcesses = &quot;chrome.exe, iexplore.exe&quot;
	&#x27;excludeProcesses = &quot;trillian.exe&quot;
	excludeProcesses = Split(LCase(excludeProcesses), &quot;,&quot;)
End If 

If objFSO.FileExists(excludeSubnetsFilePath) Then
	&#x27;exclude subnets file exists - read from file
	excludeSubnets = LoadDATFileAsArray(excludeSubnetsFilePath)
	&#x27;WScript.Echo &quot;Using excludesubnets file&quot;
Else
	&#x27;exclude subnets file doesn&#x27;t exist - specify subnets below
	excludeSubnets = &quot;127.0.0.0:255.255.255.0&quot;
	&#x27;excludeSubnets = &quot;72.14.213.0:255.255.255.0,74.125.223.0:255.255.255.0-74.125.225.0:255.255.255.0,204.79.197.0&#x2F;24&quot;
	excludeSubnets = Split(excludeSubnets, &quot;,&quot;)
End If 

&#x27;iterate through excludedSubnets, converting any CIDR expressions to ip:mask
For item = 0 To UBound(excludeSubnets)
	If InStr(excludeSubnets(item),&quot;&#x2F;&quot;) Then
		a = Split(excludeSubnets(item), &quot;&#x2F;&quot;)
		excludeSubnets(item) = a(0) &amp; &quot;:&quot; &amp;  MaskLengthToIP(a(1))
	End If 
Next 

excludeListenPorts = &quot;17472&quot;
&#x27; excludeListenPorts = &quot;17472,80,443&quot;

excludeRemotePorts = &quot;17472&quot;
&#x27; excludeRemotePorts = &quot;17472,80,443&quot;

taniumDebug = False

excludeListenPorts = Split(excludeListenPorts, &quot;,&quot;)
excludeRemotePorts = Split(excludeRemotePorts, &quot;,&quot;)

Set listeningPorts = CreateObject(&quot;Scripting.Dictionary&quot;)

strComputer = &quot;.&quot;
Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;)  
query = &quot;select name, executablepath, processId from win32_process&quot;
Set colResults = objWMIService.ExecQuery(query)

&#x27;dictionary for process-app pairs
Set processes = CreateObject(&quot;Scripting.Dictionary&quot;)

For Each result In colResults 
	processId = CStr(result.ProcessId)
	processPath = result.ExecutablePath
	processes.Add processId, result.Name &amp; &quot;,&quot; &amp; processPath &#x27; tie IDs to exes,path - split later
Next

&#x27; unlike established connections, shows connections in all states
strcommand = &quot;cmd &#x2F;c netstat -aon -p TCP | find &quot; &amp; Chr(34) &amp; &quot;TCP&quot; &amp; Chr(34)

Set objShell = CreateObject(&quot;WScript.Shell&quot;)
Set objScriptExec = objShell.Exec (strCommand)
strNSResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strNSResults, vbCrLf)
j = 0

For Each line In results
	line = cleanWhitespace(Trim(line))
	
	lineResults = Split(line)
	i = 0
	Dim strPort, strPid, strConnectionState, strForeignIP, strApp
	For Each word In lineResults
		If i = 0 Then
			strProtocol = word   
		ElseIf i = 1 Then
			strLocalIP = word
		ElseIf i = 2 Then
			strForeignIP = word
		ElseIf i = 3 Then
			strConnectionState = word
		ElseIf i = 4 Then
			strPid = word
		End If
		
		i = i + 1
	Next
	&#x27;Recording all listen ports.  Note that this happens to take advanage of the fact that listen ports
	&#x27;are always listed first in the output
	strLocalPort = -1
	strForeignPort = -1
	
	arrTemp = Split(strLocalIP, &quot;:&quot;)
	If UBound(arrTemp) = 1 Then
		strLocalPort = arrTemp(1)
	End If
	arrTemp = Split(strForeignIP, &quot;:&quot;)
	If UBound(arrTemp) = 1 Then
		strForeignPort = arrTemp(1)
	End If
	
	If strConnectionState = &quot;listening&quot; Then 
		If Not listeningPorts.Exists(strLocalPort) Then
			listeningPorts.Add strLocalPort, True
		End If
	End If
	
	&#x27;DO NOT INCLUDE EXCLUDED APPS
   If processes.Exists(strPid) Then
       strAppEntry = processes.Item(strPid) &#x27; looks like process.exe, Process Path
       arrAppEntry = Split(strAppEntry,&quot;,&quot;)
       strAppExe = arrAppEntry(0)
       strAppPath = arrAppEntry(1)
   Else
       strAppExe = &quot;Unknown&quot;
       strAppPath = &quot;Unknown&quot;
   End If
	
	isNotExcludedApp = Not(ContainedInArray(LCase(strAppExe), excludeProcesses))
	
	&#x27;DO NOT INCLUDE EXCLUDED SUBNETS
	isNotExcludedSubnet = Not(ContainedInSubnet(strForeignIP, excludeSubnets))
	
	&#x27;DO NOT INCLUDE EXCLUDED LISTEN PORTS
	isNotExcludedListenPort = Not(ContainedInArray(strLocalPort, excludeListenPorts))
	
	&#x27;DO NOT INCLUDE EXCLUDED REMOTE PORTS
	isNotExcludedRemotePort = Not(ContainedInArray(strForeignPort, excludeRemotePorts))
	
	If Not(IsEmpty(strAppExe)) _
		And isNotExcludedApp _ 
		And isNotExcludedSubnet _
		And isNotExcludedListenPort _
		And IsNotExcludedRemotePort _
		And strConnectionState = &quot;established&quot; Then
		
		If Not alwaysShowRemotePort Then
			&#x27; We should remove the remote port, only if this is an incoming connection to a service
			&#x27; on this machine
			If listeningPorts.Exists(strLocalPort) Then 
				arrTemp = Split(strForeignIP, &quot;:&quot;)
				strForeignIP = arrTemp(0)
			End If
		End If
		
		If Not alwaysShowLocalPort Then
			&#x27; We should remove the local port, only if this is not an incoming connection to a service
			&#x27; on this machine
			If Not listeningPorts.Exists(strLocalPort) Then 
				arrTemp = Split(strLocalIP, &quot;:&quot;)
				strLocalIP = arrTemp(0)
			End If
		End If
		
		If showProcess Then
			results(j) = strAppExe &amp; strSep &amp; ProcessNameToApplicationName(strAppPath,strAppExe) &amp; strSep &amp; strForeignIp
		Else
			results(j) = strSep &amp; strSep &amp; strForeignIp
		End If	
	Else
		If taniumDebug Then WScript.Echo &quot;      excluded: &quot; &amp; strApp &amp; &quot; &quot; &amp; strForeignIP
		results(j) = &quot;&quot;   
	End If 
	
	j = j + 1
Next

results = RemDups(results)

If UBound(results) &lt; 1 Then
	If GetLocale() &lt;&gt; 1033 Then
		WScript.Echo &quot;English Language OS Required&quot;
	End If
End If

For Each result In results 
	WScript.Echo result
Next

WScript.Quit

Function LoadDATFileAsArray(strFilePath)
	Dim objFSO : Set objFSO = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	Dim responseDict : Set responseDict = CreateObject(&quot;Scripting.Dictionary&quot;)
		
	If objFSO.FileExists(strFilePath) Then
        Dim objDatFile, strLine
        Set objDatFile = objFso.OpenTextFile(strFilePath, 1)
        
        &#x27;read in all entries, one per line
        Do While objDatFile.AtEndOfStream &lt;&gt; True
            strLine = LCase(Trim(objDatFile.ReadLine))
			If strLine &lt;&gt; &quot;&quot; And Left(strLine, 1) &lt;&gt; &quot;&#x27;&quot; And Not responseDict.Exists(strLine) Then 
				responseDict.Add strLine, True
			End If
        Loop
    End If
	LoadDATFileAsArray = responseDict.Keys
End Function

Function GetTaniumDir(strSubDir)
&#x27;GetTaniumDir with GeneratePath, works in x64 or x32
&#x27;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;HKLM\Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &quot;&quot; Then
		If strSubDir &lt;&gt; &quot;&quot; Then
			strSubDir = &quot;\&quot; &amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp; strSubDir) Then
				&#x27;&#x27;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp; strSubDir &amp; &quot;\&quot;
		Else
			&#x27; Specified Path doesn&#x27;t exist on the filesystem
			WScript.Echo &quot;Error: &quot; &amp; strPath &amp; &quot; does not exist on the filesystem&quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &quot;Error: Cannot find Tanium Client path in Registry&quot;
		GetTaniumDir = False
	End If
End Function &#x27;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False

	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &#x27;GeneratePath

Function ContainedInSubnet(str, arr)
   Dim strIp, strSubnet, strMask
   temp = Split(str, &quot;:&quot;)
   strIp = temp(0)

   For Each item In arr
      If InStr(item, &quot;-&quot;) Then &#x27;Subnet range
         temp = Split(item, &quot;-&quot;)
         lower = Split(temp(0), &quot;:&quot;)
         upper = Split(temp(1), &quot;:&quot;)
         lowerSubnet = Trim(lower(0))
         lowerMask = Trim(lower(1))
         upperSubnet = Trim(upper(0))
         upperMask = Trim(upper(1))
         
         If StringToBinary(strIp) &gt; StringToBinary(Subnet(lowerSubnet, lowerMask)) _
            And StringToBinary(strIp) &lt; StringToBinary(Subnet(upperSubnet, upperMask)) Then
            ContainedInSubnet = True
            Exit Function
         End If 
      Else &#x27;Single subnet
         parts = Split(item, &quot;:&quot;)
         strSubnet = Trim(parts(0))
         strMask = Trim(parts(1))
         If Subnet(strIp, strMask) = Subnet(strSubnet, strMask) Then
            ContainedInSubnet = True
            Exit Function
         End If
      End If 
   Next
   ContainedInSubnet = False
End Function

Function ContainedInArray(str, arr)
   For Each item In arr 
      If str = Trim(item) Then
         ContainedInArray = True
         Exit Function
      End If   
   Next
   ContainedInArray = False
End Function

Function cleanWhitespace(strStarter)
	intStarter = Len(strStarter)
	For i = intStarter To 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &quot; &quot;)
	Next
	cleanWhitespace = strStarter
End Function

Function RemDups(ByVal anArray)
	Dim d, item, thekeys
	Set d = CreateObject(&quot;Scripting.Dictionary&quot;)
	d.removeall
	d.CompareMode = 0
	For Each item In anArray
		If Len(item) &gt; 0 Then
			If Not d.Exists(item) Then d.Add item, item
		End If
	Next
	thekeys = d.keys
	Set d = Nothing
	RemDups = thekeys
End Function

Function Subnet(strAddress, strMask)
	intSubnetLength = SubnetLength(strMask)
	Subnet = BinaryToString(Left(StringToBinary(strAddress), intSubnetLength) &amp; String(32 - intSubnetLength, &quot;0&quot;))
End Function

Function SubnetLength(strMask)
	strMaskBinary = StringToBinary(strMask)
	SubnetLength = Len(Left(strMaskBinary, InStr(strMaskBinary, &quot;0&quot;) - 1))
End Function

Function BinaryToString(strBinary)
	For intOctetPos = 1 To 4
		strOctetBinary = Right(Left(strBinary, intOctetPos * 8), 8)
		intOctet = 0
		intValue = 1
		For intBinaryPos = 1 To Len(strOctetBinary)
			If Left(Right(strOctetBinary, intBinaryPos), 1) = &quot;1&quot; Then intOctet = intOctet + intValue
			intValue = intValue * 2
		Next
		If BinaryToString = Empty Then BinaryToString = CStr(intOctet) Else BinaryToString = BinaryToString &amp; &quot;.&quot; &amp; CStr(intOctet)
	Next
End Function

Function StringToBinary(strAddress)
	objAddress = Split(strAddress, &quot;.&quot;, -1)
	For Each strOctet In objAddress
		intOctet = CInt(strOctet)
		strOctetBinary = &quot;&quot;
		For x = 1 To 8
			If intOctet Mod 2 &gt; 0 Then
				strOctetBinary = &quot;1&quot; &amp; strOctetBinary
			Else
				strOctetBinary = &quot;0&quot; &amp; strOctetBinary
			End If
			intOctet = Int(intOctet &#x2F; 2)
		Next
		StringToBinary = StringToBinary &amp; strOctetBinary
	Next
End Function

Function ProcessNameToApplicationName(strExecutablePath, strExecutableName)
	&#x27; This function will return the full application name of a running executable
	
	Dim fso
	Set fso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	
	arrPathParts = Split(strExecutablePath,&quot;\&quot;)
	
	If UBound(arrPathParts) &lt; 0 Then &#x27;can be -1 for no split, such as the System process
		ProcessNameToApplicationName = strExecutableName
		Set fso = Nothing
		Exit Function
	End If
	strExecutable = arrPathParts(UBound(arrPathParts))
	
	If fso.FileExists(strExecutablePath) Then
		Dim strOutput, fileVersion, fileVersionOutput, fullName
		
		Set execFile = fso.GetFile(strExecutablePath)
		fullName = GetDescription(execFile.ParentFolder.Path, strExecutable)
		If Not fullName = &quot;&quot; Then
			ProcessNameToApplicationName = fullName
		Else
			ProcessNameToApplicationName = strExecutableName
		End If
	Else &#x27; file doesn&#x27;t exist or inaccessible
		ProcessNameToApplicationName = strExecutableName
	End If
	
End Function &#x27;ProcessNameToApplicationName

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &quot;File description&quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &quot;Description&quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 To 50
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function

Function MaskLengthToIP(intMask)
  &#x27; Converts a mask length to the decimal format mask
 
  Dim arrOctets(3)
  Dim intFullOctets : intFullOctets = (intMask - (intMask Mod 8)) &#x2F; 8
  Dim i
  For i = 0 To (intFullOctets - 1)
    arrOctets(i) = &quot;255&quot;
  Next
 
  Dim intPartialOctetLen : intPartialOctetLen = intMask Mod 8
  Dim j
  If intPartialOctetLen &gt; 0 Then
    Dim intOctet
    For j = 0 To (intPartialOctetLen - 1)
      intOctet = intOctet + 2^(7 - j)
    Next
    arrOctets(i) = intOctet : i = i + 1
  End If
 
  For j = i To 3
    arrOctets(j) = &quot;0&quot;
  Next
 
  MaskLengthToIP = Join(arrOctets, &quot;.&quot;)
End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;bash
#
#
# This sensor will attempt to read in two files: 
#       &#x2F;Tools&#x2F;IR&#x2F;excluded-processes.dat
#       &#x2F;Tools&#x2F;IR&#x2F;excluded-subnets.dat
#
# The files contain a line seperated list of approved processes or subnets (10.10.10.0&#x2F;24)
#
# The sensor will then enumerate established network connections that do not match the exclude list
#
# The final return vale is a pipe delimited string of Process Name| Hash | Path | Remote IP and Port 
#

if ! which lsof &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 ; then
    echo lsof must be installed to use this sensor
    exit 
fi

if [ ! -d &quot;.&#x2F;tmp&quot; ]; then
  mkdir .&#x2F;tmp
  chmod 0700 .&#x2F;tmp
fi

#tmpfile=.&#x2F;tmp&#x2F;calcnet.$$.awk
tmpfile=.&#x2F;tmp&#x2F;$$.awk

cat &gt; &quot;$tmpfile&quot; &lt;&lt;EOF
#!&#x2F;usr&#x2F;bin&#x2F;awk  -f

BEGIN {
    tmpr[&quot;128.0.0.0&quot;]=1
    tmpr[&quot;192.0.0.0&quot;]=2
    tmpr[&quot;224.0.0.0&quot;]=3
    tmpr[&quot;240.0.0.0&quot;]=4
    tmpr[&quot;248.0.0.0&quot;]=5
    tmpr[&quot;252.0.0.0&quot;]=6
    tmpr[&quot;254.0.0.0&quot;]=7
    tmpr[&quot;255.0.0.0&quot;]=8
    tmpr[&quot;255.128.0.0&quot;]=9
    tmpr[&quot;255.192.0.0&quot;]=10
    tmpr[&quot;255.224.0.0&quot;]=11
    tmpr[&quot;255.240.0.0&quot;]=12
    tmpr[&quot;255.248.0.0&quot;]=13
    tmpr[&quot;255.252.0.0&quot;]=14
    tmpr[&quot;255.254.0.0&quot;]=15
    tmpr[&quot;255.255.0.0&quot;]=16
    tmpr[&quot;255.255.128.0&quot;]=17
    tmpr[&quot;255.255.192.0&quot;]=18
    tmpr[&quot;255.255.224.0&quot;]=19
    tmpr[&quot;255.255.240.0&quot;]=20
    tmpr[&quot;255.255.248.0&quot;]=21
    tmpr[&quot;255.255.252.0&quot;]=22
    tmpr[&quot;255.255.254.0&quot;]=23
    tmpr[&quot;255.255.255.0&quot;]=24
    tmpr[&quot;255.255.255.128&quot;]=25
    tmpr[&quot;255.255.255.192&quot;]=26
    tmpr[&quot;255.255.255.224&quot;]=27
    tmpr[&quot;255.255.255.240&quot;]=28
    tmpr[&quot;255.255.255.248&quot;]=29
    tmpr[&quot;255.255.255.252&quot;]=30
    tmpr[&quot;255.255.255.254&quot;]=31
    tmpr[&quot;255.255.255.255&quot;]=32

    tmp[1]=&quot;128.0.0.0&quot;
    tmp[2]=&quot;192.0.0.0&quot;
    tmp[3]=&quot;224.0.0.0&quot;
    tmp[4]=&quot;240.0.0.0&quot;
    tmp[5]=&quot;248.0.0.0&quot;
    tmp[6]=&quot;252.0.0.0&quot;
    tmp[7]=&quot;254.0.0.0&quot;
    tmp[8]=&quot;255.0.0.0&quot;
    tmp[9]=&quot;255.128.0.0&quot; 
    tmp[10]=&quot;255.192.0.0&quot;
    tmp[11]=&quot;255.224.0.0&quot;
    tmp[12]=&quot;255.240.0.0&quot;
    tmp[13]=&quot;255.248.0.0&quot;
    tmp[14]=&quot;255.252.0.0&quot;
    tmp[15]=&quot;255.254.0.0&quot;
    tmp[16]=&quot;255.255.0.0&quot;
    tmp[17]=&quot;255.255.128.0&quot;
    tmp[18]=&quot;255.255.192.0&quot;
    tmp[19]=&quot;255.255.224.0&quot;
    tmp[20]=&quot;255.255.240.0&quot;
    tmp[21]=&quot;255.255.248.0&quot;
    tmp[22]=&quot;255.255.252.0&quot;
    tmp[23]=&quot;255.255.254.0&quot;
    tmp[24]=&quot;255.255.255.0&quot;
    tmp[25]=&quot;255.255.255.128&quot;
    tmp[26]=&quot;255.255.255.192&quot;
    tmp[27]=&quot;255.255.255.224&quot;
    tmp[28]=&quot;255.255.255.240&quot;
    tmp[29]=&quot;255.255.255.248&quot;
    tmp[30]=&quot;255.255.255.252&quot;
    tmp[31]=&quot;255.255.255.254&quot;
    tmp[32]=&quot;255.255.255.255&quot;
    split(ip,n,&#x2F;\.&#x2F;)
    split(net,netandmask,&#x2F;\&#x2F;&#x2F;)
    network=netandmask[1]
    if (mask == &quot;&quot;) {
        mask=netandmask[2]
        mask=tmp[mask]
    }
    split(mask,m,&#x2F;\.&#x2F;)
    for (i=1; i&lt;=3; i++) calcnet=sprintf(&quot;%s%d.&quot;, calcnet,awkand(n[i],m[i]))
    calcnet=sprintf(&quot;%s%d&quot;, calcnet,awkand(n[4],m[4]))
    if (net == &quot;&quot;) {
        print calcnet&quot;&#x2F;&quot;tmpr[mask]
    } else {
        if (calcnet == network) {
            printf &quot;same net&quot;
        } else {
            printf &quot;different net&quot;
        }
    }
}

function awkand(a,b,  k,r) {
    k = 1
    r = 0
    a = int(a + 0.5) # round to nearest integer
    b = int(b + 0.5)
    while ( a + b ) {
        if ( a%2 &amp;&amp; b%2 ) r += k
        a = int(a &#x2F; 2)
        b = int(b &#x2F; 2)
        k *= 2
    }
    return r
}
EOF
chmod 0500 &quot;$tmpfile&quot;

################################
# End of AWK Scripts           #
################################
TOS=$(uname)

if [ &quot;$HASHTYPE&quot; = &quot;md5&quot; ]; then
    if [ &quot;$TOS&quot; = &quot;Darwin&quot; ]; then
        tanium_dir=&quot;&#x2F;Library&#x2F;Tanium&#x2F;TaniumClient&quot;
    else
        tanium_dir=&quot;&#x2F;opt&#x2F;Tanium&#x2F;TaniumClient&quot;
    fi
fi
 
tanium_processes=`ps -ef | grep &quot;[T]aniumClient&quot; | awk &#x27;{print $2}&#x27; | tr &#x27;\n&#x27; &#x27; &#x27;`
excl_proc_path=&quot;$tanium_dir&quot;&quot;&#x2F;Tools&#x2F;IR&#x2F;excluded-processes.dat&quot;
excl_sub_path=&quot;$tanium_dir&quot;&quot;&#x2F;Tools&#x2F;IR&#x2F;excluded-subnets.dat&quot;

tanium_port=$(cat &quot;$tanium_dir&quot;&quot;&#x2F;TaniumClient.ini&quot; | grep -i serverport | awk -F &quot;=&quot; &#x27;{print $2}&#x27;)
if [ -z &quot;$tanium_port&quot; ]; then
    tanium_port=&quot;17472&quot;
fi

# Get list of estblished processes
Connections=`lsof -iTCP -p ^$PPID  -P +c 15 -n -w`
echo &quot;$Connections&quot; | grep -v &quot;COMMAND&quot; | grep -i \(established\) | while read line
do

    # Parse line
    # OSX has fixed width name field, but there can be spaces in it e.g. &#x27;Google Chrom&#x27;
    proc_name=`echo &quot;$line&quot; | awk &#x27;{print $1}&#x27;`
    # The rest of the stuff is easier to parse if we count fields from the end of the line, after the 
    # first field I don&#x27;t think any of the others have spaces.
    PID=`echo &quot;$line&quot; | awk &#x27;pidfield = NF-8 {print $pidfield}&#x27;`
    conn=`echo &quot;$line&quot; | awk &#x27;confield = NF-1 {print $confield}&#x27;`

    from=`echo &quot;$conn&quot; | awk -F&#x27;-&gt;&#x27; &#x27;{print $1}&#x27;`
    fromip=`echo &quot;$from&quot; | awk &#x27;BEGIN{FS=OFS=&quot;:&quot;}{$NF=&quot;&quot;; NF--; print}&#x27;`
    fromport=`echo &quot;$from&quot; | awk -F: &#x27;{print $NF}&#x27;`
    to=`echo &quot;$conn&quot; | awk -F&#x27;-&gt;&#x27; &#x27;{print $2}&#x27;`
    toip=`echo &quot;$to&quot; | awk &#x27;BEGIN{FS=OFS=&quot;:&quot;}{$NF=&quot;&quot;; NF--; print}&#x27;`
    toport=`echo &quot;$to&quot; | awk -F: &#x27;{print $NF}&#x27;`
   if [ &quot;$fromport&quot; = &quot;$tanium_port&quot; ]; then
       continue
  elif [ &quot;$toport&quot; = &quot;$tanium_port&quot; ]; then
       continue
    else
        found=0
        if [ -e &quot;$excl_sub_path&quot; ]; then
            IFS=$&#x27;\n&#x27;
            for subnet in `cat &quot;$excl_sub_path&quot;`; do
                #Check which format line is 1.1.1.0&#x2F;24 or 1.1.1.0:255.255.255.0
                if [ `echo &quot;$subnet&quot; | grep : ` ]; then
                    ip_addr=`echo &quot;$subnet&quot; | cut -f1 -d&#x27;:&#x27;`
                    mask=`echo &quot;$subnet&quot; | cut -f2 -d&#x27;:&#x27;`
                    #Convert netmask to CIDR for matching 
                    to_cidr=`.&#x2F;$tmpfile -v ip=&quot;$ip_addr&quot; -v mask=&quot;$mask&quot;` 
                    sub_test=`.&#x2F;$tmpfile -v ip=&quot;$toip&quot; -v net=&quot;$to_cidr&quot;`
                else
                    sub_test=`.&#x2F;$tmpfile -v ip=&quot;$toip&quot; -v net=&quot;$subnet&quot;`
                fi

                if [ &quot;$sub_test&quot; = &quot;same net&quot; ]; then
                    found=1
                fi
            done
        fi
        if  [ &quot;$found&quot; -eq 0 ]; then
              # Get the executable file behind the PID
            if [ &quot;$TOS&quot; = &quot;Darwin&quot; ]; then
                # OSX sorta usually stores its ps executables in comm=
                TFILE=&quot;`ps -o comm= -p $PID`&quot;
                if ! [[ &quot;$TFILE&quot; == *&quot;&#x2F;&quot;* ]]; then
                  TFILE=&quot;`lsof -p $PID -w | awk -F&#x27; &#x27; &#x27;{print $9}&#x27; | grep -i &quot;$proc_name&quot; | head -1`&quot;
                    if ! [ -e &quot;$TFILE&quot; ]; then
                        TFILE=&quot;Not Found&quot;
                  fi
                fi
            else
                # Linux stores its ps command lines in &#x2F;proc symlinks
                if [ -e &quot;&#x2F;proc&#x2F;$PID&#x2F;exe&quot; ]; then
                  TFILE=&quot;$(ls -l &#x2F;proc&#x2F;$PID&#x2F;exe | awk -F &#x27; -&gt; &#x27; &#x27;{print $2}&#x27;)&quot;
                else
                    continue
                fi
            fi
            fname=$(echo &quot;$TFILE&quot; | awk -F&#x27;&#x2F;&#x27; &#x27;{print tolower($NF)}&#x27;)

            if [ -e &quot;$excl_proc_path&quot; ]; then
                IFS=$&#x27;\n&#x27;
                for proc_path in `cat &quot;$excl_proc_path&quot;`; do
                    lcas_proc_path=`echo &quot;$proc_path&quot; | tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;`
                    if [ &quot;$lcas_proc_path&quot; = &quot;$fname&quot; ]; then
                        found=1
                    fi
                done
            fi
            if [ &quot;$found&quot; -eq 0 ]; then
                #Output Example: #&quot;TaniumClient&quot; &quot;ffd7f386b2585149950928bf19812df8&quot;  &quot;&#x2F;opt&#x2F;Tanium&#x2F;TaniumClient&#x2F;TaniumClient&quot; &quot;172.18.1.108:17472&quot; 
                printf &quot;%s|%s|%s:%s&quot;\\n &quot;$TFILE&quot; &quot;$fname&quot; &quot;$toip&quot; &quot;$toport&quot;
            fi
        fi
    fi
done
rm -f &quot;$tmpfile&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Process</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Target IP</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Kill Process - ||Running Processes||</name>
        <display_name>Kill Process</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:180 ..\..\Tools\taskkill.vbs &quot;||Running Processes||&quot;</command_line>
        <command_line_timeout>180</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Running Processes</name>
                <what_hash>4142232197</what_hash>
                <category>Applications</category>
                <description>Provides a list of processes currently running on the client machine.
Example: svchost.exe</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>,</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>1</sensor_type>
                        <os>0</os>
                        <query>select Caption from win32_process</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;bash

# get all processes (excluding this one and its children)
for PID in $( ps -eo user,pid,ppid,comm | grep -v &quot; $$ &quot; | tail -n +2 |awk &#x27;{print $2}&#x27; ); do
  if [ -e &#x2F;proc&#x2F;$PID&#x2F;exe ]; then
    TFILE=&quot;`ls -l &#x2F;proc&#x2F;$PID&#x2F;exe | awk -F &#x27; -&gt; &#x27; &#x27;{ print $2 }&#x27;`&quot;
    [ -s &quot;$TFILE&quot; ]  &amp;&amp; echo &quot;$TFILE&quot; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g;&#x27;
  fi
done
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;bash

# get all processes (excluding this one and its children)
ps -eo user,pid,ppid,comm | grep -v &quot; $$ &quot; | tail -n +2 |awk &#x27;{print $4}&#x27; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g&#x27;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;usr&#x2F;xpg4&#x2F;bin&#x2F;sh

# Only list process in my zone
ZARG=&quot;&quot;
if [ -x &#x2F;usr&#x2F;bin&#x2F;zonename ]; then
  myzone=$(zonename)
  [ -n &quot;$myzone&quot; ] &amp;&amp; ZARG=&quot;-z $myzone&quot;
fi

# get all processes (excluding this one and its children)
ps -eo user,pid,ppid,comm $ZARG | grep -v &quot; $$ &quot; | tail +2 |awk &#x27;{print $4}&#x27; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g&#x27;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# get all processes (excluding this one and its children)
ps -eo user,pid,ppid,comm | grep -v &quot; $$ &quot;  | tail +2 | awk &#x27;{print $4}&#x27; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g&#x27;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns/>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Custom Tagging - Remove Tags</name>
        <display_name>Custom Tagging - Remove Tags</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 remove-tags.vbs &quot;||Custom Tags||&quot;</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>remove-tags.vbs</file_name>
                <hash>0f24a753484d6bed4a087a12042ae31e1d965be4d08357382a432977ce42b197</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;custom_tagging_-_remove_tags&#x2F;remove-tags.vbs</source>
                <download_seconds>0</download_seconds>
                <size>2170</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Custom Tags</name>
                <what_hash>3004497651</what_hash>
                <category>Tags</category>
                <description>Any specified custom tags that have been set for this machine.  See the Custom Tagging Dashboard.
Example:  Development, Test-Machines</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>,</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Custom Tags
&#x27;========================================

Dim reg
Set reg=GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&quot;)
const HKLM = &amp;H80000002

Dim strRegKey
strRegKey = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Tags&quot;

If Not RegKeyExists(reg, HKLM, strRegKey) Then
	reg.createKey HKLM, strRegKey
End If

reg.enumValues HKLM, strRegKey, arrValues

If Not IsNull(arrValues) Then
	For Each strValueName In arrValues
		WScript.Echo strValueName
	Next
Else
	WScript.Echo &quot;[No Tags]&quot;
End If


Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function


Function GetTaniumRegistryPath
&#x27;GetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &quot;&quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
  	End If
End Function &#x27;GetTaniumRegistryPath</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ ! -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns/>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Reset User Session</name>
        <display_name>Reset User Session</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:60 reset-user-session.vbs ||User Sessions_ID||</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>reset-user-session.vbs</file_name>
                <hash>750231469d81ec9f7e6043d25bcc56bc2bab6a684f4222dab72d7eaa78dbeda7</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;reset_user_session&#x2F;reset-user-session.vbs</source>
                <download_seconds>0</download_seconds>
                <size>8598</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>User Sessions</name>
                <what_hash>75018363</what_hash>
                <category>User</category>
                <description>Provides the terminal services session information, similar to what is available from the &quot;query session&quot; command.
Example:console|Administrator|1|Active||</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; User Sessions
&#x27;========================================

&#x27; Returns information about the current sessions on the local machine
&#x27; 

Option Explicit

On error resume next
Dim strValue, myRegExp, objShell, objExec, strLine, objSplit

Set myRegExp = New RegExp
myRegExp.IgnoreCase = True
myRegExp.Global = True
myRegExp.Pattern = &quot;\s{2,}&quot;

Set objShell = WScript.CreateObject(&quot;WScript.Shell&quot;)
If Is64() Then 
	Set objExec = objshell.exec(&quot;cmd &#x2F;c c:\windows\sysnative\qwinsta&quot;)
Else 
	Set objExec = objshell.exec(&quot;cmd &#x2F;c qwinsta&quot;)
End If 

objExec.StdOut.ReadLine()
Do While Not objExec.Stdout.AtEndOfStream
	strLine = myRegExp.Replace(objExec.StdOut.ReadLine(),&quot;|&quot;)

	If InStr(strLine,&quot;rdp&quot;) or InStr(strLine,&quot;console&quot;) then
		If InStr(strLine,&quot;disc&quot;) then
			strLine = &quot;|&quot; &amp; strLine
		End If 
		If InStr(strLine, &quot;console&quot;)&gt;0 And InStr(strLine, &quot;Conn&quot;)&gt;0 Then
		    &#x27; If console line, but no user logged in, add column
			strLine = Replace(strLine, &quot;console|&quot;, &quot;console||&quot;)
		End If
		strLine = replace(strLine,&quot;&gt;&quot;,&quot;&quot;)
		strLine = replace(strLine,&quot; &quot;,&quot;&quot;)
		strLine = replace(strLine,&quot;rdp-tcp|&quot;,&quot;rdp-tcp||&quot;)
		
		objSplit = Split(strLine, &quot;|&quot;)
		If ojbSplit.Count = 4 Then
			strLine = strLine + &quot;|&quot;
		End If 	
			
		WScript.echo strLine
	End if	
Loop 


Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&quot;winmgmts:\\.\root\CIMV2&quot;)
	Set colItems = objWMIService.ExecQuery(&quot;Select SystemType from Win32_ComputerSystem&quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &quot;x64&quot;) &gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If
	Next
End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh
who | while read line
do
        name=$(echo &quot;$line&quot; | awk &#x27;{print $2}&#x27;)
        device=$(echo &quot;$line&quot; | awk &#x27;{print $1}&#x27;)
        uid=$(dscl . -list &#x2F;Users uid | egrep &quot;^$name\s+&quot; | awk &#x27;{print $2}&#x27;)
        echo &quot;$device|$name|$uid|Conn|N&#x2F;A|$device&quot;
done
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Session Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>User Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>ID</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>3</column_index>
                        <name>State</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>4</column_index>
                        <name>Type</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>5</column_index>
                        <name>Device</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Service Start Mode - Set to Disabled</name>
        <display_name>Service Start Mode - Set to Disabled</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:600 set-service-mode.vbs &quot;||Service Details_Service Name||&quot; Disabled</command_line>
        <command_line_timeout>600</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>set-service-mode.vbs</file_name>
                <hash>92ed46e83355d3a040b753724de5dcb17392dcd54aefefc90cdbec3429637845</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;service_start_mode_-_set_to_disabled&#x2F;set-service-mode.vbs</source>
                <download_seconds>0</download_seconds>
                <size>853</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Service Details</name>
                <what_hash>2384520458</what_hash>
                <category>Applications</category>
                <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Service Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Service Display Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Service Status</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>3</column_index>
                        <name>Service Startup Mode</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Service Start Mode - Set to Automatic</name>
        <display_name>Service Start Mode - Set to Automatic</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:600 set-service-mode.vbs &quot;||Service Details_Service Name||&quot; Automatic</command_line>
        <command_line_timeout>600</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>set-service-mode.vbs</file_name>
                <hash>92ed46e83355d3a040b753724de5dcb17392dcd54aefefc90cdbec3429637845</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;service_start_mode_-_set_to_automatic&#x2F;set-service-mode.vbs</source>
                <download_seconds>0</download_seconds>
                <size>853</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Service Details</name>
                <what_hash>2384520458</what_hash>
                <category>Applications</category>
                <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Service Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Service Display Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Service Status</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>3</column_index>
                        <name>Service Startup Mode</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Service Start Mode - Set to Manual</name>
        <display_name>Service Start Mode - Set to Manual</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:600 set-service-mode.vbs &quot;||Service Details_Service Name||&quot; Manual</command_line>
        <command_line_timeout>600</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>set-service-mode.vbs</file_name>
                <hash>92ed46e83355d3a040b753724de5dcb17392dcd54aefefc90cdbec3429637845</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;service_start_mode_-_set_to_manual&#x2F;set-service-mode.vbs</source>
                <download_seconds>0</download_seconds>
                <size>853</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Service Details</name>
                <what_hash>2384520458</what_hash>
                <category>Applications</category>
                <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Service Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Service Display Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Service Status</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>3</column_index>
                        <name>Service Startup Mode</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Delete Login Hook</name>
        <display_name>Delete Login Hook</display_name>
        <command_line>&#x2F;bin&#x2F;bash deleteLoginHook.sh</command_line>
        <command_line_timeout>60</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>deleteLoginHook.sh</file_name>
                <hash>226abac54ab4d85b04e1130b54315338832d5a3b5ed94f383e06a9d57611fa9e</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;IR&#x2F;2016-07-07_12-32-29_3.1.0.0025-g56b560c&#x2F;delete_login_hook&#x2F;deleteLoginHook.sh</source>
                <download_seconds>0</download_seconds>
                <size>61</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Login Hooks</name>
                <what_hash>1630563654</what_hash>
                <category>Vulnerability Identification</category>
                <description>Returns a the filename and path of login hook script
e.g. &#x2F;Library&#x2F;Scripts&#x2F;badStuff.sh</description>
                <result_type>1</result_type>
                <qseconds>3600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>,</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27; THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
&#x27; 
&#x27; 

WScript.Echo &quot;N&#x2F;A on Windows&quot;</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;bash
for hook in `defaults read com.apple.loginwindow LoginHook 2&gt; &#x2F;dev&#x2F;null`
do
   echo &quot;$hook&quot;
done
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns/>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Start Service - ||Service Details_Service Name||</name>
        <display_name>Start Service</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:180 ..\..\Tools\startservice.vbs &quot;||Service Details_Service Name||&quot;</command_line>
        <command_line_timeout>180</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Service Details</name>
                <what_hash>2384520458</what_hash>
                <category>Applications</category>
                <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Service Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Service Display Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Service Status</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>3</column_index>
                        <name>Service Startup Mode</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Stop Service - ||Running Service||</name>
        <display_name>Stop Service</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:180 ..\..\Tools\stopservice.vbs &quot;||Running Service||&quot;</command_line>
        <command_line_timeout>180</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Running Service</name>
                <what_hash>1497251383</what_hash>
                <category>Applications</category>
                <description>Provides a list of currently running services on the client machine.
Example: DHCP Client</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>,</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>1</sensor_type>
                        <os>0</os>
                        <query>select Caption from win32_Service where State=&#x27;Running&#x27;</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

if which systemctl &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # Rh7+ SuSE12+
then
        systemctl list-units --type=service 2&gt;&amp;1 |\
        sed -e &#x27;s&#x2F;^\(.*\)\s\s*loaded\s\s*active.*&#x2F;\1&#x2F;&#x27; \
        -e &#x27;s&#x2F;\(.*\)\s\s*loaded\s\s*failed.*$&#x2F;&#x2F;&#x27; 2&gt;&amp;1 | \
         egrep -v &quot;^\s*$|^UNIT|^LOAD|^ACTIVE|^SUB|^JOB|units listed|show all installed unit&quot;
elif which chkconfig &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # Rh5,6
then
        chkconfig --list | grep &quot;`runlevel | awk &#x27;{print $NF}&#x27;`:on&quot; | awk &#x27;{print $1}&#x27;
elif which service &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # Debian uses SysVinit but doesn&#x27;t have chkconfig
then
        service --status-all 2&gt;&amp;1  | egrep &quot;^ \[ \+ \]&quot; | \
        sed &#x27;s&#x2F;^ \[ + \]  \(.*\)$&#x2F;\1&#x2F;&#x27;
elif which initctl &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # ubuntu, all versions
then
        initctl list 2&gt;&amp;1 |  grep &quot;\&#x2F;running&quot; |\
        sed -e &#x27;s&#x2F;\(.*\) start\&#x2F;\w\w*, process [0-9][0-9]*$&#x2F;\1&#x2F;&#x27; \
        -e &#x27;s&#x2F;\(.*\) start\&#x2F;running$&#x2F;\1&#x2F;&#x27;
else
        echo ERROR: Unable to identify Linux service manager
fi
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

launchctl list | tail -n +2 | awk &#x27;$1 != &quot;-&quot; {print $3}&#x27;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh
svcs | grep -v &quot;^STATE&quot; | awk &#x27;{ print $3 }&#x27; | sed &#x27;s#svc:&#x2F;##g;s&#x2F;:default&#x2F;&#x2F;g&#x27;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh
lssrc -a | grep active | awk &#x27;{ print $1 }&#x27;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns/>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Start Service - ||Stopped Service||</name>
        <display_name>Start Service</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:180 ..\..\Tools\startservice.vbs &quot;||Stopped Service||&quot;</command_line>
        <command_line_timeout>180</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Stopped Service</name>
                <what_hash>3188527889</what_hash>
                <category>Applications</category>
                <description>Returns a list of all services currently stopped on the client machine.
Example: DHCP Client</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>,</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>1</sensor_type>
                        <os>0</os>
                        <query>select Caption from win32_Service where State=&#x27;Stopped&#x27;</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;bash
first=true
launchctl list | while read line
do
    set -- $line
if ( $first ); 
then
	first=false
else
	if [ &quot;$2&quot; == &quot;0&quot; ]; 
	then
		echo $3
	fi
fi
done
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns/>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Stop Service - ||Service Details_Service Name||</name>
        <display_name>Stop Service</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:180 ..\..\Tools\stopservice.vbs &quot;||Service Details_Service Name||&quot;</command_line>
        <command_line_timeout>180</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files/>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Service Details</name>
                <what_hash>2384520458</what_hash>
                <category>Applications</category>
                <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Service Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Service Display Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Service Status</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>3</column_index>
                        <name>Service Startup Mode</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Uninstall MSI ||Installed Applications_Name||</name>
        <display_name>Uninstall MSI</display_name>
        <command_line>cmd &#x2F;c cscript &#x2F;&#x2F;T:3600 uninstall.vbs &quot;||Installed Applications_Silent Uninstall String||&quot; &quot;||Installed Applications_Uninstallable||&quot;</command_line>
        <command_line_timeout>3000</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>uninstall.vbs</file_name>
                <hash>813e41f87527880af5d9e538c570f797d4fcd7c81f5e7ac4349495efa3029399</hash>
                <source>https:&#x2F;&#x2F;content.tanium.com&#x2F;files&#x2F;published&#x2F;InitialContent&#x2F;2016-05-05_12-10-19_6.5.4.0149-gc026079&#x2F;uninstall_msi_!!installed_applications_name!!&#x2F;uninstall.vbs</source>
                <download_seconds>0</download_seconds>
                <size>2274</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <id>0</id>
            </group>
        </verify_group>
        <sensors>
            <sensor>
                <name>Installed Applications</name>
                <what_hash>1511329504</what_hash>
                <category>Applications</category>
                <description>List of the applications and versions of those applications installed on the client machine.
Example: Mozilla Firefox | 16.0.1</description>
                <result_type>1</result_type>
                <qseconds>600</qseconds>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>|</delimiter>
                <hidden_flag>0</hidden_flag>
                <queries>
                    <sensor_query>
                        <sensor_type>4</sensor_type>
                        <os>0</os>
                        <query>&#x27;========================================
&#x27; Installed Applications
&#x27;========================================
&#x27;@INCLUDE=utils&#x2F;SensorRandomization&#x2F;SensorRandomizationFunctions.vbs
&#x27; This sensor will return information in the uninstall areas of the registry.
&#x27; There are two hidden columns which can be filtered on despite the fact that
&#x27; they&#x27;re hidden, and can also feed actions.
&#x27; if the uninstallstring is msi based, it is altered to show the
&#x27; silent uninstall options and marked as &quot;Is Uninstallable&quot;
&#x27; finally, if it&#x27;s a user installed application, it will note that
&#x27; The columns look like:
&#x27; Name|Version|Silent Uninstall String|Uninstallable

SensorRandomize()

Set objRegistry = Getx64RegistryProvider()

keyPath = &quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;
key64Path = &quot;SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall&quot;

Const HKLM = &amp;H80000002
Const HKEY_USERS = &amp;H80000003

&#x27; list out 32-bit applications on a 64-bit system
If RegKeyExists(HKLM, key64Path) Then
	objRegistry.EnumKey HKLM, key64Path, arrSubKeys
	GetApplications HKLM,key64path,arrSubKeys
End If

&#x27; list out 32-bit applications on a 32-bit system, or 64-bit applications
&#x27; on a 64-bit system.
If RegKeyExists(HKLM, keyPath) Then
	objRegistry.EnumKey HKLM, keypath, arrSubKeys
	GetApplications HKLM,keypath,arrSubKeys
End If

&#x27; Also list out applications installed to HKEY_Users areas
&#x27; which will be appended to the arrSubKeys
objRegistry.EnumKey HKEY_USERS, &quot;&quot;, arrUserKeys
For Each strSIDkey In arrUserKeys
	If RegKeyExists(HKEY_USERS, strSIDKEY&amp;&quot;\&quot;&amp;keyPath) Then
		objRegistry.EnumKey HKEY_USERS, strSIDkey&amp;&quot;\&quot;&amp;keyPath, arrSubKeys
		GetApplications HKEY_USERS,strSIDKey&amp;&quot;\&quot;&amp;keyPath,arrSubKeys
	End If
Next


Function GetApplications(HIVE, keypath,arrSubKeys)
	Set applications = CreateObject(&quot;Scripting.Dictionary&quot;)
	On Error Resume Next
	For Each key in arrSubKeys
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;DisplayName&quot;, displayName
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;DisplayVersion&quot;, version
		objRegistry.GetDWORDValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;SystemComponent&quot;, systemComponent	
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;UninstallString&quot;, uninstallString	
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;ParentKeyName&quot;, parentKey	
		&#x27; on error goto 0
		&#x27; assume it&#x27;s not uninstallable
		bUninstallable = &quot;Not Uninstallable&quot;
				
		If displayName &lt;&gt; &quot;&quot; _
			And Not IsNull(uninstallString) _ 
			And IsNull(parentKey) _
			And InStr(displayName, &quot;Hotfix&quot;) = 0 _
			And InStr(displayName, &quot;Update for&quot;) = 0 _
	 		And InStr(displayName, &quot;Security Update for&quot;) = 0 _
	 	Then 
	 		If InStr(LCase(uninstallString), &quot;msiexec&quot;) Then
	 			&#x27; replace any &#x2F;I with &#x2F;X and add silent flags
	 			uninstallString = Replace(uninstallString,&quot;&#x2F;I&quot;,&quot;&#x2F;X&quot;) &amp; &quot; &#x2F;qn &#x2F;noreboot&quot; 
	  			bUninstallable = &quot;Is Uninstallable&quot;
	  		End If
	 		If IsNull(systemComponent) Or systemComponent = 0 Then
				If IsNull(version) Then
					version = GetVersionInString(displayName)
				End If
				&#x27; This is a multi-column sensor.  Last two columns are hidden.

				displayString = displayName &amp; &quot;|&quot; &amp; version &amp; &quot;|&quot; &amp; uninstallString &amp; &quot;|&quot; &amp; bUninstallable

				&#x27; treat displayString as the unique value - cannot be listed twice.
				If Not applications.Exists(displayString) Then
					applications.Add displayString, &quot;&quot;
				End If 	
			End If 	
		End If 
	Next
	On Error Goto 0
	
	SortDictionary applications, 1 &#x27; This calls a sorting function specific to dictionaries
	arrApplicationsKeys = applications.Keys
	For Each application In arrApplicationsKeys
		&#x27; final output of the sensor
		WScript.Echo CleanCharacters(application)
	Next
End Function &#x27;GetApplications

Function RegKeyExists(sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function SortDictionary(objDict, intSort)
 &#x27;   objDict - the dictionary to sort
 &#x27;   intSort - the field to sort (1=key, 2=item)
 
   &#x27; declare constants
   Const dictKey  = 1
   Const dictItem = 2
 
   &#x27; declare our variables
   Dim strDict()
   Dim objKey
   Dim strKey,strItem
   Dim X,Y,Z
 
   &#x27; get the dictionary count
   Z = objDict.Count
 
   &#x27; we need more than one item to warrant sorting
   If Z &gt; 1 Then
     &#x27; create an array to store dictionary information
     ReDim strDict(Z,2)
     X = 0
     &#x27; populate the string array
     For Each objKey In objDict
         strDict(X,dictKey)  = CStr(objKey)
         strDict(X,dictItem) = CStr(objDict(objKey))
         X = X + 1
     Next
 
     &#x27; perform a a shell sort of the string array
     For X = 0 To (Z - 2)
       For Y = X To (Z - 1)
         If StrComp(strDict(X,intSort),strDict(Y,intSort),vbTextCompare) &gt; 0 Then
             strKey  = strDict(X,dictKey)
             strItem = strDict(X,dictItem)
             strDict(X,dictKey)  = strDict(Y,dictKey)
             strDict(X,dictItem) = strDict(Y,dictItem)
             strDict(Y,dictKey)  = strKey
             strDict(Y,dictItem) = strItem
         End If
       Next
     Next
 
     &#x27; erase the contents of the dictionary object
     objDict.RemoveAll
 
     &#x27; repopulate the dictionary with the sorted information
     For X = 0 To (Z - 1)
       objDict.Add strDict(X,dictKey), strDict(X,dictItem)
     Next
 
   End If
 End Function &#x27;SortDictionary

Function GetVersionInString(ByVal strTemp)
&#x27; examines a string and returns a version string at the end of it
	Dim strOut
	strOut = &quot;&quot;
	If Not IsNull(strTemp) Then
		strTemp = StrReverse(strTemp)
		Dim strLookAtChar,intCurPos
		Dim bNumbersStartMarked : bNumbersStartMarked = False

		For intCurPos = 1 To Len(strTemp)		
			strLookAtChar = Mid(strTemp,intCurPos,1)
			If IsNumeric(strLookAtChar) Or strLookAtChar = &quot;.&quot; Or strLookAtChar = &quot;-&quot; Then
				bNumbersStartMarked = True
				strOut = strOut &amp; strLookAtChar
			End If
		If bNumbersStartMarked And ( (Not IsNumeric(strLookAtChar) And strLookAtChar &lt;&gt; &quot;.&quot; And strLookAtChar &lt;&gt; &quot;-&quot;) ) Then
			Exit For
		End If	
		Next
		strOut = StrReverse(strOut)
	Else
		strOut = &quot;&quot;
	End If
	
	If Len(strOut) = 0 Then strOut = &quot;N&#x2F;A&quot;
	
	GetVersionInString = strOut
	
End Function &#x27;GetVersionInString

Function CleanCharacters(strTest)
&#x27; String returned will not have characters in the output which
&#x27; are not friendly to the console app
	strPattern = &quot;[^\x20-\x7E]&quot;
	strReplace = &quot;&quot;
	Set objRegExp = New RegExp
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	objRegExp.Pattern = strPattern
	objRegExp.Global = True
	CleanCharacters = objRegExp.Replace(strTest, strReplace)
End Function

Function Getx64RegistryProvider
    &#x27; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&quot;winmgmts:\\.\root\CIMV2&quot;)
    Set colItems = objWMIService.ExecQuery(&quot;Select SystemType from Win32_ComputerSystem&quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &quot;x64&quot;) &gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&quot;WbemScripting.SWbemNamedValueSet&quot;)
    objCtx.Add &quot;__ProviderArchitecture&quot;, iArchType
    Set objLocator = CreateObject(&quot;Wbemscripting.SWbemLocator&quot;)
    Set objServices = objLocator.ConnectServer(&quot;&quot;,&quot;root\default&quot;,&quot;&quot;,&quot;&quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&quot;StdRegProv&quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &#x27; Getx64RegistryProvider
&#x27;------------ INCLUDES after this line. Do not edit past this point -----
&#x27;- Begin file: utils&#x2F;SensorRandomization&#x2F;SensorRandomizationFunctions.vbs
&#x27;&#x27; -- Begin Random Sleep Functions -- &#x27;&#x27;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &#x27; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &#x27; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &#x27; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&#x27; sleeps for a random period of time, intSleepTime is in seconds
&#x27; if the sensor randomize flag is on
&#x27; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&#x27; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;&quot;\Sensor Data\Random Sleep&quot;
	
	Set objShell = CreateObject(&quot;WScript.Shell&quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&quot;HKLM\&quot;&amp;strRandomizeRegPath&amp;&quot;\SensorRandomizeFlag&quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&quot;HKLM\&quot;&amp;strRandomizeRegPath&amp;&quot;\SensorRandomizeScalingPercentage&quot;)
	On Error Goto 0
	If intRandomizeFlag &gt; 0 Then
		If intRandomizeScalingPercentage &gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &quot;Randomize scaling percentage of &quot; _ 
				&amp; intRandomizeScalingPercentage &amp; &quot; applied, new sleep time is &quot; &amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &#x27; convert to milliseconds
		&#x27; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&#x27; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &quot;Sleeping for &quot; &amp; intSensorRandomizeWaitTime &amp; &quot; milliseconds&quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &quot;Done sleeping, continuing ...&quot;
	Else 
		SensorRandomizeEcho &quot;SensorRandomize Not Enabled - No Op&quot;
	End If
End Function &#x27;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&#x27; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID &#x2F; Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID &#x2F; Timer
	End If
End Function &#x27;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&#x27;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &quot;&quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
  	End If
End Function &#x27;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&#x27;&#x27; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &quot;ComputerID&quot;
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&quot;HKLM\&quot;&amp;strKeyPath&amp;&quot;\&quot;&amp;strValueName)
    If Err.Number &lt;&gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &#x27;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &#x27;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &#x27;SensorRandomizeEcho
&#x27; -- End Random Sleep Functions --&#x27;
&#x27;- End file: utils&#x2F;SensorRandomization&#x2F;SensorRandomizationFunctions.vbs</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>1</os>
                        <query>#!&#x2F;bin&#x2F;sh
# Detects which OS and if it is Linux then it will detect which Linux
# Distribution.

# Can be used as a starting point for shell scripts that need to work differently on
# Mac, and various flavors of Linux

OS=`uname -s`

GetVersionFromFile()
{
    VERSION=`cat $1 | tr &quot;\n&quot; &#x27; &#x27; | sed s&#x2F;.*VERSION.*=\ &#x2F;&#x2F; `
}

if [ &quot;${OS}&quot; = &quot;Linux&quot; ] ; then
    KERNEL=`uname -r`
    if [ -f &#x2F;etc&#x2F;redhat-release ] ; then
        # Redhat based system
        rpm -qa --queryformat &quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&quot;
    elif [ -f &#x2F;etc&#x2F;SuSE-release ] ; then
        # SuSE &#x2F; OpenSuSE based system
        rpm -qa --queryformat &quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&quot;
    elif [ -f &#x2F;etc&#x2F;lsb-release ] ; then
        # Usually Ubuntu -- this is a Linux Standard Based system, which
        # Ubuntu is by far the biggest.  But general LSB commands should work
        dpkg -l | awk &#x27;{print $2&quot;|&quot;$3&quot;|nothing|Not Uninstallable&quot;}&#x27;
    elif [ -f &#x2F;etc&#x2F;debian_version ] ; then
        # Debian -- note that Ubuntu is Debian based, but Debian does not have a
        # lsb-release file
        dpkg -l | awk &#x27;{print $2&quot;|&quot;$3&quot;|nothing|Not Uninstallable&quot;}&#x27;
        #else
	# a less common distribution.  Most all really popular distributions will
        # be caught by the tree above.
    fi
#else
   # not Linux -- could be anything, BSD &#x2F; Solaris &#x2F; AIX &#x2F; etc
fi

echo ${OSSTR}
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>2</os>
                        <query>#!&#x2F;bin&#x2F;bash

notcontains() {
    string=&quot;$1&quot;
    substring=&quot;$2&quot;
    if test &quot;${string#*$substring}&quot; != &quot;$string&quot;
    then
        return 1    # $substring is not in $string
    else
        return 0    # $substring is in $string
    fi
}

ftemp=$(mktemp -t &#x27;apps.xml&#x27;)
system_profiler -xml SPApplicationsDataType &gt; &quot;$ftemp&quot;

count=1

while true
do
        app=`&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print :0:_items:$count:_name&quot; $ftemp 2&gt;&#x2F;dev&#x2F;null`
        version=`&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print :0:_items:$count:version&quot; $ftemp 2&gt;&#x2F;dev&#x2F;null`
        if [ -z &quot;$app&quot; ]; then
                break
        fi
        test=&quot;VMware&quot;
        if notcontains &quot;$version&quot; &quot;$test&quot;; then
                echo $app&quot;|&quot;$version&quot;|nothing|Not Uninstallable&quot;
        fi
        let count=count+1
done
rm -rf &quot;$ftemp&quot;
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>3</os>
                        <query>#!&#x2F;usr&#x2F;xpg4&#x2F;bin&#x2F;sh
for p in $(pkginfo -l -c application | egrep &#x27;PKGINST:|VERSION:&#x27; | paste - - | sed s&#x2F;PKGINST:&#x2F;&#x2F; | sed s&#x2F;VERSION:&#x2F;&#x2F; | awk &#x27;{ print $1&quot;|&quot;$2}&#x27;)
do
   app=$(echo &quot;$p&quot; | awk -F\| &#x27;{print $1 }&#x27;)
   ver=$(echo &quot;$p&quot; | awk -F\| &#x27;{print $2 }&#x27;)
   ver=$(echo &quot;$ver&quot; | awk -F, &#x27;{ print $ 1}&#x27;) 
   echo &quot;$app|$ver|nothing|Not Uninstallable&quot;
done
</query>
                        <signature></signature>
                    </sensor_query>
                    <sensor_query>
                        <sensor_type>6</sensor_type>
                        <os>4</os>
                        <query>#!&#x2F;bin&#x2F;sh
#pkg_name|pkg_vers|nothing|Not Uninstallable

for pkg in `&#x2F;usr&#x2F;bin&#x2F;lslpp -Lcq | awk -F: &#x27;{ print $2&quot;|&quot;$3&#x27;}`
do
 echo &quot;$pkg|nothing|Not Uninstallable&quot;
done
</query>
                        <signature></signature>
                    </sensor_query>
                </queries>
                <columns>
                    <column>
                        <column_index>0</column_index>
                        <name>Name</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>1</column_index>
                        <name>Version</name>
                        <hidden_flag>0</hidden_flag>
                        <result_type>2</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>2</column_index>
                        <name>Silent Uninstall String</name>
                        <hidden_flag>1</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                    <column>
                        <column_index>3</column_index>
                        <name>Uninstallable</name>
                        <hidden_flag>1</hidden_flag>
                        <result_type>1</result_type>
                        <ignore_case_flag>1</ignore_case_flag>
                        <exclude_from_parse>0</exclude_from_parse>
                    </column>
                </columns>
                <meta_data/>
            </sensor>
        </sensors>
    </tanium_package>
    <tanium_package>
        <name>Install Osquery Ubuntu DEB</name>
        <display_name>Install Osquery Ubuntu DEB</display_name>
        <command_line>&#x2F;usr&#x2F;bin&#x2F;dpkg -i osquery-latest.deb</command_line>
        <command_line_timeout>300</command_line_timeout>
        <download_seconds>600</download_seconds>
        <hidden_flag>0</hidden_flag>
        <signature></signature>
        <verify_expire_seconds>600</verify_expire_seconds>
        <skip_lock_flag>0</skip_lock_flag>
        <prompt_text/>
        <package_files>
            <package_file>
                <file_name>osquery-latest.deb</file_name>
                <hash>d15c84e51ea63c1a856fc6d19f6da3557804f391bead1c2e737054d243abf5b7</hash>
                <source>https:&#x2F;&#x2F;osquery-packages.s3.amazonaws.com&#x2F;trusty&#x2F;osquery-latest.deb</source>
                <download_seconds>2592000</download_seconds>
                <size>5673072</size>
                <type>1</type>
            </package_file>
        </package_files>
        <meta_data/>
        <verify_group>
            <group>
                <sentence>
                    <and_flag>1</and_flag>
                    <filter_specs>
                        <filter_spec>
                            <type>filter</type>
                            <equal_flag>0</equal_flag>
                            <not_flag>0</not_flag>
                            <greater_flag>0</greater_flag>
                            <result_type>11</result_type>
                            <how_reg_ex>.*&#x2F;usr&#x2F;bin&#x2F;osqueryi.*</how_reg_ex>
                            <max_age_seconds>0</max_age_seconds>
                            <ignore_case_flag>1</ignore_case_flag>
                            <all_values_flag>0</all_values_flag>
                            <substring_flag>0</substring_flag>
                            <substring_start>0</substring_start>
                            <substring_length>0</substring_length>
                            <delimiter>0</delimiter>
                            <delimiter_index>0</delimiter_index>
                            <utf8_flag>0</utf8_flag>
                            <aggregation>0</aggregation>
                            <all_times_flag>0</all_times_flag>
                            <end_time/>
                            <temp_sensor>
                                <name>Folder Exists[&#x2F;usr&#x2F;bin&#x2F;osqueryi]</name>
                                <what_hash>1487995388</what_hash>
                                <category></category>
                                <description></description>
                                <parameters>
                                    <param>
                                        <varname>||folder||</varname>
                                        <value>&#x2F;usr&#x2F;bin&#x2F;osqueryi</value>
                                    </param>
                                </parameters>
                                <result_type>1</result_type>
                                <qseconds>600</qseconds>
                                <ignore_case_flag>1</ignore_case_flag>
                                <exclude_from_parse>1</exclude_from_parse>
                                <delimiter></delimiter>
                                <hidden_flag>0</hidden_flag>
                                <queries>
                                    <sensor_query>
                                        <sensor_type>4</sensor_type>
                                        <os>0</os>
                                        <query>&#x27;========================================
&#x27; Folder Exists
&#x27;========================================

Option Explicit

Dim bExamineRemoteFolders &#x27; boolean to decide whether to consider non-local dirs
bExamineRemoteFolders = True &#x27; attempt to look at remote folders, may fail due to access

Dim strFolderPath, objFso, objShell

strFolderPath = unescape(&quot;%2fusr%2fbin%2fosqueryi&quot;)

If InStr(LCase(strFolderPath),&quot;%userprofile%&quot;) &gt; 0 Then
	CheckForAllUsers strFolderPath
Else
	CheckNoUserVars strFolderPath
End If

	
Sub CheckNoUserVars(ByVal strFolderPath)
&#x27; plain check if a file exists
	strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
	Set objShell = CreateObject(&quot;WScript.Shell&quot;)
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	
	If objFso.FolderExists(strFolderPath) Then 
		WScript.Echo &quot;Folder Exists: &quot; &amp; UnFixFileSystemRedirectionForPath(strFolderPath)
	Else 
		WScript.Echo &quot;Folder does not exist&quot;
	End If
End Sub &#x27;CheckNoUserVars

Sub CheckForAllUsers(ByVal strFolderPath)
&#x27; checks in every user directory

	&#x27; Remove %userprofile% and keep the rest
	strFolderPath = Replace(LCase(strFolderPath),&quot;%userprofile%&quot;,&quot;&quot;)	
	
	On Error Resume Next &#x27; permissions issues, perhaps
	
	Const HKLM = &amp;H80000002
	Dim objShell,objFso
	Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
	Dim strValue,strOut,bFolderFound
	bFolderFound = False
	Set objShell = CreateObject(&quot;WScript.Shell&quot;)
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	
	Set objRegistry=Getx64RegistryProvider
 
	strKeyPath = &quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&quot;
	objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys
 

	For Each objSubkey In arrSubkeys
	    strValueName = &quot;ProfileImagePath&quot;
	    strSubPath = strKeyPath &amp; &quot;\&quot; &amp; objSubkey
	    objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue

	    If Not bExamineRemoteFolders And Not InStr(strValue,&quot;:&quot;) &gt; 0 Then &#x27; Not Local, don&#x27;t get size of remote dirs
	    	&#x27; if user profile is not local and not examining remote profiles, ignore
	    Else 
	    	If objFSO.FolderExists(strValue&amp;strFolderPath) Then
				bFolderFound = True
				WScript.Echo &quot;Folder Exists: &quot; &amp; strValue&amp;strFolderPath
			End If
		End If
	Next
	
	If Not bFolderFound Then

		WScript.Echo &quot;Folder does not exist&quot;
	End If

	On Error Goto 0

End Sub &#x27;CheckForAllUsers

Function Getx64RegistryProvider
    &#x27; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&quot;winmgmts:\\.\root\CIMV2&quot;)
    Set colItems = objWMIService.ExecQuery(&quot;Select SystemType from Win32_ComputerSystem&quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &quot;x64&quot;) &gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&quot;WbemScripting.SWbemNamedValueSet&quot;)
    objCtx.Add &quot;__ProviderArchitecture&quot;, iArchType
    Set objLocator = CreateObject(&quot;Wbemscripting.SWbemLocator&quot;)
    Set objServices = objLocator.ConnectServer(&quot;&quot;,&quot;root\default&quot;,&quot;&quot;,&quot;&quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&quot;StdRegProv&quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &#x27; Getx64RegistryProvider

Function FixFileSystemRedirectionForPath(strFilePath)
&#x27; This function will fix a folder location so that
&#x27; a 32-bit program can be passed the windows\system32 directory
&#x27; as a parameter.
&#x27; Even if the sensor or action runs in 64-bit mode, a 32-bit
&#x27; program called in a 64-bit environment cannot access
&#x27; the system32 directory - it would be redirected to syswow64.
&#x27; you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)
	Set objShell = CreateObject(&quot;Wscript.Shell&quot;)

	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&quot;%ProgramFiles%&quot;)

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&quot;%ProgramFiles(x86)%&quot;)
	
	If objFSO.FolderExists(strProgramFilesx86) Then &#x27; quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,&quot;&quot;)
			strNewSystem32Location = Replace(strSystem32Location,&quot;system32&quot;,&quot;sysnative&quot;)
			strFilePath = strNewSystem32Location&amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	&#x27;Cleanup
	Set objFSO = Nothing
End Function &#x27;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&#x27; This function will undo the changes made to a path by the 
&#x27; FixFileSystemRedirectionForPath function
&#x27; if a path is passed in with the sysnative string in it
&#x27; it will simply change it to system32, regardless of whether
&#x27; the OS is 64-bit.  A path will only be changed when it&#x27;s
&#x27; necessary, so this has no effect when it&#x27;s not changed.

	Dim objFSO,strSystem32Location,strNewSystem32Location
	
	Set objFSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)
	
	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strNewSystem32Location = Replace(strSystem32Location,&quot;system32&quot;,&quot;sysnative&quot;)
	
	UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
	
	&#x27;Cleanup
	Set objFSO = Nothing
End Function &#x27;UnFixFileSystemRedirectionForPath</query>
                                        <signature></signature>
                                    </sensor_query>
                                </queries>
                                <columns/>
                                <meta_data/>
                                <sensor>
                                    <name>Folder Exists</name>
                                    <what_hash>1101836903</what_hash>
                                    <category>File System</category>
                                    <description>A parameterized Sensor that checks to see if a folder exists on a machine.  If it does, it returns back the full path of the folder. Will expand environment variables, and will expand %userprofile%&#x2F;folder or &quot;~&#x2F;folder&quot; to search all user home directories.
Example: C:\Windows\system32</description>
                                    <parameters>
                                        <parameter_text>{&quot;parameters&quot;:[{&quot;validationExpressions&quot;:[{&quot;helpString&quot;:&quot;Value can not be blank&quot;,&quot;flags&quot;:&quot;&quot;,&quot;expression&quot;:&quot;^\\S&quot;,&quot;parameterType&quot;:&quot;com.tanium.models::ValidationExpression&quot;,&quot;model&quot;:&quot;com.tanium.models::ValidationExpression&quot;}],&quot;key&quot;:&quot;folder&quot;,&quot;promptText&quot;:&quot;e.g. c:\\Program Files\\MyApp&quot;,&quot;label&quot;:&quot;Folder path to search for&quot;,&quot;helpString&quot;:&quot;Enter the full drive letter and folder path of the folder. Environment variables accepted.&quot;,&quot;value&quot;:&quot;&quot;,&quot;defaultValue&quot;:&quot;&quot;,&quot;restrict&quot;:null,&quot;maxChars&quot;:0,&quot;parameterType&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::TextInputParameter&quot;}],&quot;parameterType&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;,&quot;model&quot;:&quot;com.tanium.components.parameters::ParametersArray&quot;}</parameter_text>
                                    </parameters>
                                    <result_type>1</result_type>
                                    <qseconds>600</qseconds>
                                    <ignore_case_flag>1</ignore_case_flag>
                                    <exclude_from_parse>1</exclude_from_parse>
                                    <delimiter>,</delimiter>
                                    <hidden_flag>0</hidden_flag>
                                    <queries>
                                        <sensor_query>
                                            <sensor_type>4</sensor_type>
                                            <os>0</os>
                                            <query>&#x27;========================================
&#x27; Folder Exists
&#x27;========================================

Option Explicit

Dim bExamineRemoteFolders &#x27; boolean to decide whether to consider non-local dirs
bExamineRemoteFolders = True &#x27; attempt to look at remote folders, may fail due to access

Dim strFolderPath, objFso, objShell

strFolderPath = unescape(&quot;||folder||&quot;)

If InStr(LCase(strFolderPath),&quot;%userprofile%&quot;) &gt; 0 Then
	CheckForAllUsers strFolderPath
Else
	CheckNoUserVars strFolderPath
End If

	
Sub CheckNoUserVars(ByVal strFolderPath)
&#x27; plain check if a file exists
	strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
	Set objShell = CreateObject(&quot;WScript.Shell&quot;)
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	
	If objFso.FolderExists(strFolderPath) Then 
		WScript.Echo &quot;Folder Exists: &quot; &amp; UnFixFileSystemRedirectionForPath(strFolderPath)
	Else 
		WScript.Echo &quot;Folder does not exist&quot;
	End If
End Sub &#x27;CheckNoUserVars

Sub CheckForAllUsers(ByVal strFolderPath)
&#x27; checks in every user directory

	&#x27; Remove %userprofile% and keep the rest
	strFolderPath = Replace(LCase(strFolderPath),&quot;%userprofile%&quot;,&quot;&quot;)	
	
	On Error Resume Next &#x27; permissions issues, perhaps
	
	Const HKLM = &amp;H80000002
	Dim objShell,objFso
	Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
	Dim strValue,strOut,bFolderFound
	bFolderFound = False
	Set objShell = CreateObject(&quot;WScript.Shell&quot;)
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	
	Set objRegistry=Getx64RegistryProvider
 
	strKeyPath = &quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList&quot;
	objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys
 

	For Each objSubkey In arrSubkeys
	    strValueName = &quot;ProfileImagePath&quot;
	    strSubPath = strKeyPath &amp; &quot;\&quot; &amp; objSubkey
	    objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue

	    If Not bExamineRemoteFolders And Not InStr(strValue,&quot;:&quot;) &gt; 0 Then &#x27; Not Local, don&#x27;t get size of remote dirs
	    	&#x27; if user profile is not local and not examining remote profiles, ignore
	    Else 
	    	If objFSO.FolderExists(strValue&amp;strFolderPath) Then
				bFolderFound = True
				WScript.Echo &quot;Folder Exists: &quot; &amp; strValue&amp;strFolderPath
			End If
		End If
	Next
	
	If Not bFolderFound Then

		WScript.Echo &quot;Folder does not exist&quot;
	End If

	On Error Goto 0

End Sub &#x27;CheckForAllUsers

Function Getx64RegistryProvider
    &#x27; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&quot;winmgmts:\\.\root\CIMV2&quot;)
    Set colItems = objWMIService.ExecQuery(&quot;Select SystemType from Win32_ComputerSystem&quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &quot;x64&quot;) &gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&quot;WbemScripting.SWbemNamedValueSet&quot;)
    objCtx.Add &quot;__ProviderArchitecture&quot;, iArchType
    Set objLocator = CreateObject(&quot;Wbemscripting.SWbemLocator&quot;)
    Set objServices = objLocator.ConnectServer(&quot;&quot;,&quot;root\default&quot;,&quot;&quot;,&quot;&quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&quot;StdRegProv&quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &#x27; Getx64RegistryProvider

Function FixFileSystemRedirectionForPath(strFilePath)
&#x27; This function will fix a folder location so that
&#x27; a 32-bit program can be passed the windows\system32 directory
&#x27; as a parameter.
&#x27; Even if the sensor or action runs in 64-bit mode, a 32-bit
&#x27; program called in a 64-bit environment cannot access
&#x27; the system32 directory - it would be redirected to syswow64.
&#x27; you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)
	Set objShell = CreateObject(&quot;Wscript.Shell&quot;)

	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&quot;%ProgramFiles%&quot;)

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings(&quot;%ProgramFiles(x86)%&quot;)
	
	If objFSO.FolderExists(strProgramFilesx86) Then &#x27; quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,&quot;&quot;)
			strNewSystem32Location = Replace(strSystem32Location,&quot;system32&quot;,&quot;sysnative&quot;)
			strFilePath = strNewSystem32Location&amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	&#x27;Cleanup
	Set objFSO = Nothing
End Function &#x27;FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
&#x27; This function will undo the changes made to a path by the 
&#x27; FixFileSystemRedirectionForPath function
&#x27; if a path is passed in with the sysnative string in it
&#x27; it will simply change it to system32, regardless of whether
&#x27; the OS is 64-bit.  A path will only be changed when it&#x27;s
&#x27; necessary, so this has no effect when it&#x27;s not changed.

	Dim objFSO,strSystem32Location,strNewSystem32Location
	
	Set objFSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)
	
	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strNewSystem32Location = Replace(strSystem32Location,&quot;system32&quot;,&quot;sysnative&quot;)
	
	UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
	
	&#x27;Cleanup
	Set objFSO = Nothing
End Function &#x27;UnFixFileSystemRedirectionForPath</query>
                                            <signature></signature>
                                        </sensor_query>
                                        <sensor_query>
                                            <sensor_type>6</sensor_type>
                                            <os>1</os>
                                            <query>#!&#x2F;bin&#x2F;bash

unescape() {
    # decode everything between 0x20-0x7E except:
    #0 1 2 3 4 5 6 7 8 9 (0x30-0x39)
    #A B C D E F G H I J K L M N O P Q R S T U V W X Y Z (0x41-0x5A)
    #a b c d e f g h i j k l m n o p q r s t u v w x y z (0x61-0x7A)
    echo &quot;$1&quot; | sed -e &#x27;s&#x2F;%20&#x2F; &#x2F;g&#x27; \
    -e &#x27;s&#x2F;%21&#x2F;!&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%22&#x2F;&quot;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%23&#x2F;#&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%24&#x2F;$&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%25&#x2F;%&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%26&#x2F;\&amp;&#x2F;g&#x27; \
    -e &quot;s&#x2F;%27&#x2F;&#x27;&#x2F;g&quot; \
    -e &#x27;s&#x2F;%28&#x2F;(&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%29&#x2F;)&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[aA]&#x2F;*&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[bB]&#x2F;+&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[cC]&#x2F;,&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[dD]&#x2F;-&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[eE]&#x2F;.&#x2F;g&#x27; \
    -e &#x27;s#%2[fF]#&#x2F;#g&#x27; \
    -e &#x27;s&#x2F;%3[aA]&#x2F;:&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[bB]&#x2F;;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[cC]&#x2F;&lt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[dD]&#x2F;=&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[eE]&#x2F;&gt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[fF]&#x2F;?&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%40&#x2F;@&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[bB]&#x2F;[&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[cC]&#x2F;\\&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[dD]&#x2F;]&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[eE]&#x2F;^&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[fF]&#x2F;_&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%60&#x2F;`&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[bB]&#x2F;{&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[cC]&#x2F;|&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[dD]&#x2F;}&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[eE]&#x2F;~&#x2F;g&#x27;
}

file=`unescape &quot;||folder||&quot;`

if echo &quot;$file&quot; | grep -q &quot;^~\&#x2F;&quot;
then
  # replace home directory with nothing
  file=`echo $file | sed -e &#x27;s&#x2F;~\&#x2F;&#x2F;&#x2F;&#x27;`

  # Read in &#x2F;etc&#x2F;passwd to determine home dirs
  while read line
  do
     homedir=`echo $line | cut -d: -f6`
     if [ -d &quot;$homedir&#x2F;$file&quot; ]
     then
       flag=&quot;$flag|Folder Exists: $homedir&#x2F;$file&quot;
     fi
  done &lt; &#x2F;etc&#x2F;passwd

  if [ -z &quot;$flag&quot; ]
  then
    echo &quot;Folder does not exist&quot;
  else
    echo $flag | sed -e &quot;s&#x2F;|&#x2F;\\n&#x2F;g&quot; | sed -e &#x27;&#x2F;^$&#x2F;d&#x27; | sort | uniq
  fi
else
   if [ -d &quot;$file&quot; ]
   then
      echo &quot;Folder Exists: $file&quot;
   else
      echo &quot;Folder does not exist&quot;
   fi
fi
</query>
                                            <signature></signature>
                                        </sensor_query>
                                        <sensor_query>
                                            <sensor_type>6</sensor_type>
                                            <os>2</os>
                                            <query>#!&#x2F;bin&#x2F;sh

unescape() {
    # decode everything between 0x20-0x7E except:
    #0 1 2 3 4 5 6 7 8 9 (0x30-0x39)
    #A B C D E F G H I J K L M N O P Q R S T U V W X Y Z (0x41-0x5A)
    #a b c d e f g h i j k l m n o p q r s t u v w x y z (0x61-0x7A)
    echo &quot;$1&quot; | sed -e &#x27;s&#x2F;%20&#x2F; &#x2F;g&#x27; \
    -e &#x27;s&#x2F;%21&#x2F;!&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%22&#x2F;&quot;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%23&#x2F;#&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%24&#x2F;$&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%25&#x2F;%&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%26&#x2F;\&amp;&#x2F;g&#x27; \
    -e &quot;s&#x2F;%27&#x2F;&#x27;&#x2F;g&quot; \
    -e &#x27;s&#x2F;%28&#x2F;(&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%29&#x2F;)&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[aA]&#x2F;*&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[bB]&#x2F;+&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[cC]&#x2F;,&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[dD]&#x2F;-&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[eE]&#x2F;.&#x2F;g&#x27; \
    -e &#x27;s#%2[fF]#&#x2F;#g&#x27; \
    -e &#x27;s&#x2F;%3[aA]&#x2F;:&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[bB]&#x2F;;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[cC]&#x2F;&lt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[dD]&#x2F;=&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[eE]&#x2F;&gt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[fF]&#x2F;?&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%40&#x2F;@&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[bB]&#x2F;[&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[cC]&#x2F;\\&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[dD]&#x2F;]&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[eE]&#x2F;^&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[fF]&#x2F;_&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%60&#x2F;`&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[bB]&#x2F;{&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[cC]&#x2F;|&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[dD]&#x2F;}&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[eE]&#x2F;~&#x2F;g&#x27;
}

file=`unescape &quot;||folder||&quot;`
#file=`unescape &quot;$1&quot;`

filename=$(echo &quot;$file&quot; | sed &#x27;s&#x2F; &#x2F;\ &#x2F;g&#x27;)
if echo &quot;$file&quot; | grep -q &quot;^~&quot; 
then
	file=`echo &quot;$file&quot; | sed &#x27;s&#x2F;^\~\&#x2F;\(.*\)&#x2F;\1&#x2F;&#x27;`
	ls &#x2F;Users | grep -v &quot;^\.&quot; | while read homedir ; do
		if [ -d &quot;&#x2F;Users&#x2F;$homedir&#x2F;$file&quot; ]
		then
			echo &#x2F;Users&#x2F;$homedir&#x2F;$file
		fi
	done
else
	if [ -d &quot;$filename&quot; ] 
	then
		echo $filename
	fi
fi
</query>
                                            <signature></signature>
                                        </sensor_query>
                                        <sensor_query>
                                            <sensor_type>6</sensor_type>
                                            <os>3</os>
                                            <query>#!&#x2F;usr&#x2F;xpg4&#x2F;bin&#x2F;sh

unescape() {
    # decode everything between 0x20-0x7E except:
    #0 1 2 3 4 5 6 7 8 9 (0x30-0x39)
    #A B C D E F G H I J K L M N O P Q R S T U V W X Y Z (0x41-0x5A)
    #a b c d e f g h i j k l m n o p q r s t u v w x y z (0x61-0x7A)
    echo &quot;$1&quot; | sed -e &#x27;s&#x2F;%20&#x2F; &#x2F;g&#x27; \
    -e &#x27;s&#x2F;%21&#x2F;!&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%22&#x2F;&quot;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%23&#x2F;#&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%24&#x2F;$&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%25&#x2F;%&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%26&#x2F;\&amp;&#x2F;g&#x27; \
    -e &quot;s&#x2F;%27&#x2F;&#x27;&#x2F;g&quot; \
    -e &#x27;s&#x2F;%28&#x2F;(&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%29&#x2F;)&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[aA]&#x2F;*&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[bB]&#x2F;+&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[cC]&#x2F;,&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[dD]&#x2F;-&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[eE]&#x2F;.&#x2F;g&#x27; \
    -e &#x27;s#%2[fF]#&#x2F;#g&#x27; \
    -e &#x27;s&#x2F;%3[aA]&#x2F;:&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[bB]&#x2F;;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[cC]&#x2F;&lt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[dD]&#x2F;=&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[eE]&#x2F;&gt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[fF]&#x2F;?&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%40&#x2F;@&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[bB]&#x2F;[&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[cC]&#x2F;\\&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[dD]&#x2F;]&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[eE]&#x2F;^&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[fF]&#x2F;_&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%60&#x2F;`&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[bB]&#x2F;{&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[cC]&#x2F;|&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[dD]&#x2F;}&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[eE]&#x2F;~&#x2F;g&#x27;
}

file=`unescape &quot;||folder||&quot;`

if echo &quot;$file&quot; | grep -q &quot;^~\&#x2F;&quot;
then
  # replace home directory with nothing
  file=`echo $file | sed -e &#x27;s&#x2F;~\&#x2F;&#x2F;&#x2F;&#x27;`

  # Read in &#x2F;etc&#x2F;passwd to determine home dirs
  while read line
  do
     homedir=`echo $line | cut -d: -f6`
     if [ -d &quot;$homedir&#x2F;$file&quot; ]
     then
       res=&quot;$res|Folder Exists: $homedir&#x2F;$file&quot;
     fi
  done &lt; &#x2F;etc&#x2F;passwd

  if [ -z &quot;$res&quot; ]
  then
    echo &quot;Folder does not exist&quot;
  else
    echo $res | sed -e &quot;s&#x2F;|&#x2F;\\n&#x2F;g&quot; | sed -e &#x27;&#x2F;^$&#x2F;d&#x27; | sort | uniq
  fi
else
   if [ -d &quot;$file&quot; ]
   then
      echo &quot;Folder Exists: $file&quot;
   else
      echo &quot;Folder does not exist&quot;
   fi
fi
</query>
                                            <signature></signature>
                                        </sensor_query>
                                        <sensor_query>
                                            <sensor_type>6</sensor_type>
                                            <os>4</os>
                                            <query>#!&#x2F;bin&#x2F;sh

unescape() {
    # decode everything between 0x20-0x7E except:
    #0 1 2 3 4 5 6 7 8 9 (0x30-0x39)
    #A B C D E F G H I J K L M N O P Q R S T U V W X Y Z (0x41-0x5A)
    #a b c d e f g h i j k l m n o p q r s t u v w x y z (0x61-0x7A)
    echo &quot;$1&quot; | sed -e &#x27;s&#x2F;%20&#x2F; &#x2F;g&#x27; \
    -e &#x27;s&#x2F;%21&#x2F;!&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%22&#x2F;&quot;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%23&#x2F;#&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%24&#x2F;$&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%25&#x2F;%&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%26&#x2F;\&amp;&#x2F;g&#x27; \
    -e &quot;s&#x2F;%27&#x2F;&#x27;&#x2F;g&quot; \
    -e &#x27;s&#x2F;%28&#x2F;(&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%29&#x2F;)&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[aA]&#x2F;*&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[bB]&#x2F;+&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[cC]&#x2F;,&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[dD]&#x2F;-&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%2[eE]&#x2F;.&#x2F;g&#x27; \
    -e &#x27;s#%2[fF]#&#x2F;#g&#x27; \
    -e &#x27;s&#x2F;%3[aA]&#x2F;:&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[bB]&#x2F;;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[cC]&#x2F;&lt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[dD]&#x2F;=&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[eE]&#x2F;&gt;&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%3[fF]&#x2F;?&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%40&#x2F;@&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[bB]&#x2F;[&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[cC]&#x2F;\\&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[dD]&#x2F;]&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[eE]&#x2F;^&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%5[fF]&#x2F;_&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%60&#x2F;`&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[bB]&#x2F;{&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[cC]&#x2F;|&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[dD]&#x2F;}&#x2F;g&#x27; \
    -e &#x27;s&#x2F;%7[eE]&#x2F;~&#x2F;g&#x27;
}

file=`unescape &quot;||folder||&quot;`

if echo &quot;$file&quot; | grep -q &quot;^~\&#x2F;&quot;
then
  # replace home directory with nothing
  file=`echo $file | sed -e &#x27;s&#x2F;~\&#x2F;&#x2F;&#x2F;&#x27;`

  # Read in &#x2F;etc&#x2F;passwd to determine home dirs
  while read line
  do
     homedir=`echo $line | cut -d: -f6`
     if [ -d &quot;$homedir&#x2F;$file&quot; ]
     then
       flag=&quot;$flag|Folder Exists: $homedir&#x2F;$file&quot;
     fi
  done &lt; &#x2F;etc&#x2F;passwd

  if [ -z &quot;$flag&quot; ]
  then
    echo &quot;Folder does not exist&quot;
  else
    echo $flag | tr &#x27;|&#x27; &#x27;\n&#x27; | sed -e &#x27;&#x2F;^$&#x2F;d&#x27; | sort | uniq
  fi
else
   if [ -d &quot;$file&quot; ]
   then
      echo &quot;Folder Exists: $file&quot;
   else
      echo &quot;Folder does not exist&quot;
   fi
fi
</query>
                                            <signature></signature>
                                        </sensor_query>
                                    </queries>
                                    <columns/>
                                    <meta_data/>
                                </sensor>
                            </temp_sensor>
                            <what_hash>1487995388</what_hash>
                        </filter_spec>
                    </filter_specs>
                </sentence>
                <name/>
                
            </group>
        </verify_group>
    </tanium_package>
    <sensor>
        <name>Custom Tags</name>
        <what_hash>3004497651</what_hash>
        <category>Tags</category>
        <description>Any specified custom tags that have been set for this machine.  See the Custom Tagging Dashboard.
Example:  Development, Test-Machines</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>,</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Custom Tags
&#x27;========================================

Dim reg
Set reg=GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&quot;)
const HKLM = &amp;H80000002

Dim strRegKey
strRegKey = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Tags&quot;

If Not RegKeyExists(reg, HKLM, strRegKey) Then
	reg.createKey HKLM, strRegKey
End If

reg.enumValues HKLM, strRegKey, arrValues

If Not IsNull(arrValues) Then
	For Each strValueName In arrValues
		WScript.Echo strValueName
	Next
Else
	WScript.Echo &quot;[No Tags]&quot;
End If


Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function


Function GetTaniumRegistryPath
&#x27;GetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &quot;&quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
  	End If
End Function &#x27;GetTaniumRegistryPath</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ ! -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns/>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Running Applications</name>
        <what_hash>1559751995</what_hash>
        <category>Applications</category>
        <description>Provides a list of applications that are running at the present time on the client machine.
Example: Google Chrome | 23.0.1271.64</description>
        <result_type>1</result_type>
        <qseconds>300</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Running Applications
&#x27;========================================

&#x27; This sensor will list the pretty names of running applications.
&#x27; it is a multiple column sensor, and a hidden column will show the
&#x27; process name.

strSep = &quot;|&quot;
&#x27; Sensor output looks like:
&#x27; Running Application | Version | Process Name

SetLocale(1033)

showDuplicates = False 
showVersion = True
recordUsageStats = True

On Error Resume Next
strComputer = &quot;.&quot;
Set objWMIService = GetObject(&quot;winmgmts:\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;)
Set colItems = objWMIService.ExecQuery(&quot;Select Caption, Name, ExecutablePath, CreationDate from Win32_Process&quot;,,48)

Dim nameDictionary, processDictionary
Set nameDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)
Set processDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)

&#x27;ADD PROCESS NAME IN LOWER CASE
&#x27;nameDictionary.Add &quot;hppusg.exe&quot;, &quot;Some HP Application&quot;
&#x27;nameDictionary.Add &quot;taniumclient.exe&quot;, &quot;TANIUM CLIENT&quot;

&#x27;array used to print output (no dictionary since we need duplicates)
Dim arrOutput()
intSize = 0
ReDim Preserve arrOutput(intSize)

strComputer = &quot;.&quot;
Const HKLM = &amp;h80000002
Set reg=GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\&quot; &amp; strComputer &amp; &quot;\root\default:StdRegProv&quot;)

regPath = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Applications&quot;
If Not RegKeyExists(reg, HKLM, regPath) Then
	reg.createKey HKLM, regPath
End If

&#x27; if recording Usage stats, then we need to record when we first started 
&#x27; recording usage stats
If recordUsageStats Then 
	reg.GetStringValue HKLM, regPath, &quot;UsageStatsStart&quot;, strUsageStatsStart
	
	If IsNull(strUsageStatsStart) Or IsEmpty(strUsageStatsStart) Then 
		reg.SetStringValue HKLM, regPath, &quot;UsageStatsStart&quot;, CStr(Now())
	End If
End If 

&#x27;SET UP INSTALLED APPLICATIONS PROCESS DICTIONARY TO FACILITATE ACCESS LATER
Dim installedProcs
Set installedProcs = CreateObject(&quot;scripting.dictionary&quot;)

installedRegPath = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Applications\Installed&quot;
If Not RegKeyExists(reg, HKLM, regPath) Then
	reg.createKey HKLM, installedRegPath
Else	
	reg.EnumKey HKLM, installedRegPath, arrAppKeys
	if not isNull(arrAppKeys) Then
		For Each appKey In arrAppKeys
			fullAppKey = installedRegPath &amp; &quot;\&quot; &amp; appKey
			reg.EnumKey HKLM, fullAppKey, arrProcKeys
			If Not IsNull(arrProcKeys) Then
				For Each procKey In arrProcKeys
					fullProcKey = fullAppKey &amp; &quot;\&quot; &amp; procKey
					reg.GetStringValue HKLM, fullProcKey, &quot;Path&quot;, strPath
					reg.GetStringValue HKLM, fullProcKey, &quot;Process&quot;, strProc
					If Right(strPath, 1) &lt;&gt; &quot;\&quot; Then
						strPath = strPath &amp; &quot;\&quot;
					End If	
					If Not installedProcs.Exists(strPath &amp; strProc) Then
						installedProcs.Add strPath &amp; strProc, fullAppKey
&#x27;						WScript.Echo &quot;added: &quot; &amp; installedProcs.Item(strPath &amp; strProc)
					End If	
				Next
			End If
		Next
	End If
End If

For Each objItem in colItems
	If InStr(LCase(objItem.ExecutablePath), &quot;windows\system32\&quot;) = 0 Then
	    Dim fso
	    Set fso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	    If fso.FileExists(objItem.ExecutablePath) Then
    		Dim strOutput, fileVersion, fileVersionOutput, fullName

	    	Set execFile = fso.GetFile(objItem.ExecutablePath)
	    	
    		fileVersion = fso.GetFileVersion(objItem.ExecutablePath)
    		fileVersionOutput = &quot;N&#x2F;A&quot;
	    	If showVersion Then
	    		If fileVersion &lt;&gt; &quot;&quot; Then
	    			fileVersionOutput = fileVersion
	    		Else
	    			fileVersionOutput = &quot;N&#x2F;A&quot;
	    		End If
			End If 
			
   			fullName = nameDictionary.Item(LCase(objItem.Name))

			If IsEmpty(fullName) Then
				fullName = GetDescription(execFile.ParentFolder.Path, objItem.Name)
			End If
						
			If fullName = &quot;&quot; Then
				fullName = objItem.Name
			End If
			&#x27; sensor output looks like:
			&#x27; Application Name | Version | Process
   			strOutput = fullName &amp; strSep &amp; fileVersionOutput &amp; strSep &amp; objItem.Caption
    		
 			If not ArrayContains(arrOutput, strOutput) Or showDuplicates Then
				arrOutput(intSize) = strOutput
				intSize = intSize + 1
				ReDim Preserve arrOutput(intSize)
			End If
			
			&#x27;Process Last Started, First Started, etc.
			creationDate = objItem.CreationDate
			strDate = WMIDateStringToDate(creationDate)
			StoreData execFile.ParentFolder.Path, objItem.Name, fullName, fileVersion, cstr(strDate), reg, HKLM, regPath, false
			
			&#x27;Look in installed processes for match, if yes then update data
			strKey = execFile.ParentFolder.Path &amp; &quot;\&quot; &amp; objItem.Name
			If installedProcs.Exists(strKey) Then
				installedAppKey = installedProcs.Item(strKey)
				
				StoreData execFile.ParentFolder.Path, objItem.Name, fullName, fileVersion, cstr(strDate), reg, HKLM, installedAppKey, True
				
				&#x27;Also add &quot;Application&quot; value to process key
				reg.GetStringValue HKLM, installedAppKey, &quot;Description&quot;, strApp
				
				reg.SetStringValue HKLM, regPath&amp;&quot;\&quot;&amp;GetKeyName(objItem.Name), &quot;Application&quot;, strApp
			End If
	    End If
	End If
Next

For Each output In arrOutput 
	WScript.Echo output
Next

Function GetKeyName(strProcess)
	words = Split(strProcess, &quot;.&quot;)
	GetKeyName = words(0)
End Function

Function StoreData(strPath, strProc, fullName, version, strDate, objReg, hive, baseRegKey, isInstalled)
	Dim regKey
	
	If isInstalled Then
		regKey = baseRegKey
	Else
		regKey = baseRegKey &amp; &quot;\&quot; &amp; GetKeyName(strProc)
	End If
	
	If Not RegKeyExists(objReg, hive, regKey) Then
		objReg.createKey hive, regKey
	End If
	

	&#x27;only update file-specific data if not installed
	If Not isInstalled Then
		publisher = GetPublisher(strPath, strProc)
		objReg.SetStringValue hive, regKey, &quot;Publisher&quot;, publisher
		objReg.SetStringValue hive, regKey, &quot;Version&quot;, version
		objReg.SetStringValue hive, regKey, &quot;Description&quot;, fullName
		objReg.SetStringValue hive, regKey, &quot;Path&quot;, strPath
		objReg.SetStringValue hive, regKey, &quot;Process&quot;, strProc
	End If
		
	&#x27;always update first&#x2F;last data	
	Dim strFirstStart, strLastStart
	&#x27;Get &quot;First Start&quot;, compare value
	objReg.GetStringValue hive, regKey, &quot;First Start&quot;, strFirstStart
	If IsNull(strFirstStart) Then
		objReg.SetStringValue hive, regKey, &quot;First Start&quot;, strDate
	Else
		&#x27;Check if first start value needs to be replaced
		diff = DateDiff(&quot;d&quot;, strFirstStart, strDate)
		If diff &lt; 0 Then
			objReg.SetStringValue hive, regKey, &quot;First Start&quot;, strDate
		End If
	End If
	
	&#x27;Get &quot;Last Start&quot;, compare value
	objReg.GetStringValue hive, regKey, &quot;Last Start&quot;, strLastStart
	If IsNull(strLastStart) Then
		objReg.SetStringValue hive, regKey, &quot;Last Start&quot;, strDate
	Else
		&#x27;Check if first start value needs to be replaced
		diff = DateDiff(&quot;d&quot;, strLastStart, strDate)
		If diff &gt; 0 Then
			objReg.SetStringValue hive, regKey, &quot;Last Start&quot;, strDate
		End If
	End If
	
	&#x27; record the number of times seen, if enabled
	If recordUsageStats Then
		
		&#x27; Assuming the usual time that this sensor runs is once every 5 minutes,
		&#x27; never record and increment usage stats more often than once every 4
		&#x27; minutes.  This stops us from recording an increment more often, in 
		&#x27; the case that someone uses the sensor in some other question
		objReg.GetStringValue hive, regKey, &quot;LastStatUpdate&quot;, strLastUpdate
		
		bRecordUpdate = False
		If IsNull(strLastUpdate) Or IsEmpty(strLastUpdate) Then 
			bRecordUpdate = True
		Else 
			intSecondsPast = DateDiff(&quot;s&quot;, CDate(strLastUpdate), Now())
			
			&#x27; allow the update if its very close to 5 minutes
			If(intSecondsPast &gt;= 270) Then 
				bRecordUpdate = True
			End If
		End If
		
		If bRecordUpdate Then 
			&#x27; key for usage stats is month-day-year
			strUsageKey = Month(Now) &amp; &quot;-&quot; &amp; Year(Now) &amp; &quot;-Usage&quot;
			objReg.GetDWORDValue hive, regKey, strUsageKey, intNumSeen
			
			If IsNull(intNumSeen) Or IsEmpty(intNumSeen) Then
				intNumSeen = 0
			End If
			
			intNumSeen = intNumSeen + 1
			
			objReg.SetDWORDValue hive, regKey, strUsageKey, intNumSeen
			objReg.SetStringValue hive, regKey, &quot;LastStatUpdate&quot;, CStr(Now())
		End If
	End If 
	
End Function


Function ArrayContains(arr, str)
	For Each obj In arr 
		If obj = str Then
			ArrayContains = True
			Exit Function
		End If
	Next
	ArrayContains = False
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 to 400
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &quot;File description&quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &quot;Description&quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetPublisher(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &quot;Company&quot;)
	GetPublisher = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function WMIDateStringToDate(dtmInstallDate)
   WMIDateStringToDate = CDate(Mid(dtmInstallDate, 5, 2) &amp; &quot;&#x2F;&quot; &amp; _
   Mid(dtmInstallDate, 7, 2) &amp; &quot;&#x2F;&quot; &amp; Left(dtmInstallDate, 4))
End Function

&#x27;date format is MM&#x2F;DD&#x2F;YYYY
function GetDaysOld(strDate)
	patternDate = CDate( strDate )
	today = CDate( Month(Now) &amp; &quot;&#x2F;&quot; &amp; Day(Now) &amp; &quot;&#x2F;&quot; &amp; Year(Now))
	GetDaysOld = DateDiff(&quot;d&quot;, patternDate, today)
End Function

Function GetTaniumRegistryPath
&#x27;GetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

    Dim objShell
    Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
      
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
    keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
    keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
    strFoundTaniumRegistryPath = keyNativePath
 
    If strPath = &quot;&quot; Then
        &#x27; Could not find 32-bit mode path, checking Wow6432Node
        On Error Resume Next
        strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
        On Error Goto 0
        strFoundTaniumRegistryPath = keyWoWPath
    End If
    
    If Not strPath = &quot;&quot; Then
        GetTaniumRegistryPath = strFoundTaniumRegistryPath
    Else
        GetTaniumRegistryPath = False
        WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
    End If
End Function &#x27;GetTaniumRegistryPath

Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Version</name>
                <hidden_flag>0</hidden_flag>
                <result_type>2</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Process Name</name>
                <hidden_flag>1</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data>
            <meta_data_item>
                <name>TANIUMCONTENT_buildtools.sensors.disableMaxAgeWarning</name>
                <value>true</value>
                <admin_flag>0</admin_flag>
            </meta_data_item>
        </meta_data>
    </sensor>
    <sensor>
        <name>Non-Approved Established Connections</name>
        <what_hash>1509255291</what_hash>
        <category>Network</category>
        <description>Any established connections currently being made from a process that is not allowed or to a destination that is not allowed.  This multi-column Sensor displays the process responsible for the connection, the display name of the process (if available), and the target IP Address and port.  Processes and IP ranges can be excluded in the Sensor definition.
Example: chrome.exe | Google Chrome | 173.194.79.99:80</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Non-Approved Established Connections
&#x27;========================================

&#x27;Option Explicit

Dim showProcess, showPort

showProcess = True
alwaysShowRemotePort = False
alwaysShowLocalPort = False

Dim strcommand, results, excludeProcesses, excludeSubnets, excludeListenPorts, excludeRemotePorts, taniumDebug, excludeProcessesFilePath, excludeSubnetsFilePath
Dim strSep : strSep = &quot;|&quot;
excludeProcessesFilePath = GetTaniumDir(&quot;Tools\IR&quot;) &amp; &quot;excluded-processes.dat&quot;
excludeSubnetsFilePath = GetTaniumDir(&quot;Tools\IR&quot;) &amp; &quot;excluded-subnets.dat&quot;

&#x27; This is a multi-column sensor that looks like:
&#x27;Process|Name|Target IP

Dim objFSO : Set objFSO = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
If objFSO.FileExists(excludeProcessesFilePath) Then
	&#x27;exclude processes file exists - read from file
	excludeProcesses = LoadDATFileAsArray(excludeProcessesFilePath)
Else
	&#x27;exclude processes file doesn&#x27;t exist - specify processes below
	excludeProcesses = &quot;TaniumClient.exe,TaniumReceiver.exe,TaniumZoneServer.exe&quot;
	&#x27;excludeProcesses = &quot;chrome.exe&quot;
	&#x27;excludeProcesses = &quot;iexplore.exe&quot;
	&#x27;excludeProcesses = &quot;chrome.exe, iexplore.exe&quot;
	&#x27;excludeProcesses = &quot;trillian.exe&quot;
	excludeProcesses = Split(LCase(excludeProcesses), &quot;,&quot;)
End If 

If objFSO.FileExists(excludeSubnetsFilePath) Then
	&#x27;exclude subnets file exists - read from file
	excludeSubnets = LoadDATFileAsArray(excludeSubnetsFilePath)
	&#x27;WScript.Echo &quot;Using excludesubnets file&quot;
Else
	&#x27;exclude subnets file doesn&#x27;t exist - specify subnets below
	excludeSubnets = &quot;127.0.0.0:255.255.255.0&quot;
	&#x27;excludeSubnets = &quot;72.14.213.0:255.255.255.0,74.125.223.0:255.255.255.0-74.125.225.0:255.255.255.0,204.79.197.0&#x2F;24&quot;
	excludeSubnets = Split(excludeSubnets, &quot;,&quot;)
End If 

&#x27;iterate through excludedSubnets, converting any CIDR expressions to ip:mask
For item = 0 To UBound(excludeSubnets)
	If InStr(excludeSubnets(item),&quot;&#x2F;&quot;) Then
		a = Split(excludeSubnets(item), &quot;&#x2F;&quot;)
		excludeSubnets(item) = a(0) &amp; &quot;:&quot; &amp;  MaskLengthToIP(a(1))
	End If 
Next 

excludeListenPorts = &quot;17472&quot;
&#x27; excludeListenPorts = &quot;17472,80,443&quot;

excludeRemotePorts = &quot;17472&quot;
&#x27; excludeRemotePorts = &quot;17472,80,443&quot;

taniumDebug = False

excludeListenPorts = Split(excludeListenPorts, &quot;,&quot;)
excludeRemotePorts = Split(excludeRemotePorts, &quot;,&quot;)

Set listeningPorts = CreateObject(&quot;Scripting.Dictionary&quot;)

strComputer = &quot;.&quot;
Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;)  
query = &quot;select name, executablepath, processId from win32_process&quot;
Set colResults = objWMIService.ExecQuery(query)

&#x27;dictionary for process-app pairs
Set processes = CreateObject(&quot;Scripting.Dictionary&quot;)

For Each result In colResults 
	processId = CStr(result.ProcessId)
	processPath = result.ExecutablePath
	processes.Add processId, result.Name &amp; &quot;,&quot; &amp; processPath &#x27; tie IDs to exes,path - split later
Next

&#x27; unlike established connections, shows connections in all states
strcommand = &quot;cmd &#x2F;c netstat -aon -p TCP | find &quot; &amp; Chr(34) &amp; &quot;TCP&quot; &amp; Chr(34)

Set objShell = CreateObject(&quot;WScript.Shell&quot;)
Set objScriptExec = objShell.Exec (strCommand)
strNSResults = LCase(objScriptExec.StdOut.ReadAll)

results = Split(strNSResults, vbCrLf)
j = 0

For Each line In results
	line = cleanWhitespace(Trim(line))
	
	lineResults = Split(line)
	i = 0
	Dim strPort, strPid, strConnectionState, strForeignIP, strApp
	For Each word In lineResults
		If i = 0 Then
			strProtocol = word   
		ElseIf i = 1 Then
			strLocalIP = word
		ElseIf i = 2 Then
			strForeignIP = word
		ElseIf i = 3 Then
			strConnectionState = word
		ElseIf i = 4 Then
			strPid = word
		End If
		
		i = i + 1
	Next
	&#x27;Recording all listen ports.  Note that this happens to take advanage of the fact that listen ports
	&#x27;are always listed first in the output
	strLocalPort = -1
	strForeignPort = -1
	
	arrTemp = Split(strLocalIP, &quot;:&quot;)
	If UBound(arrTemp) = 1 Then
		strLocalPort = arrTemp(1)
	End If
	arrTemp = Split(strForeignIP, &quot;:&quot;)
	If UBound(arrTemp) = 1 Then
		strForeignPort = arrTemp(1)
	End If
	
	If strConnectionState = &quot;listening&quot; Then 
		If Not listeningPorts.Exists(strLocalPort) Then
			listeningPorts.Add strLocalPort, True
		End If
	End If
	
	&#x27;DO NOT INCLUDE EXCLUDED APPS
   If processes.Exists(strPid) Then
       strAppEntry = processes.Item(strPid) &#x27; looks like process.exe, Process Path
       arrAppEntry = Split(strAppEntry,&quot;,&quot;)
       strAppExe = arrAppEntry(0)
       strAppPath = arrAppEntry(1)
   Else
       strAppExe = &quot;Unknown&quot;
       strAppPath = &quot;Unknown&quot;
   End If
	
	isNotExcludedApp = Not(ContainedInArray(LCase(strAppExe), excludeProcesses))
	
	&#x27;DO NOT INCLUDE EXCLUDED SUBNETS
	isNotExcludedSubnet = Not(ContainedInSubnet(strForeignIP, excludeSubnets))
	
	&#x27;DO NOT INCLUDE EXCLUDED LISTEN PORTS
	isNotExcludedListenPort = Not(ContainedInArray(strLocalPort, excludeListenPorts))
	
	&#x27;DO NOT INCLUDE EXCLUDED REMOTE PORTS
	isNotExcludedRemotePort = Not(ContainedInArray(strForeignPort, excludeRemotePorts))
	
	If Not(IsEmpty(strAppExe)) _
		And isNotExcludedApp _ 
		And isNotExcludedSubnet _
		And isNotExcludedListenPort _
		And IsNotExcludedRemotePort _
		And strConnectionState = &quot;established&quot; Then
		
		If Not alwaysShowRemotePort Then
			&#x27; We should remove the remote port, only if this is an incoming connection to a service
			&#x27; on this machine
			If listeningPorts.Exists(strLocalPort) Then 
				arrTemp = Split(strForeignIP, &quot;:&quot;)
				strForeignIP = arrTemp(0)
			End If
		End If
		
		If Not alwaysShowLocalPort Then
			&#x27; We should remove the local port, only if this is not an incoming connection to a service
			&#x27; on this machine
			If Not listeningPorts.Exists(strLocalPort) Then 
				arrTemp = Split(strLocalIP, &quot;:&quot;)
				strLocalIP = arrTemp(0)
			End If
		End If
		
		If showProcess Then
			results(j) = strAppExe &amp; strSep &amp; ProcessNameToApplicationName(strAppPath,strAppExe) &amp; strSep &amp; strForeignIp
		Else
			results(j) = strSep &amp; strSep &amp; strForeignIp
		End If	
	Else
		If taniumDebug Then WScript.Echo &quot;      excluded: &quot; &amp; strApp &amp; &quot; &quot; &amp; strForeignIP
		results(j) = &quot;&quot;   
	End If 
	
	j = j + 1
Next

results = RemDups(results)

If UBound(results) &lt; 1 Then
	If GetLocale() &lt;&gt; 1033 Then
		WScript.Echo &quot;English Language OS Required&quot;
	End If
End If

For Each result In results 
	WScript.Echo result
Next

WScript.Quit

Function LoadDATFileAsArray(strFilePath)
	Dim objFSO : Set objFSO = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	Dim responseDict : Set responseDict = CreateObject(&quot;Scripting.Dictionary&quot;)
		
	If objFSO.FileExists(strFilePath) Then
        Dim objDatFile, strLine
        Set objDatFile = objFso.OpenTextFile(strFilePath, 1)
        
        &#x27;read in all entries, one per line
        Do While objDatFile.AtEndOfStream &lt;&gt; True
            strLine = LCase(Trim(objDatFile.ReadLine))
			If strLine &lt;&gt; &quot;&quot; And Left(strLine, 1) &lt;&gt; &quot;&#x27;&quot; And Not responseDict.Exists(strLine) Then 
				responseDict.Add strLine, True
			End If
        Loop
    End If
	LoadDATFileAsArray = responseDict.Keys
End Function

Function GetTaniumDir(strSubDir)
&#x27;GetTaniumDir with GeneratePath, works in x64 or x32
&#x27;looks for a valid Path value
	
	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;HKLM\Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;HKLM\Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
  	End If
  	
  	If Not strPath = &quot;&quot; Then
		If strSubDir &lt;&gt; &quot;&quot; Then
			strSubDir = &quot;\&quot; &amp; strSubDir
		End If	
	
		Dim fso
		Set fso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
		If fso.FolderExists(strPath) Then
			If Not fso.FolderExists(strPath &amp; strSubDir) Then
				&#x27;&#x27;Need to loop through strSubDir and create all sub directories
				GeneratePath strPath &amp; strSubDir, fso
			End If
			GetTaniumDir = strPath &amp; strSubDir &amp; &quot;\&quot;
		Else
			&#x27; Specified Path doesn&#x27;t exist on the filesystem
			WScript.Echo &quot;Error: &quot; &amp; strPath &amp; &quot; does not exist on the filesystem&quot;
			GetTaniumDir = False
		End If
	Else
		WScript.Echo &quot;Error: Cannot find Tanium Client path in Registry&quot;
		GetTaniumDir = False
	End If
End Function &#x27;GetTaniumDir

Function GeneratePath(pFolderPath, fso)
	GeneratePath = False

	If Not fso.FolderExists(pFolderPath) Then
		If GeneratePath(fso.GetParentFolderName(pFolderPath), fso) Then
			GeneratePath = True
			Call fso.CreateFolder(pFolderPath)
		End If
	Else
		GeneratePath = True
	End If
End Function &#x27;GeneratePath

Function ContainedInSubnet(str, arr)
   Dim strIp, strSubnet, strMask
   temp = Split(str, &quot;:&quot;)
   strIp = temp(0)

   For Each item In arr
      If InStr(item, &quot;-&quot;) Then &#x27;Subnet range
         temp = Split(item, &quot;-&quot;)
         lower = Split(temp(0), &quot;:&quot;)
         upper = Split(temp(1), &quot;:&quot;)
         lowerSubnet = Trim(lower(0))
         lowerMask = Trim(lower(1))
         upperSubnet = Trim(upper(0))
         upperMask = Trim(upper(1))
         
         If StringToBinary(strIp) &gt; StringToBinary(Subnet(lowerSubnet, lowerMask)) _
            And StringToBinary(strIp) &lt; StringToBinary(Subnet(upperSubnet, upperMask)) Then
            ContainedInSubnet = True
            Exit Function
         End If 
      Else &#x27;Single subnet
         parts = Split(item, &quot;:&quot;)
         strSubnet = Trim(parts(0))
         strMask = Trim(parts(1))
         If Subnet(strIp, strMask) = Subnet(strSubnet, strMask) Then
            ContainedInSubnet = True
            Exit Function
         End If
      End If 
   Next
   ContainedInSubnet = False
End Function

Function ContainedInArray(str, arr)
   For Each item In arr 
      If str = Trim(item) Then
         ContainedInArray = True
         Exit Function
      End If   
   Next
   ContainedInArray = False
End Function

Function cleanWhitespace(strStarter)
	intStarter = Len(strStarter)
	For i = intStarter To 2 Step -1
		strChars = Space(i)
		strStarter = Replace(strStarter, strChars, &quot; &quot;)
	Next
	cleanWhitespace = strStarter
End Function

Function RemDups(ByVal anArray)
	Dim d, item, thekeys
	Set d = CreateObject(&quot;Scripting.Dictionary&quot;)
	d.removeall
	d.CompareMode = 0
	For Each item In anArray
		If Len(item) &gt; 0 Then
			If Not d.Exists(item) Then d.Add item, item
		End If
	Next
	thekeys = d.keys
	Set d = Nothing
	RemDups = thekeys
End Function

Function Subnet(strAddress, strMask)
	intSubnetLength = SubnetLength(strMask)
	Subnet = BinaryToString(Left(StringToBinary(strAddress), intSubnetLength) &amp; String(32 - intSubnetLength, &quot;0&quot;))
End Function

Function SubnetLength(strMask)
	strMaskBinary = StringToBinary(strMask)
	SubnetLength = Len(Left(strMaskBinary, InStr(strMaskBinary, &quot;0&quot;) - 1))
End Function

Function BinaryToString(strBinary)
	For intOctetPos = 1 To 4
		strOctetBinary = Right(Left(strBinary, intOctetPos * 8), 8)
		intOctet = 0
		intValue = 1
		For intBinaryPos = 1 To Len(strOctetBinary)
			If Left(Right(strOctetBinary, intBinaryPos), 1) = &quot;1&quot; Then intOctet = intOctet + intValue
			intValue = intValue * 2
		Next
		If BinaryToString = Empty Then BinaryToString = CStr(intOctet) Else BinaryToString = BinaryToString &amp; &quot;.&quot; &amp; CStr(intOctet)
	Next
End Function

Function StringToBinary(strAddress)
	objAddress = Split(strAddress, &quot;.&quot;, -1)
	For Each strOctet In objAddress
		intOctet = CInt(strOctet)
		strOctetBinary = &quot;&quot;
		For x = 1 To 8
			If intOctet Mod 2 &gt; 0 Then
				strOctetBinary = &quot;1&quot; &amp; strOctetBinary
			Else
				strOctetBinary = &quot;0&quot; &amp; strOctetBinary
			End If
			intOctet = Int(intOctet &#x2F; 2)
		Next
		StringToBinary = StringToBinary &amp; strOctetBinary
	Next
End Function

Function ProcessNameToApplicationName(strExecutablePath, strExecutableName)
	&#x27; This function will return the full application name of a running executable
	
	Dim fso
	Set fso = WScript.CreateObject(&quot;Scripting.Filesystemobject&quot;)
	
	arrPathParts = Split(strExecutablePath,&quot;\&quot;)
	
	If UBound(arrPathParts) &lt; 0 Then &#x27;can be -1 for no split, such as the System process
		ProcessNameToApplicationName = strExecutableName
		Set fso = Nothing
		Exit Function
	End If
	strExecutable = arrPathParts(UBound(arrPathParts))
	
	If fso.FileExists(strExecutablePath) Then
		Dim strOutput, fileVersion, fileVersionOutput, fullName
		
		Set execFile = fso.GetFile(strExecutablePath)
		fullName = GetDescription(execFile.ParentFolder.Path, strExecutable)
		If Not fullName = &quot;&quot; Then
			ProcessNameToApplicationName = fullName
		Else
			ProcessNameToApplicationName = strExecutableName
		End If
	Else &#x27; file doesn&#x27;t exist or inaccessible
		ProcessNameToApplicationName = strExecutableName
	End If
	
End Function &#x27;ProcessNameToApplicationName

Function GetDescription(folderPath, fileName)
	descIndex = GetAttributeIndex(folderPath, &quot;File description&quot;)
	If IsEmpty(descIndex) Then
		descIndex = GetAttributeIndex(folderPath, &quot;Description&quot;)
	End If
	GetDescription = GetFileProperty(folderPath, fileName, descIndex)
End Function

Function GetFileProperty(folderPath, fileName, fileProperty)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	GetFileProperty = objFolder.GetDetailsOf(objFolder.Parsename(fileName), fileProperty)
End Function

Function GetAttributeIndex(folderPath, attrTarget)
	Set objShell = CreateObject(&quot;Shell.Application&quot;)
	Set objFolder = objShell.Namespace(folderPath)
	For i = 0 To 50
		attrName = objFolder.GetDetailsOf(objFolder.Items, i)
		If LCase(attrName) = LCase(attrTarget) Then
			GetAttributeIndex = i
			Exit Function
		End If
	Next
	
End Function

Function MaskLengthToIP(intMask)
  &#x27; Converts a mask length to the decimal format mask
 
  Dim arrOctets(3)
  Dim intFullOctets : intFullOctets = (intMask - (intMask Mod 8)) &#x2F; 8
  Dim i
  For i = 0 To (intFullOctets - 1)
    arrOctets(i) = &quot;255&quot;
  Next
 
  Dim intPartialOctetLen : intPartialOctetLen = intMask Mod 8
  Dim j
  If intPartialOctetLen &gt; 0 Then
    Dim intOctet
    For j = 0 To (intPartialOctetLen - 1)
      intOctet = intOctet + 2^(7 - j)
    Next
    arrOctets(i) = intOctet : i = i + 1
  End If
 
  For j = i To 3
    arrOctets(j) = &quot;0&quot;
  Next
 
  MaskLengthToIP = Join(arrOctets, &quot;.&quot;)
End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;bash
#
#
# This sensor will attempt to read in two files: 
#       &#x2F;Tools&#x2F;IR&#x2F;excluded-processes.dat
#       &#x2F;Tools&#x2F;IR&#x2F;excluded-subnets.dat
#
# The files contain a line seperated list of approved processes or subnets (10.10.10.0&#x2F;24)
#
# The sensor will then enumerate established network connections that do not match the exclude list
#
# The final return vale is a pipe delimited string of Process Name| Hash | Path | Remote IP and Port 
#

if ! which lsof &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 ; then
    echo lsof must be installed to use this sensor
    exit 
fi

if [ ! -d &quot;.&#x2F;tmp&quot; ]; then
  mkdir .&#x2F;tmp
  chmod 0700 .&#x2F;tmp
fi

#tmpfile=.&#x2F;tmp&#x2F;calcnet.$$.awk
tmpfile=.&#x2F;tmp&#x2F;$$.awk

cat &gt; &quot;$tmpfile&quot; &lt;&lt;EOF
#!&#x2F;usr&#x2F;bin&#x2F;awk  -f

BEGIN {
    tmpr[&quot;128.0.0.0&quot;]=1
    tmpr[&quot;192.0.0.0&quot;]=2
    tmpr[&quot;224.0.0.0&quot;]=3
    tmpr[&quot;240.0.0.0&quot;]=4
    tmpr[&quot;248.0.0.0&quot;]=5
    tmpr[&quot;252.0.0.0&quot;]=6
    tmpr[&quot;254.0.0.0&quot;]=7
    tmpr[&quot;255.0.0.0&quot;]=8
    tmpr[&quot;255.128.0.0&quot;]=9
    tmpr[&quot;255.192.0.0&quot;]=10
    tmpr[&quot;255.224.0.0&quot;]=11
    tmpr[&quot;255.240.0.0&quot;]=12
    tmpr[&quot;255.248.0.0&quot;]=13
    tmpr[&quot;255.252.0.0&quot;]=14
    tmpr[&quot;255.254.0.0&quot;]=15
    tmpr[&quot;255.255.0.0&quot;]=16
    tmpr[&quot;255.255.128.0&quot;]=17
    tmpr[&quot;255.255.192.0&quot;]=18
    tmpr[&quot;255.255.224.0&quot;]=19
    tmpr[&quot;255.255.240.0&quot;]=20
    tmpr[&quot;255.255.248.0&quot;]=21
    tmpr[&quot;255.255.252.0&quot;]=22
    tmpr[&quot;255.255.254.0&quot;]=23
    tmpr[&quot;255.255.255.0&quot;]=24
    tmpr[&quot;255.255.255.128&quot;]=25
    tmpr[&quot;255.255.255.192&quot;]=26
    tmpr[&quot;255.255.255.224&quot;]=27
    tmpr[&quot;255.255.255.240&quot;]=28
    tmpr[&quot;255.255.255.248&quot;]=29
    tmpr[&quot;255.255.255.252&quot;]=30
    tmpr[&quot;255.255.255.254&quot;]=31
    tmpr[&quot;255.255.255.255&quot;]=32

    tmp[1]=&quot;128.0.0.0&quot;
    tmp[2]=&quot;192.0.0.0&quot;
    tmp[3]=&quot;224.0.0.0&quot;
    tmp[4]=&quot;240.0.0.0&quot;
    tmp[5]=&quot;248.0.0.0&quot;
    tmp[6]=&quot;252.0.0.0&quot;
    tmp[7]=&quot;254.0.0.0&quot;
    tmp[8]=&quot;255.0.0.0&quot;
    tmp[9]=&quot;255.128.0.0&quot; 
    tmp[10]=&quot;255.192.0.0&quot;
    tmp[11]=&quot;255.224.0.0&quot;
    tmp[12]=&quot;255.240.0.0&quot;
    tmp[13]=&quot;255.248.0.0&quot;
    tmp[14]=&quot;255.252.0.0&quot;
    tmp[15]=&quot;255.254.0.0&quot;
    tmp[16]=&quot;255.255.0.0&quot;
    tmp[17]=&quot;255.255.128.0&quot;
    tmp[18]=&quot;255.255.192.0&quot;
    tmp[19]=&quot;255.255.224.0&quot;
    tmp[20]=&quot;255.255.240.0&quot;
    tmp[21]=&quot;255.255.248.0&quot;
    tmp[22]=&quot;255.255.252.0&quot;
    tmp[23]=&quot;255.255.254.0&quot;
    tmp[24]=&quot;255.255.255.0&quot;
    tmp[25]=&quot;255.255.255.128&quot;
    tmp[26]=&quot;255.255.255.192&quot;
    tmp[27]=&quot;255.255.255.224&quot;
    tmp[28]=&quot;255.255.255.240&quot;
    tmp[29]=&quot;255.255.255.248&quot;
    tmp[30]=&quot;255.255.255.252&quot;
    tmp[31]=&quot;255.255.255.254&quot;
    tmp[32]=&quot;255.255.255.255&quot;
    split(ip,n,&#x2F;\.&#x2F;)
    split(net,netandmask,&#x2F;\&#x2F;&#x2F;)
    network=netandmask[1]
    if (mask == &quot;&quot;) {
        mask=netandmask[2]
        mask=tmp[mask]
    }
    split(mask,m,&#x2F;\.&#x2F;)
    for (i=1; i&lt;=3; i++) calcnet=sprintf(&quot;%s%d.&quot;, calcnet,awkand(n[i],m[i]))
    calcnet=sprintf(&quot;%s%d&quot;, calcnet,awkand(n[4],m[4]))
    if (net == &quot;&quot;) {
        print calcnet&quot;&#x2F;&quot;tmpr[mask]
    } else {
        if (calcnet == network) {
            printf &quot;same net&quot;
        } else {
            printf &quot;different net&quot;
        }
    }
}

function awkand(a,b,  k,r) {
    k = 1
    r = 0
    a = int(a + 0.5) # round to nearest integer
    b = int(b + 0.5)
    while ( a + b ) {
        if ( a%2 &amp;&amp; b%2 ) r += k
        a = int(a &#x2F; 2)
        b = int(b &#x2F; 2)
        k *= 2
    }
    return r
}
EOF
chmod 0500 &quot;$tmpfile&quot;

################################
# End of AWK Scripts           #
################################
TOS=$(uname)

if [ &quot;$HASHTYPE&quot; = &quot;md5&quot; ]; then
    if [ &quot;$TOS&quot; = &quot;Darwin&quot; ]; then
        tanium_dir=&quot;&#x2F;Library&#x2F;Tanium&#x2F;TaniumClient&quot;
    else
        tanium_dir=&quot;&#x2F;opt&#x2F;Tanium&#x2F;TaniumClient&quot;
    fi
fi
 
tanium_processes=`ps -ef | grep &quot;[T]aniumClient&quot; | awk &#x27;{print $2}&#x27; | tr &#x27;\n&#x27; &#x27; &#x27;`
excl_proc_path=&quot;$tanium_dir&quot;&quot;&#x2F;Tools&#x2F;IR&#x2F;excluded-processes.dat&quot;
excl_sub_path=&quot;$tanium_dir&quot;&quot;&#x2F;Tools&#x2F;IR&#x2F;excluded-subnets.dat&quot;

tanium_port=$(cat &quot;$tanium_dir&quot;&quot;&#x2F;TaniumClient.ini&quot; | grep -i serverport | awk -F &quot;=&quot; &#x27;{print $2}&#x27;)
if [ -z &quot;$tanium_port&quot; ]; then
    tanium_port=&quot;17472&quot;
fi

# Get list of estblished processes
Connections=`lsof -iTCP -p ^$PPID  -P +c 15 -n -w`
echo &quot;$Connections&quot; | grep -v &quot;COMMAND&quot; | grep -i \(established\) | while read line
do

    # Parse line
    # OSX has fixed width name field, but there can be spaces in it e.g. &#x27;Google Chrom&#x27;
    proc_name=`echo &quot;$line&quot; | awk &#x27;{print $1}&#x27;`
    # The rest of the stuff is easier to parse if we count fields from the end of the line, after the 
    # first field I don&#x27;t think any of the others have spaces.
    PID=`echo &quot;$line&quot; | awk &#x27;pidfield = NF-8 {print $pidfield}&#x27;`
    conn=`echo &quot;$line&quot; | awk &#x27;confield = NF-1 {print $confield}&#x27;`

    from=`echo &quot;$conn&quot; | awk -F&#x27;-&gt;&#x27; &#x27;{print $1}&#x27;`
    fromip=`echo &quot;$from&quot; | awk &#x27;BEGIN{FS=OFS=&quot;:&quot;}{$NF=&quot;&quot;; NF--; print}&#x27;`
    fromport=`echo &quot;$from&quot; | awk -F: &#x27;{print $NF}&#x27;`
    to=`echo &quot;$conn&quot; | awk -F&#x27;-&gt;&#x27; &#x27;{print $2}&#x27;`
    toip=`echo &quot;$to&quot; | awk &#x27;BEGIN{FS=OFS=&quot;:&quot;}{$NF=&quot;&quot;; NF--; print}&#x27;`
    toport=`echo &quot;$to&quot; | awk -F: &#x27;{print $NF}&#x27;`
   if [ &quot;$fromport&quot; = &quot;$tanium_port&quot; ]; then
       continue
  elif [ &quot;$toport&quot; = &quot;$tanium_port&quot; ]; then
       continue
    else
        found=0
        if [ -e &quot;$excl_sub_path&quot; ]; then
            IFS=$&#x27;\n&#x27;
            for subnet in `cat &quot;$excl_sub_path&quot;`; do
                #Check which format line is 1.1.1.0&#x2F;24 or 1.1.1.0:255.255.255.0
                if [ `echo &quot;$subnet&quot; | grep : ` ]; then
                    ip_addr=`echo &quot;$subnet&quot; | cut -f1 -d&#x27;:&#x27;`
                    mask=`echo &quot;$subnet&quot; | cut -f2 -d&#x27;:&#x27;`
                    #Convert netmask to CIDR for matching 
                    to_cidr=`.&#x2F;$tmpfile -v ip=&quot;$ip_addr&quot; -v mask=&quot;$mask&quot;` 
                    sub_test=`.&#x2F;$tmpfile -v ip=&quot;$toip&quot; -v net=&quot;$to_cidr&quot;`
                else
                    sub_test=`.&#x2F;$tmpfile -v ip=&quot;$toip&quot; -v net=&quot;$subnet&quot;`
                fi

                if [ &quot;$sub_test&quot; = &quot;same net&quot; ]; then
                    found=1
                fi
            done
        fi
        if  [ &quot;$found&quot; -eq 0 ]; then
              # Get the executable file behind the PID
            if [ &quot;$TOS&quot; = &quot;Darwin&quot; ]; then
                # OSX sorta usually stores its ps executables in comm=
                TFILE=&quot;`ps -o comm= -p $PID`&quot;
                if ! [[ &quot;$TFILE&quot; == *&quot;&#x2F;&quot;* ]]; then
                  TFILE=&quot;`lsof -p $PID -w | awk -F&#x27; &#x27; &#x27;{print $9}&#x27; | grep -i &quot;$proc_name&quot; | head -1`&quot;
                    if ! [ -e &quot;$TFILE&quot; ]; then
                        TFILE=&quot;Not Found&quot;
                  fi
                fi
            else
                # Linux stores its ps command lines in &#x2F;proc symlinks
                if [ -e &quot;&#x2F;proc&#x2F;$PID&#x2F;exe&quot; ]; then
                  TFILE=&quot;$(ls -l &#x2F;proc&#x2F;$PID&#x2F;exe | awk -F &#x27; -&gt; &#x27; &#x27;{print $2}&#x27;)&quot;
                else
                    continue
                fi
            fi
            fname=$(echo &quot;$TFILE&quot; | awk -F&#x27;&#x2F;&#x27; &#x27;{print tolower($NF)}&#x27;)

            if [ -e &quot;$excl_proc_path&quot; ]; then
                IFS=$&#x27;\n&#x27;
                for proc_path in `cat &quot;$excl_proc_path&quot;`; do
                    lcas_proc_path=`echo &quot;$proc_path&quot; | tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;`
                    if [ &quot;$lcas_proc_path&quot; = &quot;$fname&quot; ]; then
                        found=1
                    fi
                done
            fi
            if [ &quot;$found&quot; -eq 0 ]; then
                #Output Example: #&quot;TaniumClient&quot; &quot;ffd7f386b2585149950928bf19812df8&quot;  &quot;&#x2F;opt&#x2F;Tanium&#x2F;TaniumClient&#x2F;TaniumClient&quot; &quot;172.18.1.108:17472&quot; 
                printf &quot;%s|%s|%s:%s&quot;\\n &quot;$TFILE&quot; &quot;$fname&quot; &quot;$toip&quot; &quot;$toport&quot;
            fi
        fi
    fi
done
rm -f &quot;$tmpfile&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Process</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Target IP</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Running Processes</name>
        <what_hash>4142232197</what_hash>
        <category>Applications</category>
        <description>Provides a list of processes currently running on the client machine.
Example: svchost.exe</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>,</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>1</sensor_type>
                <os>0</os>
                <query>select Caption from win32_process</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;bash

# get all processes (excluding this one and its children)
for PID in $( ps -eo user,pid,ppid,comm | grep -v &quot; $$ &quot; | tail -n +2 |awk &#x27;{print $2}&#x27; ); do
  if [ -e &#x2F;proc&#x2F;$PID&#x2F;exe ]; then
    TFILE=&quot;`ls -l &#x2F;proc&#x2F;$PID&#x2F;exe | awk -F &#x27; -&gt; &#x27; &#x27;{ print $2 }&#x27;`&quot;
    [ -s &quot;$TFILE&quot; ]  &amp;&amp; echo &quot;$TFILE&quot; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g;&#x27;
  fi
done
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;bash

# get all processes (excluding this one and its children)
ps -eo user,pid,ppid,comm | grep -v &quot; $$ &quot; | tail -n +2 |awk &#x27;{print $4}&#x27; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g&#x27;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;usr&#x2F;xpg4&#x2F;bin&#x2F;sh

# Only list process in my zone
ZARG=&quot;&quot;
if [ -x &#x2F;usr&#x2F;bin&#x2F;zonename ]; then
  myzone=$(zonename)
  [ -n &quot;$myzone&quot; ] &amp;&amp; ZARG=&quot;-z $myzone&quot;
fi

# get all processes (excluding this one and its children)
ps -eo user,pid,ppid,comm $ZARG | grep -v &quot; $$ &quot; | tail +2 |awk &#x27;{print $4}&#x27; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g&#x27;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# get all processes (excluding this one and its children)
ps -eo user,pid,ppid,comm | grep -v &quot; $$ &quot;  | tail +2 | awk &#x27;{print $4}&#x27; | sed -e &#x27;s&#x2F;^-&#x2F;&#x2F;; s&#x2F;.*[&#x2F;]&#x2F;&#x2F;g&#x27;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns/>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Custom Tags</name>
        <what_hash>3004497651</what_hash>
        <category>Tags</category>
        <description>Any specified custom tags that have been set for this machine.  See the Custom Tagging Dashboard.
Example:  Development, Test-Machines</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>,</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Custom Tags
&#x27;========================================

Dim reg
Set reg=GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv&quot;)
const HKLM = &amp;H80000002

Dim strRegKey
strRegKey = GetTaniumRegistryPath() &amp; &quot;\Sensor Data\Tags&quot;

If Not RegKeyExists(reg, HKLM, strRegKey) Then
	reg.createKey HKLM, strRegKey
End If

reg.enumValues HKLM, strRegKey, arrValues

If Not IsNull(arrValues) Then
	For Each strValueName In arrValues
		WScript.Echo strValueName
	Next
Else
	WScript.Echo &quot;[No Tags]&quot;
End If


Function RegKeyExists(objRegistry, sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function


Function GetTaniumRegistryPath
&#x27;GetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &quot;&quot; Then
  		GetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		GetTaniumRegistryPath = False
  		WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
  	End If
End Function &#x27;GetTaniumRegistryPath</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ ! -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

TAGFILE=&quot;Tools&#x2F;CustomTags.txt&quot;

if [ -r &quot;$TAGFILE&quot; ] &amp;&amp; [ -s &quot;$TAGFILE&quot; ]; then
  cat &quot;$TAGFILE&quot;
else
	echo &#x27;[No Tags]&#x27;
fi
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns/>
        <meta_data/>
    </sensor>
    <sensor>
        <name>User Sessions</name>
        <what_hash>75018363</what_hash>
        <category>User</category>
        <description>Provides the terminal services session information, similar to what is available from the &quot;query session&quot; command.
Example:console|Administrator|1|Active||</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; User Sessions
&#x27;========================================

&#x27; Returns information about the current sessions on the local machine
&#x27; 

Option Explicit

On error resume next
Dim strValue, myRegExp, objShell, objExec, strLine, objSplit

Set myRegExp = New RegExp
myRegExp.IgnoreCase = True
myRegExp.Global = True
myRegExp.Pattern = &quot;\s{2,}&quot;

Set objShell = WScript.CreateObject(&quot;WScript.Shell&quot;)
If Is64() Then 
	Set objExec = objshell.exec(&quot;cmd &#x2F;c c:\windows\sysnative\qwinsta&quot;)
Else 
	Set objExec = objshell.exec(&quot;cmd &#x2F;c qwinsta&quot;)
End If 

objExec.StdOut.ReadLine()
Do While Not objExec.Stdout.AtEndOfStream
	strLine = myRegExp.Replace(objExec.StdOut.ReadLine(),&quot;|&quot;)

	If InStr(strLine,&quot;rdp&quot;) or InStr(strLine,&quot;console&quot;) then
		If InStr(strLine,&quot;disc&quot;) then
			strLine = &quot;|&quot; &amp; strLine
		End If 
		If InStr(strLine, &quot;console&quot;)&gt;0 And InStr(strLine, &quot;Conn&quot;)&gt;0 Then
		    &#x27; If console line, but no user logged in, add column
			strLine = Replace(strLine, &quot;console|&quot;, &quot;console||&quot;)
		End If
		strLine = replace(strLine,&quot;&gt;&quot;,&quot;&quot;)
		strLine = replace(strLine,&quot; &quot;,&quot;&quot;)
		strLine = replace(strLine,&quot;rdp-tcp|&quot;,&quot;rdp-tcp||&quot;)
		
		objSplit = Split(strLine, &quot;|&quot;)
		If ojbSplit.Count = 4 Then
			strLine = strLine + &quot;|&quot;
		End If 	
			
		WScript.echo strLine
	End if	
Loop 


Function Is64 
	Dim objWMIService, colItems, objItem
	Set objWMIService = GetObject(&quot;winmgmts:\\.\root\CIMV2&quot;)
	Set colItems = objWMIService.ExecQuery(&quot;Select SystemType from Win32_ComputerSystem&quot;)    
	For Each objItem In colItems
		If InStr(LCase(objItem.SystemType), &quot;x64&quot;) &gt; 0 Then
			Is64 = True
		Else
			Is64 = False
		End If
	Next
End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh
who | while read line
do
        name=$(echo &quot;$line&quot; | awk &#x27;{print $2}&#x27;)
        device=$(echo &quot;$line&quot; | awk &#x27;{print $1}&#x27;)
        uid=$(dscl . -list &#x2F;Users uid | egrep &quot;^$name\s+&quot; | awk &#x27;{print $2}&#x27;)
        echo &quot;$device|$name|$uid|Conn|N&#x2F;A|$device&quot;
done
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Session Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>User Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>ID</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>3</column_index>
                <name>State</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>4</column_index>
                <name>Type</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>5</column_index>
                <name>Device</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Service Details</name>
        <what_hash>2384520458</what_hash>
        <category>Applications</category>
        <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Service Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Service Display Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Service Status</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>3</column_index>
                <name>Service Startup Mode</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Service Details</name>
        <what_hash>2384520458</what_hash>
        <category>Applications</category>
        <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Service Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Service Display Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Service Status</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>3</column_index>
                <name>Service Startup Mode</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Service Details</name>
        <what_hash>2384520458</what_hash>
        <category>Applications</category>
        <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Service Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Service Display Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Service Status</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>3</column_index>
                <name>Service Startup Mode</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Service Details</name>
        <what_hash>2384520458</what_hash>
        <category>Applications</category>
        <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Service Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Service Display Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Service Status</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>3</column_index>
                <name>Service Startup Mode</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Running Service</name>
        <what_hash>1497251383</what_hash>
        <category>Applications</category>
        <description>Provides a list of currently running services on the client machine.
Example: DHCP Client</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>,</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>1</sensor_type>
                <os>0</os>
                <query>select Caption from win32_Service where State=&#x27;Running&#x27;</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

if which systemctl &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # Rh7+ SuSE12+
then
        systemctl list-units --type=service 2&gt;&amp;1 |\
        sed -e &#x27;s&#x2F;^\(.*\)\s\s*loaded\s\s*active.*&#x2F;\1&#x2F;&#x27; \
        -e &#x27;s&#x2F;\(.*\)\s\s*loaded\s\s*failed.*$&#x2F;&#x2F;&#x27; 2&gt;&amp;1 | \
         egrep -v &quot;^\s*$|^UNIT|^LOAD|^ACTIVE|^SUB|^JOB|units listed|show all installed unit&quot;
elif which chkconfig &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # Rh5,6
then
        chkconfig --list | grep &quot;`runlevel | awk &#x27;{print $NF}&#x27;`:on&quot; | awk &#x27;{print $1}&#x27;
elif which service &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # Debian uses SysVinit but doesn&#x27;t have chkconfig
then
        service --status-all 2&gt;&amp;1  | egrep &quot;^ \[ \+ \]&quot; | \
        sed &#x27;s&#x2F;^ \[ + \]  \(.*\)$&#x2F;\1&#x2F;&#x27;
elif which initctl &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 # ubuntu, all versions
then
        initctl list 2&gt;&amp;1 |  grep &quot;\&#x2F;running&quot; |\
        sed -e &#x27;s&#x2F;\(.*\) start\&#x2F;\w\w*, process [0-9][0-9]*$&#x2F;\1&#x2F;&#x27; \
        -e &#x27;s&#x2F;\(.*\) start\&#x2F;running$&#x2F;\1&#x2F;&#x27;
else
        echo ERROR: Unable to identify Linux service manager
fi
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

launchctl list | tail -n +2 | awk &#x27;$1 != &quot;-&quot; {print $3}&#x27;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh
svcs | grep -v &quot;^STATE&quot; | awk &#x27;{ print $3 }&#x27; | sed &#x27;s#svc:&#x2F;##g;s&#x2F;:default&#x2F;&#x2F;g&#x27;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh
lssrc -a | grep active | awk &#x27;{ print $1 }&#x27;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns/>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Stopped Service</name>
        <what_hash>3188527889</what_hash>
        <category>Applications</category>
        <description>Returns a list of all services currently stopped on the client machine.
Example: DHCP Client</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>,</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>1</sensor_type>
                <os>0</os>
                <query>select Caption from win32_Service where State=&#x27;Stopped&#x27;</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;bash
first=true
launchctl list | while read line
do
    set -- $line
if ( $first ); 
then
	first=false
else
	if [ &quot;$2&quot; == &quot;0&quot; ]; 
	then
		echo $3
	fi
fi
done
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns/>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Service Details</name>
        <what_hash>2384520458</what_hash>
        <category>Applications</category>
        <description>Details about all running services on the client machine, including name, display name, running status, and startup mode.
Example: MDM | Machine Debug Manager | Running | Auto</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Service Details
&#x27;========================================

getServiceDetails()
WScript.Quit

Function getServiceDetails()
	&#x27;Check to see if Windows Update Service needs to be enabled and&#x2F;or stopped at end
	Dim objWMIService, colComputer, objComputer
	
	Set objWMIService = GetObject(&quot;winmgmts:&quot; &amp;  &quot;{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)  
	Set colServices = objWMIService.ExecQuery (&quot;select DisplayName, State, StartMode from win32_Service&quot;)    
	
	For Each objService in colServices
		strServiceName = objService.Name
		strServiceDisplayName = objService.DisplayName
		strServiceStatus = objService.State
		strServiceMode = objService.StartMode
		WScript.Echo strServiceName &amp; &quot;|&quot; &amp; strServiceDisplayName &amp; &quot;|&quot; &amp; strServiceStatus &amp; &quot;|&quot; &amp; strServiceMode
	Next

End Function</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Linux&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Mac&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on Solaris&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# 
# 

echo &quot;N&#x2F;A on AIX&quot;
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Service Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Service Display Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Service Status</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>3</column_index>
                <name>Service Startup Mode</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
    <sensor>
        <name>Installed Applications</name>
        <what_hash>1511329504</what_hash>
        <category>Applications</category>
        <description>List of the applications and versions of those applications installed on the client machine.
Example: Mozilla Firefox | 16.0.1</description>
        <result_type>1</result_type>
        <qseconds>600</qseconds>
        <ignore_case_flag>1</ignore_case_flag>
        <exclude_from_parse>1</exclude_from_parse>
        <delimiter>|</delimiter>
        <hidden_flag>0</hidden_flag>
        <queries>
            <sensor_query>
                <sensor_type>4</sensor_type>
                <os>0</os>
                <query>&#x27;========================================
&#x27; Installed Applications
&#x27;========================================
&#x27;@INCLUDE=utils&#x2F;SensorRandomization&#x2F;SensorRandomizationFunctions.vbs
&#x27; This sensor will return information in the uninstall areas of the registry.
&#x27; There are two hidden columns which can be filtered on despite the fact that
&#x27; they&#x27;re hidden, and can also feed actions.
&#x27; if the uninstallstring is msi based, it is altered to show the
&#x27; silent uninstall options and marked as &quot;Is Uninstallable&quot;
&#x27; finally, if it&#x27;s a user installed application, it will note that
&#x27; The columns look like:
&#x27; Name|Version|Silent Uninstall String|Uninstallable

SensorRandomize()

Set objRegistry = Getx64RegistryProvider()

keyPath = &quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;
key64Path = &quot;SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall&quot;

Const HKLM = &amp;H80000002
Const HKEY_USERS = &amp;H80000003

&#x27; list out 32-bit applications on a 64-bit system
If RegKeyExists(HKLM, key64Path) Then
	objRegistry.EnumKey HKLM, key64Path, arrSubKeys
	GetApplications HKLM,key64path,arrSubKeys
End If

&#x27; list out 32-bit applications on a 32-bit system, or 64-bit applications
&#x27; on a 64-bit system.
If RegKeyExists(HKLM, keyPath) Then
	objRegistry.EnumKey HKLM, keypath, arrSubKeys
	GetApplications HKLM,keypath,arrSubKeys
End If

&#x27; Also list out applications installed to HKEY_Users areas
&#x27; which will be appended to the arrSubKeys
objRegistry.EnumKey HKEY_USERS, &quot;&quot;, arrUserKeys
For Each strSIDkey In arrUserKeys
	If RegKeyExists(HKEY_USERS, strSIDKEY&amp;&quot;\&quot;&amp;keyPath) Then
		objRegistry.EnumKey HKEY_USERS, strSIDkey&amp;&quot;\&quot;&amp;keyPath, arrSubKeys
		GetApplications HKEY_USERS,strSIDKey&amp;&quot;\&quot;&amp;keyPath,arrSubKeys
	End If
Next


Function GetApplications(HIVE, keypath,arrSubKeys)
	Set applications = CreateObject(&quot;Scripting.Dictionary&quot;)
	On Error Resume Next
	For Each key in arrSubKeys
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;DisplayName&quot;, displayName
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;DisplayVersion&quot;, version
		objRegistry.GetDWORDValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;SystemComponent&quot;, systemComponent	
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;UninstallString&quot;, uninstallString	
		objRegistry.GetStringValue HIVE,keyPath &amp; &quot;\&quot; &amp; key,&quot;ParentKeyName&quot;, parentKey	
		&#x27; on error goto 0
		&#x27; assume it&#x27;s not uninstallable
		bUninstallable = &quot;Not Uninstallable&quot;
				
		If displayName &lt;&gt; &quot;&quot; _
			And Not IsNull(uninstallString) _ 
			And IsNull(parentKey) _
			And InStr(displayName, &quot;Hotfix&quot;) = 0 _
			And InStr(displayName, &quot;Update for&quot;) = 0 _
	 		And InStr(displayName, &quot;Security Update for&quot;) = 0 _
	 	Then 
	 		If InStr(LCase(uninstallString), &quot;msiexec&quot;) Then
	 			&#x27; replace any &#x2F;I with &#x2F;X and add silent flags
	 			uninstallString = Replace(uninstallString,&quot;&#x2F;I&quot;,&quot;&#x2F;X&quot;) &amp; &quot; &#x2F;qn &#x2F;noreboot&quot; 
	  			bUninstallable = &quot;Is Uninstallable&quot;
	  		End If
	 		If IsNull(systemComponent) Or systemComponent = 0 Then
				If IsNull(version) Then
					version = GetVersionInString(displayName)
				End If
				&#x27; This is a multi-column sensor.  Last two columns are hidden.

				displayString = displayName &amp; &quot;|&quot; &amp; version &amp; &quot;|&quot; &amp; uninstallString &amp; &quot;|&quot; &amp; bUninstallable

				&#x27; treat displayString as the unique value - cannot be listed twice.
				If Not applications.Exists(displayString) Then
					applications.Add displayString, &quot;&quot;
				End If 	
			End If 	
		End If 
	Next
	On Error Goto 0
	
	SortDictionary applications, 1 &#x27; This calls a sorting function specific to dictionaries
	arrApplicationsKeys = applications.Keys
	For Each application In arrApplicationsKeys
		&#x27; final output of the sensor
		WScript.Echo CleanCharacters(application)
	Next
End Function &#x27;GetApplications

Function RegKeyExists(sHive, sRegKey)
	Dim aValueNames, aValueTypes
	If objRegistry.EnumValues(sHive, sRegKey, aValueNames, aValueTypes) = 0 Then
		RegKeyExists = True
	Else
		RegKeyExists = False
	End If
End Function

Function SortDictionary(objDict, intSort)
 &#x27;   objDict - the dictionary to sort
 &#x27;   intSort - the field to sort (1=key, 2=item)
 
   &#x27; declare constants
   Const dictKey  = 1
   Const dictItem = 2
 
   &#x27; declare our variables
   Dim strDict()
   Dim objKey
   Dim strKey,strItem
   Dim X,Y,Z
 
   &#x27; get the dictionary count
   Z = objDict.Count
 
   &#x27; we need more than one item to warrant sorting
   If Z &gt; 1 Then
     &#x27; create an array to store dictionary information
     ReDim strDict(Z,2)
     X = 0
     &#x27; populate the string array
     For Each objKey In objDict
         strDict(X,dictKey)  = CStr(objKey)
         strDict(X,dictItem) = CStr(objDict(objKey))
         X = X + 1
     Next
 
     &#x27; perform a a shell sort of the string array
     For X = 0 To (Z - 2)
       For Y = X To (Z - 1)
         If StrComp(strDict(X,intSort),strDict(Y,intSort),vbTextCompare) &gt; 0 Then
             strKey  = strDict(X,dictKey)
             strItem = strDict(X,dictItem)
             strDict(X,dictKey)  = strDict(Y,dictKey)
             strDict(X,dictItem) = strDict(Y,dictItem)
             strDict(Y,dictKey)  = strKey
             strDict(Y,dictItem) = strItem
         End If
       Next
     Next
 
     &#x27; erase the contents of the dictionary object
     objDict.RemoveAll
 
     &#x27; repopulate the dictionary with the sorted information
     For X = 0 To (Z - 1)
       objDict.Add strDict(X,dictKey), strDict(X,dictItem)
     Next
 
   End If
 End Function &#x27;SortDictionary

Function GetVersionInString(ByVal strTemp)
&#x27; examines a string and returns a version string at the end of it
	Dim strOut
	strOut = &quot;&quot;
	If Not IsNull(strTemp) Then
		strTemp = StrReverse(strTemp)
		Dim strLookAtChar,intCurPos
		Dim bNumbersStartMarked : bNumbersStartMarked = False

		For intCurPos = 1 To Len(strTemp)		
			strLookAtChar = Mid(strTemp,intCurPos,1)
			If IsNumeric(strLookAtChar) Or strLookAtChar = &quot;.&quot; Or strLookAtChar = &quot;-&quot; Then
				bNumbersStartMarked = True
				strOut = strOut &amp; strLookAtChar
			End If
		If bNumbersStartMarked And ( (Not IsNumeric(strLookAtChar) And strLookAtChar &lt;&gt; &quot;.&quot; And strLookAtChar &lt;&gt; &quot;-&quot;) ) Then
			Exit For
		End If	
		Next
		strOut = StrReverse(strOut)
	Else
		strOut = &quot;&quot;
	End If
	
	If Len(strOut) = 0 Then strOut = &quot;N&#x2F;A&quot;
	
	GetVersionInString = strOut
	
End Function &#x27;GetVersionInString

Function CleanCharacters(strTest)
&#x27; String returned will not have characters in the output which
&#x27; are not friendly to the console app
	strPattern = &quot;[^\x20-\x7E]&quot;
	strReplace = &quot;&quot;
	Set objRegExp = New RegExp
	objRegExp.Global = True
	objRegExp.IgnoreCase = True
	objRegExp.Pattern = strPattern
	objRegExp.Global = True
	CleanCharacters = objRegExp.Replace(strTest, strReplace)
End Function

Function Getx64RegistryProvider
    &#x27; Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject(&quot;winmgmts:\\.\root\CIMV2&quot;)
    Set colItems = objWMIService.ExecQuery(&quot;Select SystemType from Win32_ComputerSystem&quot;)    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), &quot;x64&quot;) &gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject(&quot;WbemScripting.SWbemNamedValueSet&quot;)
    objCtx.Add &quot;__ProviderArchitecture&quot;, iArchType
    Set objLocator = CreateObject(&quot;Wbemscripting.SWbemLocator&quot;)
    Set objServices = objLocator.ConnectServer(&quot;&quot;,&quot;root\default&quot;,&quot;&quot;,&quot;&quot;,,,,objCtx)
    Set objRegProv = objServices.Get(&quot;StdRegProv&quot;)   
    
    Set Getx64RegistryProvider = objRegProv
End Function &#x27; Getx64RegistryProvider
&#x27;------------ INCLUDES after this line. Do not edit past this point -----
&#x27;- Begin file: utils&#x2F;SensorRandomization&#x2F;SensorRandomizationFunctions.vbs
&#x27;&#x27; -- Begin Random Sleep Functions -- &#x27;&#x27;

Dim bSensorRandomizeDebugOutput : bSensorRandomizeDebugOutput = False

Function SensorRandomizeLow()
    Dim intSensorRandomizeWaitLow : intSensorRandomizeWaitLow = 10
    SensorRandomizeRandomSleep(intSensorRandomizeWaitLow)
End Function &#x27; SensorRandomizeLow

Function SensorRandomize()
    Dim intSensorRandomizeWaitMed : intSensorRandomizeWaitMed = 20
    SensorRandomizeRandomSleep(intSensorRandomizeWaitMed)
End Function &#x27; SensorRandomize

Function SensorRandomizeHigh()
    Dim intSensorRandomizeWaitHigh : intSensorRandomizeWaitHigh = 30
    SensorRandomizeRandomSleep(intSensorRandomizeWaitHigh)
End Function &#x27; SensorRandomize

Function SensorRandomizeRandomSleep(intSleepTime)
&#x27; sleeps for a random period of time, intSleepTime is in seconds
&#x27; if the sensor randomize flag is on
&#x27; RandomizeScalingFactor is a multiplier on the values hardcoded in the sensor
&#x27; not typically set but can adjust timings per endpoint, optionally
	Dim intSensorRandomizeWaitTime
	Dim objShell,intRandomizeFlag,strRandomizeRegPath,intRandomizeScalingPercentage
	strRandomizeRegPath = SensorRandomizeGetTaniumRegistryPath&amp;&quot;\Sensor Data\Random Sleep&quot;
	
	Set objShell = CreateObject(&quot;WScript.Shell&quot;)
	On Error Resume Next
	intRandomizeFlag = objShell.RegRead(&quot;HKLM\&quot;&amp;strRandomizeRegPath&amp;&quot;\SensorRandomizeFlag&quot;)
	intRandomizeScalingPercentage = objShell.RegRead(&quot;HKLM\&quot;&amp;strRandomizeRegPath&amp;&quot;\SensorRandomizeScalingPercentage&quot;)
	On Error Goto 0
	If intRandomizeFlag &gt; 0 Then
		If intRandomizeScalingPercentage &gt; 0 Then
			intSleepTime = intRandomizeScalingPercentage * .01 * intSleepTime
			SensorRandomizeEcho &quot;Randomize scaling percentage of &quot; _ 
				&amp; intRandomizeScalingPercentage &amp; &quot; applied, new sleep time is &quot; &amp; intSleepTime
		End If
		intSensorRandomizeWaitTime = CLng(intSleepTime) * 1000 &#x27; convert to milliseconds
		&#x27; wait random interval between 0 and the max
		Randomize(SensorRandomizeTaniumRandomSeed)
		&#x27; assign random value to wait time max value
		intSensorRandomizeWaitTime = Int( ( intSensorRandomizeWaitTime + 1 ) * Rnd )
		SensorRandomizeEcho &quot;Sleeping for &quot; &amp; intSensorRandomizeWaitTime &amp; &quot; milliseconds&quot;
		WScript.Sleep(intSensorRandomizeWaitTime)
		SensorRandomizeEcho &quot;Done sleeping, continuing ...&quot;
	Else 
		SensorRandomizeEcho &quot;SensorRandomize Not Enabled - No Op&quot;
	End If
End Function &#x27;SensorRandomizeRandomSleep

Function SensorRandomizeTaniumRandomSeed
&#x27; for randomizing sensor code, the default seed is not random enough
	Dim timerNum
	timerNum = Timer()
	If timerNum &lt; 1 Then
		SensorRandomizeTaniumRandomSeed = (SensorRandomizeGetTaniumComputerID &#x2F; Timer() * 10 )
	Else
		SensorRandomizeTaniumRandomSeed = SensorRandomizeGetTaniumComputerID &#x2F; Timer
	End If
End Function &#x27;SensorRandomizeTaniumRandomSeed

Function SensorRandomizeGetTaniumRegistryPath
&#x27;SensorRandomizeGetTaniumRegistryPath works in x64 or x32
&#x27;looks for a valid Path value

	Dim objShell
	Dim keyNativePath, keyWoWPath, strPath, strFoundTaniumRegistryPath
	  
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    
	keyNativePath = &quot;Software\Tanium\Tanium Client&quot;
	keyWoWPath = &quot;Software\Wow6432Node\Tanium\Tanium Client&quot;
    
    &#x27; first check the Software key (valid for 32-bit machines, or 64-bit machines in 32-bit mode)
    On Error Resume Next
    strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyNativePath&amp;&quot;\Path&quot;)
    On Error Goto 0
	strFoundTaniumRegistryPath = keyNativePath
 
  	If strPath = &quot;&quot; Then
  		&#x27; Could not find 32-bit mode path, checking Wow6432Node
  		On Error Resume Next
  		strPath = objShell.RegRead(&quot;HKLM\&quot;&amp;keyWoWPath&amp;&quot;\Path&quot;)
  		On Error Goto 0
		strFoundTaniumRegistryPath = keyWoWPath
  	End If
  	
  	If Not strPath = &quot;&quot; Then
  		SensorRandomizeGetTaniumRegistryPath = strFoundTaniumRegistryPath
  	Else
  		SensorRandomizeGetTaniumRegistryPath = False
  		WScript.Echo &quot;Error: Cannot locate Tanium Registry Path&quot;
  	End If
End Function &#x27;SensorRandomizeGetTaniumRegistryPath

Function SensorRandomizeGetTaniumComputerID
&#x27;&#x27; This function gets the Tanium Computer ID
	Dim objShell
	Dim intClientID,strID,strKeyPath,strValueName
	
    strKeyPath = SensorRandomizeGetTaniumRegistryPath
    strValueName = &quot;ComputerID&quot;
    Set objShell = CreateObject(&quot;WScript.Shell&quot;)
    On Error Resume Next
    intClientID = objShell.RegRead(&quot;HKLM\&quot;&amp;strKeyPath&amp;&quot;\&quot;&amp;strValueName)
    If Err.Number &lt;&gt; 0 Then
    	SensorRandomizeGetTaniumComputerID = 0
    Else
		SensorRandomizeGetTaniumComputerID = SensorRandomizeReinterpretSignedAsUnsigned(intClientID)
	End If
	On Error Goto 0
End Function &#x27;SensorRandomizeGetTaniumComputerID

Function SensorRandomizeReinterpretSignedAsUnsigned(ByVal x)
	  If x &lt; 0 Then x = x + 2^32
	  SensorRandomizeReinterpretSignedAsUnsigned = x
End Function &#x27;SensorRandomizeReinterpretSignedAsUnsigned

Sub SensorRandomizeEcho(str)
	If bSensorRandomizeDebugOutput = true Then WScript.Echo str
End Sub &#x27;SensorRandomizeEcho
&#x27; -- End Random Sleep Functions --&#x27;
&#x27;- End file: utils&#x2F;SensorRandomization&#x2F;SensorRandomizationFunctions.vbs</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>1</os>
                <query>#!&#x2F;bin&#x2F;sh
# Detects which OS and if it is Linux then it will detect which Linux
# Distribution.

# Can be used as a starting point for shell scripts that need to work differently on
# Mac, and various flavors of Linux

OS=`uname -s`

GetVersionFromFile()
{
    VERSION=`cat $1 | tr &quot;\n&quot; &#x27; &#x27; | sed s&#x2F;.*VERSION.*=\ &#x2F;&#x2F; `
}

if [ &quot;${OS}&quot; = &quot;Linux&quot; ] ; then
    KERNEL=`uname -r`
    if [ -f &#x2F;etc&#x2F;redhat-release ] ; then
        # Redhat based system
        rpm -qa --queryformat &quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&quot;
    elif [ -f &#x2F;etc&#x2F;SuSE-release ] ; then
        # SuSE &#x2F; OpenSuSE based system
        rpm -qa --queryformat &quot;%{NAME}|%{VERSION}|nothing|Not Uninstallable\n&quot;
    elif [ -f &#x2F;etc&#x2F;lsb-release ] ; then
        # Usually Ubuntu -- this is a Linux Standard Based system, which
        # Ubuntu is by far the biggest.  But general LSB commands should work
        dpkg -l | awk &#x27;{print $2&quot;|&quot;$3&quot;|nothing|Not Uninstallable&quot;}&#x27;
    elif [ -f &#x2F;etc&#x2F;debian_version ] ; then
        # Debian -- note that Ubuntu is Debian based, but Debian does not have a
        # lsb-release file
        dpkg -l | awk &#x27;{print $2&quot;|&quot;$3&quot;|nothing|Not Uninstallable&quot;}&#x27;
        #else
	# a less common distribution.  Most all really popular distributions will
        # be caught by the tree above.
    fi
#else
   # not Linux -- could be anything, BSD &#x2F; Solaris &#x2F; AIX &#x2F; etc
fi

echo ${OSSTR}
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>2</os>
                <query>#!&#x2F;bin&#x2F;bash

notcontains() {
    string=&quot;$1&quot;
    substring=&quot;$2&quot;
    if test &quot;${string#*$substring}&quot; != &quot;$string&quot;
    then
        return 1    # $substring is not in $string
    else
        return 0    # $substring is in $string
    fi
}

ftemp=$(mktemp -t &#x27;apps.xml&#x27;)
system_profiler -xml SPApplicationsDataType &gt; &quot;$ftemp&quot;

count=1

while true
do
        app=`&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print :0:_items:$count:_name&quot; $ftemp 2&gt;&#x2F;dev&#x2F;null`
        version=`&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Print :0:_items:$count:version&quot; $ftemp 2&gt;&#x2F;dev&#x2F;null`
        if [ -z &quot;$app&quot; ]; then
                break
        fi
        test=&quot;VMware&quot;
        if notcontains &quot;$version&quot; &quot;$test&quot;; then
                echo $app&quot;|&quot;$version&quot;|nothing|Not Uninstallable&quot;
        fi
        let count=count+1
done
rm -rf &quot;$ftemp&quot;
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>3</os>
                <query>#!&#x2F;usr&#x2F;xpg4&#x2F;bin&#x2F;sh
for p in $(pkginfo -l -c application | egrep &#x27;PKGINST:|VERSION:&#x27; | paste - - | sed s&#x2F;PKGINST:&#x2F;&#x2F; | sed s&#x2F;VERSION:&#x2F;&#x2F; | awk &#x27;{ print $1&quot;|&quot;$2}&#x27;)
do
   app=$(echo &quot;$p&quot; | awk -F\| &#x27;{print $1 }&#x27;)
   ver=$(echo &quot;$p&quot; | awk -F\| &#x27;{print $2 }&#x27;)
   ver=$(echo &quot;$ver&quot; | awk -F, &#x27;{ print $ 1}&#x27;) 
   echo &quot;$app|$ver|nothing|Not Uninstallable&quot;
done
</query>
                <signature></signature>
            </sensor_query>
            <sensor_query>
                <sensor_type>6</sensor_type>
                <os>4</os>
                <query>#!&#x2F;bin&#x2F;sh
#pkg_name|pkg_vers|nothing|Not Uninstallable

for pkg in `&#x2F;usr&#x2F;bin&#x2F;lslpp -Lcq | awk -F: &#x27;{ print $2&quot;|&quot;$3&#x27;}`
do
 echo &quot;$pkg|nothing|Not Uninstallable&quot;
done
</query>
                <signature></signature>
            </sensor_query>
        </queries>
        <columns>
            <column>
                <column_index>0</column_index>
                <name>Name</name>
                <hidden_flag>0</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>1</column_index>
                <name>Version</name>
                <hidden_flag>0</hidden_flag>
                <result_type>2</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>2</column_index>
                <name>Silent Uninstall String</name>
                <hidden_flag>1</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
            <column>
                <column_index>3</column_index>
                <name>Uninstallable</name>
                <hidden_flag>1</hidden_flag>
                <result_type>1</result_type>
                <ignore_case_flag>1</ignore_case_flag>
                <exclude_from_parse>0</exclude_from_parse>
            </column>
        </columns>
        <meta_data/>
    </sensor>
</content>