<!-- Exported using version "6.5.314.4236" on Wed, Oct 28, 2015 11:49:49 AM  -->
<packages>
  <tanium_package>
    <name>Install Osquery Debian</name>
    <display_name>Install Osquery Debian</display_name>
    <command_line>/usr/bin/dpkg -i osquery-latest.deb</command_line>
    <prompt_text/>
    <command_line_timeout>300</command_line_timeout>
    <hidden_flag>0</hidden_flag>
    <skip_lock_flag>0</skip_lock_flag>
    <verify_expire_seconds>600</verify_expire_seconds>
    <download_seconds>600</download_seconds>
    <use_plugin_flag>0</use_plugin_flag>
    <plugin_name/>
    <plugin_show_schedule>1</plugin_show_schedule>
    <plugin_show_target>1</plugin_show_target>
    <plugin_show_summary>1</plugin_show_summary>
    <plugin_show_preview>1</plugin_show_preview>
    <signature/>
    <meta_data/>
    <parameters/>
    <verify_group>
      <group>
        <name></name>
        <type>0</type>
        <sentence>
          <not_flag>0</not_flag>
          <and_flag>1</and_flag>
          <filter_specs>
            <filter_spec>
              <how_hash>NaN</how_hash>
              <type>filter</type>
              <what_hash>1487995823</what_hash>
              <how_reg_ex>.*/usr/bin/osqueryi.*</how_reg_ex>
              <max_age_seconds>0</max_age_seconds>
              <not_flag>0</not_flag>
              <greater_flag>0</greater_flag>
              <equal_flag>0</equal_flag>
              <ignore_case_flag>1</ignore_case_flag>
              <substring_flag>0</substring_flag>
              <all_values_flag>0</all_values_flag>
              <all_times_flag>0</all_times_flag>
              <utf8_flag>0</utf8_flag>
              <delimiter>0</delimiter>
              <delimiter_index>0</delimiter_index>
              <result_type>11</result_type>
              <aggregation>0</aggregation>
              <substring_start>0</substring_start>
              <substring_length>0</substring_length>
              <how_name/>
              <start_time/>
              <end_time/>
              <temp_sensor>
                <name>Folder Exists[/usr/bin/osqueryi]</name>
                <result_type>1</result_type>
                <seconds>86400</seconds>
                <seconds_never_flag>1</seconds_never_flag>
                <qseconds>600</qseconds>
                <event_flag>0</event_flag>
                <ignore_case_flag>1</ignore_case_flag>
                <weight>0</weight>
                <category/>
                <exclude_from_parse>1</exclude_from_parse>
                <delimiter>,</delimiter>
                <description/>
                <what_hash>1487995823</what_hash>
                <hidden_flag>0</hidden_flag>
                <columns/>
                <queries>
                  <sensor_query>
                    <query>'========================================
' Folder Exists
'========================================

Option Explicit

Dim bExamineRemoteFolders ' boolean to decide whether to consider non-local dirs
bExamineRemoteFolders = True ' attempt to look at remote folders, may fail due to access

Dim strFolderPath, objFso, objShell

strFolderPath = unescape("%2fusr%2fbin%2fosqueryi")

If InStr(LCase(strFolderPath),"%userprofile%") &gt; 0 Then
	CheckForAllUsers strFolderPath
Else
	CheckNoUserVars strFolderPath
End If

	
Sub CheckNoUserVars(ByVal strFolderPath)
' plain check if a file exists
	strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
	Set objShell = CreateObject("WScript.Shell")
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject("Scripting.Filesystemobject")
	
	If objFso.FolderExists(strFolderPath) Then 
		WScript.Echo UnFixFileSystemRedirectionForPath(strFolderPath)
	Else 
		WScript.Echo "Folder does not exist"
	End If
End Sub 'CheckNoUserVars

Sub CheckForAllUsers(ByVal strFolderPath)
' checks in every user directory

	' Remove %userprofile% and keep the rest
	strFolderPath = Replace(LCase(strFolderPath),"%userprofile%","")	
	
	On Error Resume Next ' permissions issues, perhaps
	
	Const HKLM = &amp;H80000002
	Dim objShell,objFso
	Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
	Dim strValue,strOut,bFolderFound
	bFolderFound = False
	Set objShell = CreateObject("WScript.Shell")
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject("Scripting.Filesystemobject")
	
	Set objRegistry=Getx64RegistryProvider
 
	strKeyPath = "SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList"
	objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys
 

	For Each objSubkey In arrSubkeys
	    strValueName = "ProfileImagePath"
	    strSubPath = strKeyPath &amp; "\" &amp; objSubkey
	    objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue

	    If Not bExamineRemoteFolders And Not InStr(strValue,":") &gt; 0 Then ' Not Local, don't get size of remote dirs
	    	' if user profile is not local and not examining remote profiles, ignore
	    Else 
	    	If objFSO.FolderExists(strValue&amp;strFolderPath) Then
				bFolderFound = True
				WScript.Echo strValue&amp;strFolderPath
			End If
		End If
	Next
	
	If Not bFolderFound Then

		WScript.Echo "Folder does not exist"
	End If

	On Error Goto 0

End Sub 'CheckForAllUsers

Function Getx64RegistryProvider
    ' Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject("winmgmts:\\.\root\CIMV2")
    Set colItems = objWMIService.ExecQuery("Select SystemType from Win32_ComputerSystem")    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), "x64") &gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject("WbemScripting.SWbemNamedValueSet")
    objCtx.Add "__ProviderArchitecture", iArchType
    Set objLocator = CreateObject("Wbemscripting.SWbemLocator")
    Set objServices = objLocator.ConnectServer("","root\default","","",,,,objCtx)
    Set objRegProv = objServices.Get("StdRegProv")   
    
    Set Getx64RegistryProvider = objRegProv
End Function ' Getx64RegistryProvider

Function FixFileSystemRedirectionForPath(strFilePath)
' This function will fix a folder location so that
' a 32-bit program can be passed the windows\system32 directory
' as a parameter.
' Even if the sensor or action runs in 64-bit mode, a 32-bit
' program called in a 64-bit environment cannot access
' the system32 directory - it would be redirected to syswow64.
' you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Set objShell = CreateObject("Wscript.Shell")

	strProgramFilesx86=objShell.ExpandEnvironmentStrings("%ProgramFiles%")

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings("%ProgramFiles(x86)%")
	
	If objFSO.FolderExists(strProgramFilesx86) Then ' quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,"")
			strNewSystem32Location = Replace(strSystem32Location,"system32","sysnative")
			strFilePath = strNewSystem32Location&amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	'Cleanup
	Set objFSO = Nothing
End Function 'FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
' This function will undo the changes made to a path by the 
' FixFileSystemRedirectionForPath function
' if a path is passed in with the sysnative string in it
' it will simply change it to system32, regardless of whether
' the OS is 64-bit.  A path will only be changed when it's
' necessary, so this has no effect when it's not changed.

	Dim objFSO,strSystem32Location,strNewSystem32Location
	
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strNewSystem32Location = Replace(strSystem32Location,"system32","sysnative")
	
	UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
	
	'Cleanup
	Set objFSO = Nothing
End Function 'UnFixFileSystemRedirectionForPath</query>
                    <sensor_type>4</sensor_type>
                    <os>0</os>
                    <signature/>
                  </sensor_query>
                </queries>
                <meta_data/>
                <parameters>
                  <param>
                    <varname>||folder||</varname>
                    <value>/usr/bin/osqueryi</value>
                  </param>
                  <parameter_text>{"parameters":[{"label":"Folder path to search for","promptText":"e.g. c:\\Program Files\\MyApp","key":"folder","value":"/usr/bin/osqueryi","helpString":"Enter the full drive letter and folder path of the folder. Environment variables accepted.","maxChars":0,"restrict":null,"defaultValue":"","validationExpressions":[{"flags":"","helpString":"Value can not be blank","expression":"^\\S","model":"com.tanium.models::ValidationExpression","parameterType":"com.tanium.models::ValidationExpression"}],"parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"model":"com.tanium.components.parameters::ParametersArray","parameterType":"com.tanium.components.parameters::ParametersArray"}</parameter_text>
                </parameters>
                <display_name>Folder Exists[/usr/bin/osqueryi]</display_name>
                <sensor>
                  <name>Folder Exists</name>
                  <result_type>1</result_type>
                  <seconds>86400</seconds>
                  <seconds_never_flag>1</seconds_never_flag>
                  <qseconds>600</qseconds>
                  <event_flag>0</event_flag>
                  <ignore_case_flag>1</ignore_case_flag>
                  <weight>0</weight>
                  <category>File System</category>
                  <exclude_from_parse>1</exclude_from_parse>
                  <delimiter>,</delimiter>
                  <description>A parameterized Sensor that checks to see if a folder exists on a machine.  If it does, it returns back the full path of the folder. Will expand environment variables, and will expand %userprofile%/folder or "~/folder" to search all user home directories.
Example: C:\Windows\system32</description>
                  <what_hash>1101836903</what_hash>
                  <hidden_flag>0</hidden_flag>
                  <columns/>
                  <queries>
                    <sensor_query>
                      <query>'========================================
' Folder Exists
'========================================

Option Explicit

Dim bExamineRemoteFolders ' boolean to decide whether to consider non-local dirs
bExamineRemoteFolders = True ' attempt to look at remote folders, may fail due to access

Dim strFolderPath, objFso, objShell

strFolderPath = unescape("||folder||")

If InStr(LCase(strFolderPath),"%userprofile%") &gt; 0 Then
	CheckForAllUsers strFolderPath
Else
	CheckNoUserVars strFolderPath
End If

	
Sub CheckNoUserVars(ByVal strFolderPath)
' plain check if a file exists
	strFolderPath = FixFileSystemRedirectionForPath(strFolderPath)
	Set objShell = CreateObject("WScript.Shell")
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject("Scripting.Filesystemobject")
	
	If objFso.FolderExists(strFolderPath) Then 
		WScript.Echo UnFixFileSystemRedirectionForPath(strFolderPath)
	Else 
		WScript.Echo "Folder does not exist"
	End If
End Sub 'CheckNoUserVars

Sub CheckForAllUsers(ByVal strFolderPath)
' checks in every user directory

	' Remove %userprofile% and keep the rest
	strFolderPath = Replace(LCase(strFolderPath),"%userprofile%","")	
	
	On Error Resume Next ' permissions issues, perhaps
	
	Const HKLM = &amp;H80000002
	Dim objShell,objFso
	Dim objRegistry,strKeyPath,objSubKey,arrSubKeys,strValueName,strSubPath
	Dim strValue,strOut,bFolderFound
	bFolderFound = False
	Set objShell = CreateObject("WScript.Shell")
	
	strFolderPath = objShell.ExpandEnvironmentStrings( strFolderPath )
	
	Set objFso = WScript.CreateObject("Scripting.Filesystemobject")
	
	Set objRegistry=Getx64RegistryProvider
 
	strKeyPath = "SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList"
	objRegistry.EnumKey HKLM, strKeyPath, arrSubkeys
 

	For Each objSubkey In arrSubkeys
	    strValueName = "ProfileImagePath"
	    strSubPath = strKeyPath &amp; "\" &amp; objSubkey
	    objRegistry.GetExpandedStringValue HKLM,strSubPath,strValueName,strValue

	    If Not bExamineRemoteFolders And Not InStr(strValue,":") &gt; 0 Then ' Not Local, don't get size of remote dirs
	    	' if user profile is not local and not examining remote profiles, ignore
	    Else 
	    	If objFSO.FolderExists(strValue&amp;strFolderPath) Then
				bFolderFound = True
				WScript.Echo strValue&amp;strFolderPath
			End If
		End If
	Next
	
	If Not bFolderFound Then

		WScript.Echo "Folder does not exist"
	End If

	On Error Goto 0

End Sub 'CheckForAllUsers

Function Getx64RegistryProvider
    ' Returns the best available registry provider:  32 bit on 32 bit systems, 64 bit on 64 bit systems
    Dim objWMIService, colItems, objItem, iArchType, objCtx, objLocator, objServices, objRegProv
    Set objWMIService = GetObject("winmgmts:\\.\root\CIMV2")
    Set colItems = objWMIService.ExecQuery("Select SystemType from Win32_ComputerSystem")    
    For Each objItem In colItems
        If InStr(LCase(objItem.SystemType), "x64") &gt; 0 Then
            iArchType = 64
        Else
            iArchType = 32
        End If
    Next
    
    Set objCtx = CreateObject("WbemScripting.SWbemNamedValueSet")
    objCtx.Add "__ProviderArchitecture", iArchType
    Set objLocator = CreateObject("Wbemscripting.SWbemLocator")
    Set objServices = objLocator.ConnectServer("","root\default","","",,,,objCtx)
    Set objRegProv = objServices.Get("StdRegProv")   
    
    Set Getx64RegistryProvider = objRegProv
End Function ' Getx64RegistryProvider

Function FixFileSystemRedirectionForPath(strFilePath)
' This function will fix a folder location so that
' a 32-bit program can be passed the windows\system32 directory
' as a parameter.
' Even if the sensor or action runs in 64-bit mode, a 32-bit
' program called in a 64-bit environment cannot access
' the system32 directory - it would be redirected to syswow64.
' you would not want to do this for 64-bit programs.
	
	Dim objFSO, strSystem32Location,objShell
	Dim strProgramFilesx86,strNewSystem32Location,strRestOfPath
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	Set objShell = CreateObject("Wscript.Shell")

	strProgramFilesx86=objShell.ExpandEnvironmentStrings("%ProgramFiles%")

	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strProgramFilesx86=objShell.ExpandEnvironmentStrings("%ProgramFiles(x86)%")
	
	If objFSO.FolderExists(strProgramFilesx86) Then ' quick check for x64
		If InStr(strFilePath,strSystem32Location) = 1 Then
			strRestOfPath = Replace(strFilePath,strSystem32Location,"")
			strNewSystem32Location = Replace(strSystem32Location,"system32","sysnative")
			strFilePath = strNewSystem32Location&amp;strRestOfPath
		End If
	End If
	FixFileSystemRedirectionForPath = strFilePath
	
	'Cleanup
	Set objFSO = Nothing
End Function 'FixFileSystemRedirectionForPath

Function UnFixFileSystemRedirectionForPath(strFilePath)
' This function will undo the changes made to a path by the 
' FixFileSystemRedirectionForPath function
' if a path is passed in with the sysnative string in it
' it will simply change it to system32, regardless of whether
' the OS is 64-bit.  A path will only be changed when it's
' necessary, so this has no effect when it's not changed.

	Dim objFSO,strSystem32Location,strNewSystem32Location
	
	Set objFSO = CreateObject("Scripting.FileSystemObject")
	
	strFilePath = LCase(strFilePath)
	strSystem32Location = LCase(objFSO.GetSpecialFolder(1))
	strNewSystem32Location = Replace(strSystem32Location,"system32","sysnative")
	
	UnFixFileSystemRedirectionForPath = Replace(strFilePath,strNewSystem32Location,strSystem32Location)
	
	'Cleanup
	Set objFSO = Nothing
End Function 'UnFixFileSystemRedirectionForPath</query>
                      <sensor_type>4</sensor_type>
                      <os>0</os>
                      <signature/>
                    </sensor_query>
                    <sensor_query>
                      <query>#!/bin/bash

urldecode() {
        local data=$(echo "$1" | sed -e 's/\+/ /g' -e 's/%/\\x/g')
        printf '%b' "$data"
}

file="$(urldecode "||folder||")"

if [[ "$file" == *~* ]]
then
  # replace home directory with nothing
  file="${file#~\/}"

  # Read in /etc/passwd to determine home dirs
  awk -F: '$6 ~ /home/ &amp;&amp; $7 ~ /sh/ {print $1, $6}' /etc/passwd |
  while read NAME homedir
  do
     if [ -e "$homedir/$file" ]
     then
        echo "$homedir/$file"
     fi
   done
else
   if [ -e "$file" ]
   then
      echo "$file"
   fi
fi</query>
                      <sensor_type>6</sensor_type>
                      <os>1</os>
                      <signature/>
                    </sensor_query>
                    <sensor_query>
                      <query>#!/bin/sh

urldecode() {
        local data=$(echo "$1" | sed -e 's/\+/ /g' -e 's/%/\\x/g')
        printf '%b' "$data"
}

folder="$(urldecode "||folder||")"
folder=$(echo "$folder" | sed 's/ /\ /g')

if [ -d "$folder" ]
then
	ls -d "$folder"
else
	echo Folder does not exist
fi</query>
                      <sensor_type>6</sensor_type>
                      <os>2</os>
                      <signature/>
                    </sensor_query>
                    <sensor_query>
                      <query>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {"parameters":[{"validationExpressions":[{"helpString":"Value can not be blank","flags":"","expression":"^\S","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"key":"folder","promptText":"e.g. c:\Program Files\MyApp","label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Environment variables accepted.","value":"","defaultValue":"","restrict":null,"maxChars":0,"parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}
# ||folder||  

echo "N/A on Solaris"</query>
                      <sensor_type>6</sensor_type>
                      <os>3</os>
                      <signature/>
                    </sensor_query>
                    <sensor_query>
                      <query>#!/bin/sh

# THIS IS A STUB - NOT INTENDED AS FUNCTIONAL - NA
# {"parameters":[{"validationExpressions":[{"helpString":"Value can not be blank","flags":"","expression":"^\S","parameterType":"com.tanium.models::ValidationExpression","model":"com.tanium.models::ValidationExpression"}],"key":"folder","promptText":"e.g. c:\Program Files\MyApp","label":"Folder path to search for","helpString":"Enter the full drive letter and folder path of the folder. Environment variables accepted.","value":"","defaultValue":"","restrict":null,"maxChars":0,"parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"parameterType":"com.tanium.components.parameters::ParametersArray","model":"com.tanium.components.parameters::ParametersArray"}
# ||folder||  

echo "N/A on AIX"</query>
                      <sensor_type>6</sensor_type>
                      <os>4</os>
                      <signature/>
                    </sensor_query>
                  </queries>
                  <meta_data>
                    <meta_data_item>
                      <name>defined</name>
                      <value>Tanium</value>
                      <admin_flag>0</admin_flag>
                    </meta_data_item>
                  </meta_data>
                  <parameters>
                    <param>
                      <varname>||folder||</varname>
                      <value/>
                    </param>
                    <parameter_text>{"parameters":[{"label":"Folder path to search for","promptText":"e.g. c:\\Program Files\\MyApp","key":"folder","value":"","helpString":"Enter the full drive letter and folder path of the folder. Environment variables accepted.","maxChars":0,"restrict":null,"defaultValue":"","validationExpressions":[{"flags":"","helpString":"Value can not be blank","expression":"^\\S","model":"com.tanium.models::ValidationExpression","parameterType":"com.tanium.models::ValidationExpression"}],"parameterType":"com.tanium.components.parameters::TextInputParameter","model":"com.tanium.components.parameters::TextInputParameter"}],"model":"com.tanium.components.parameters::ParametersArray","parameterType":"com.tanium.components.parameters::ParametersArray"}</parameter_text>
                  </parameters>
                </sensor>
              </temp_sensor>
              <parameter_text/>
              <parameters>
                <param>
                  <varname>||folder||</varname>
                  <value>/usr/bin/osqueryi</value>
                </param>
              </parameters>
            </filter_spec>
          </filter_specs>
        </sentence>
      </group>
    </verify_group>
    <package_files>
      <package_file>
        <file_name>osquery-latest.deb</file_name>
        <source>https://osquery-packages.s3.amazonaws.com/trusty/osquery-latest.deb</source>
        <size>4859560</size>
        <hash>ddf307cca4e5271c4e5e0bb7649c41b94c862419d589c8b98e88919964b2fbaf</hash>
        <type>1</type>
        <download_seconds>0</download_seconds>
      </package_file>
    </package_files>
    <sensors/>
  </tanium_package>
  <tanium_package>
    <name>Install Osquery OSX</name>
    <display_name>Install Osquery OSX</display_name>
    <command_line>/usr/sbin/installer -pkg osquery-latest.pkg -target /</command_line>
    <prompt_text/>
    <command_line_timeout>60</command_line_timeout>
    <hidden_flag>0</hidden_flag>
    <skip_lock_flag>0</skip_lock_flag>
    <verify_expire_seconds>600</verify_expire_seconds>
    <download_seconds>600</download_seconds>
    <use_plugin_flag>0</use_plugin_flag>
    <plugin_name/>
    <plugin_show_schedule>1</plugin_show_schedule>
    <plugin_show_target>1</plugin_show_target>
    <plugin_show_summary>1</plugin_show_summary>
    <plugin_show_preview>1</plugin_show_preview>
    <signature/>
    <meta_data/>
    <parameters/>
    <package_files>
      <package_file>
        <file_name>osquery-latest.pkg</file_name>
        <source>https://osquery-packages.s3.amazonaws.com/darwin/osquery-latest.pkg</source>
        <size>4502969</size>
        <hash>0f5271acd9bd6a57233de182c56d68571519b5d3f457b56b7b098a6c6210b98f</hash>
        <type>1</type>
        <download_seconds>0</download_seconds>
      </package_file>
    </package_files>
    <sensors/>
  </tanium_package>
  <tanium_package>
    <name>Install Osquery RHEL 6</name>
    <display_name>Install Osquery RHEL 6</display_name>
    <command_line>/usr/bin/rpm -Uvh osquery.rpm</command_line>
    <prompt_text/>
    <command_line_timeout>300</command_line_timeout>
    <hidden_flag>0</hidden_flag>
    <skip_lock_flag>0</skip_lock_flag>
    <verify_expire_seconds>600</verify_expire_seconds>
    <download_seconds>600</download_seconds>
    <use_plugin_flag>0</use_plugin_flag>
    <plugin_name/>
    <plugin_show_schedule>1</plugin_show_schedule>
    <plugin_show_target>1</plugin_show_target>
    <plugin_show_summary>1</plugin_show_summary>
    <plugin_show_preview>1</plugin_show_preview>
    <signature/>
    <meta_data/>
    <parameters/>
    <package_files>
      <package_file>
        <file_name>osquery.rpm</file_name>
        <source>https://osquery-packages.s3.amazonaws.com/centos6/osquery.rpm</source>
        <size>5120916</size>
        <hash>b1b4bb07e7cf142c9ec8e942adf58879b108e682456f3b23eeb231fbf283c84d</hash>
        <type>1</type>
        <download_seconds>0</download_seconds>
      </package_file>
    </package_files>
    <sensors/>
  </tanium_package>
  <tanium_package>
    <name>Install Osquery RHEL 7</name>
    <display_name>Install Osquery RHEL 7</display_name>
    <command_line>/usr/bin/rpm -Uvh osquery.rpm</command_line>
    <prompt_text/>
    <command_line_timeout>300</command_line_timeout>
    <hidden_flag>0</hidden_flag>
    <skip_lock_flag>0</skip_lock_flag>
    <verify_expire_seconds>600</verify_expire_seconds>
    <download_seconds>600</download_seconds>
    <use_plugin_flag>0</use_plugin_flag>
    <plugin_name/>
    <plugin_show_schedule>1</plugin_show_schedule>
    <plugin_show_target>1</plugin_show_target>
    <plugin_show_summary>1</plugin_show_summary>
    <plugin_show_preview>1</plugin_show_preview>
    <signature/>
    <meta_data/>
    <parameters/>
    <package_files>
      <package_file>
        <file_name>osquery.rpm</file_name>
        <source>https://osquery-packages.s3.amazonaws.com/centos7/osquery.rpm</source>
        <size>4571520</size>
        <hash>426c4438d4c12a4a09abc0e6a7a7f670bd8291ba25792d2b160d3702263f71ee</hash>
        <type>1</type>
        <download_seconds>0</download_seconds>
      </package_file>
    </package_files>
    <sensors/>
  </tanium_package>
  <tanium_package>
    <name>Osquery Linux Start</name>
    <display_name>Osquery Linux Start</display_name>
    <command_line>service osqueryd start</command_line>
    <prompt_text/>
    <command_line_timeout>300</command_line_timeout>
    <hidden_flag>0</hidden_flag>
    <skip_lock_flag>0</skip_lock_flag>
    <verify_expire_seconds>600</verify_expire_seconds>
    <download_seconds>600</download_seconds>
    <use_plugin_flag>0</use_plugin_flag>
    <plugin_name/>
    <plugin_show_schedule>1</plugin_show_schedule>
    <plugin_show_target>1</plugin_show_target>
    <plugin_show_summary>1</plugin_show_summary>
    <plugin_show_preview>1</plugin_show_preview>
    <signature/>
    <meta_data/>
    <parameters/>
    <package_files/>
    <sensors/>
  </tanium_package>
  <tanium_package>
    <name>Osquery Linux Stop</name>
    <display_name>Osquery Linux Stop</display_name>
    <command_line>service osqueryd stop</command_line>
    <prompt_text/>
    <command_line_timeout>300</command_line_timeout>
    <hidden_flag>0</hidden_flag>
    <skip_lock_flag>0</skip_lock_flag>
    <verify_expire_seconds>600</verify_expire_seconds>
    <download_seconds>600</download_seconds>
    <use_plugin_flag>0</use_plugin_flag>
    <plugin_name/>
    <plugin_show_schedule>1</plugin_show_schedule>
    <plugin_show_target>1</plugin_show_target>
    <plugin_show_summary>1</plugin_show_summary>
    <plugin_show_preview>1</plugin_show_preview>
    <signature/>
    <meta_data/>
    <parameters/>
    <package_files/>
    <sensors/>
  </tanium_package>
</packages>